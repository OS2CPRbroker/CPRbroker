#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.586
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CprBroker.Data.Part
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PartCopy")]
	public partial class PartDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPersonMapping(PersonMapping instance);
    partial void UpdatePersonMapping(PersonMapping instance);
    partial void DeletePersonMapping(PersonMapping instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertRelationshipType(RelationshipType instance);
    partial void UpdateRelationshipType(RelationshipType instance);
    partial void DeleteRelationshipType(RelationshipType instance);
    partial void InsertPersonRelationship(PersonRelationship instance);
    partial void UpdatePersonRelationship(PersonRelationship instance);
    partial void DeletePersonRelationship(PersonRelationship instance);
    partial void InsertLifecycleStatus(LifecycleStatus instance);
    partial void UpdateLifecycleStatus(LifecycleStatus instance);
    partial void DeleteLifecycleStatus(LifecycleStatus instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertDanishAddress(DanishAddress instance);
    partial void UpdateDanishAddress(DanishAddress instance);
    partial void DeleteDanishAddress(DanishAddress instance);
    partial void InsertGreenlandicAddress(GreenlandicAddress instance);
    partial void UpdateGreenlandicAddress(GreenlandicAddress instance);
    partial void DeleteGreenlandicAddress(GreenlandicAddress instance);
    partial void InsertContactChannelType(ContactChannelType instance);
    partial void UpdateContactChannelType(ContactChannelType instance);
    partial void DeleteContactChannelType(ContactChannelType instance);
    partial void InsertContactChannel(ContactChannel instance);
    partial void UpdateContactChannel(ContactChannel instance);
    partial void DeleteContactChannel(ContactChannel instance);
    partial void InsertEffect(Effect instance);
    partial void UpdateEffect(Effect instance);
    partial void DeleteEffect(Effect instance);
    partial void InsertActorRef(ActorRef instance);
    partial void UpdateActorRef(ActorRef instance);
    partial void DeleteActorRef(ActorRef instance);
    partial void InsertPersonState(PersonState instance);
    partial void UpdatePersonState(PersonState instance);
    partial void DeletePersonState(PersonState instance);
    partial void InsertCivilStatusCodeType(CivilStatusCodeType instance);
    partial void UpdateCivilStatusCodeType(CivilStatusCodeType instance);
    partial void DeleteCivilStatusCodeType(CivilStatusCodeType instance);
    partial void InsertLifeStatusCodeType(LifeStatusCodeType instance);
    partial void UpdateLifeStatusCodeType(LifeStatusCodeType instance);
    partial void DeleteLifeStatusCodeType(LifeStatusCodeType instance);
    partial void InsertPersonLifeState(PersonLifeState instance);
    partial void UpdatePersonLifeState(PersonLifeState instance);
    partial void DeletePersonLifeState(PersonLifeState instance);
    partial void InsertPersonCivilState(PersonCivilState instance);
    partial void UpdatePersonCivilState(PersonCivilState instance);
    partial void DeletePersonCivilState(PersonCivilState instance);
    partial void InsertAddressPoint(AddressPoint instance);
    partial void UpdateAddressPoint(AddressPoint instance);
    partial void DeleteAddressPoint(AddressPoint instance);
    partial void InsertGeographicCoorditaneTuple(GeographicCoorditaneTuple instance);
    partial void UpdateGeographicCoorditaneTuple(GeographicCoorditaneTuple instance);
    partial void DeleteGeographicCoorditaneTuple(GeographicCoorditaneTuple instance);
    partial void InsertGeographicPointLocation(GeographicPointLocation instance);
    partial void UpdateGeographicPointLocation(GeographicPointLocation instance);
    partial void DeleteGeographicPointLocation(GeographicPointLocation instance);
    partial void InsertCountryRef(CountryRef instance);
    partial void UpdateCountryRef(CountryRef instance);
    partial void DeleteCountryRef(CountryRef instance);
    partial void InsertForeignAddress(ForeignAddress instance);
    partial void UpdateForeignAddress(ForeignAddress instance);
    partial void DeleteForeignAddress(ForeignAddress instance);
    partial void InsertDenmarkAddress(DenmarkAddress instance);
    partial void UpdateDenmarkAddress(DenmarkAddress instance);
    partial void DeleteDenmarkAddress(DenmarkAddress instance);
    partial void InsertCountrySchemeType(CountrySchemeType instance);
    partial void UpdateCountrySchemeType(CountrySchemeType instance);
    partial void DeleteCountrySchemeType(CountrySchemeType instance);
    partial void InsertAddressPointStatus(AddressPointStatus instance);
    partial void UpdateAddressPointStatus(AddressPointStatus instance);
    partial void DeleteAddressPointStatus(AddressPointStatus instance);
    partial void InsertAddressCoordinateQualityType(AddressCoordinateQualityType instance);
    partial void UpdateAddressCoordinateQualityType(AddressCoordinateQualityType instance);
    partial void DeleteAddressCoordinateQualityType(AddressCoordinateQualityType instance);
    partial void InsertPersonRegistration(PersonRegistration instance);
    partial void UpdatePersonRegistration(PersonRegistration instance);
    partial void DeletePersonRegistration(PersonRegistration instance);
    partial void InsertPersonAttributes(PersonAttributes instance);
    partial void UpdatePersonAttributes(PersonAttributes instance);
    partial void DeletePersonAttributes(PersonAttributes instance);
    partial void InsertCprData(CprData instance);
    partial void UpdateCprData(CprData instance);
    partial void DeleteCprData(CprData instance);
    partial void InsertForeignCitizenCountry(ForeignCitizenCountry instance);
    partial void UpdateForeignCitizenCountry(ForeignCitizenCountry instance);
    partial void DeleteForeignCitizenCountry(ForeignCitizenCountry instance);
    partial void InsertForeignCitizenData(ForeignCitizenData instance);
    partial void UpdateForeignCitizenData(ForeignCitizenData instance);
    partial void DeleteForeignCitizenData(ForeignCitizenData instance);
    partial void InsertUnknownCitizenData(UnknownCitizenData instance);
    partial void UpdateUnknownCitizenData(UnknownCitizenData instance);
    partial void DeleteUnknownCitizenData(UnknownCitizenData instance);
    partial void InsertHealthInformation(HealthInformation instance);
    partial void UpdateHealthInformation(HealthInformation instance);
    partial void DeleteHealthInformation(HealthInformation instance);
    partial void InsertPersonName(PersonName instance);
    partial void UpdatePersonName(PersonName instance);
    partial void DeletePersonName(PersonName instance);
    partial void InsertPersonProperties(PersonProperties instance);
    partial void UpdatePersonProperties(PersonProperties instance);
    partial void DeletePersonProperties(PersonProperties instance);
    #endregion
		
		public PartDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PersonMapping> PersonMappings
		{
			get
			{
				return this.GetTable<PersonMapping>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<RelationshipType> RelationshipTypes
		{
			get
			{
				return this.GetTable<RelationshipType>();
			}
		}
		
		public System.Data.Linq.Table<PersonRelationship> PersonRelationships
		{
			get
			{
				return this.GetTable<PersonRelationship>();
			}
		}
		
		public System.Data.Linq.Table<LifecycleStatus> LifecycleStatus
		{
			get
			{
				return this.GetTable<LifecycleStatus>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<DanishAddress> DanishAddresses
		{
			get
			{
				return this.GetTable<DanishAddress>();
			}
		}
		
		public System.Data.Linq.Table<GreenlandicAddress> GreenlandicAddresses
		{
			get
			{
				return this.GetTable<GreenlandicAddress>();
			}
		}
		
		public System.Data.Linq.Table<ContactChannelType> ContactChannelTypes
		{
			get
			{
				return this.GetTable<ContactChannelType>();
			}
		}
		
		public System.Data.Linq.Table<ContactChannel> ContactChannels
		{
			get
			{
				return this.GetTable<ContactChannel>();
			}
		}
		
		public System.Data.Linq.Table<Effect> Effects
		{
			get
			{
				return this.GetTable<Effect>();
			}
		}
		
		public System.Data.Linq.Table<ActorRef> ActorRefs
		{
			get
			{
				return this.GetTable<ActorRef>();
			}
		}
		
		public System.Data.Linq.Table<PersonState> PersonStates
		{
			get
			{
				return this.GetTable<PersonState>();
			}
		}
		
		public System.Data.Linq.Table<CivilStatusCodeType> CivilStatusCodeTypes
		{
			get
			{
				return this.GetTable<CivilStatusCodeType>();
			}
		}
		
		public System.Data.Linq.Table<LifeStatusCodeType> LifeStatusCodeTypes
		{
			get
			{
				return this.GetTable<LifeStatusCodeType>();
			}
		}
		
		public System.Data.Linq.Table<PersonLifeState> PersonLifeStates
		{
			get
			{
				return this.GetTable<PersonLifeState>();
			}
		}
		
		public System.Data.Linq.Table<PersonCivilState> PersonCivilStates
		{
			get
			{
				return this.GetTable<PersonCivilState>();
			}
		}
		
		public System.Data.Linq.Table<AddressPoint> AddressPoints
		{
			get
			{
				return this.GetTable<AddressPoint>();
			}
		}
		
		public System.Data.Linq.Table<GeographicCoorditaneTuple> GeographicCoorditaneTuples
		{
			get
			{
				return this.GetTable<GeographicCoorditaneTuple>();
			}
		}
		
		public System.Data.Linq.Table<GeographicPointLocation> GeographicPointLocations
		{
			get
			{
				return this.GetTable<GeographicPointLocation>();
			}
		}
		
		public System.Data.Linq.Table<CountryRef> CountryRefs
		{
			get
			{
				return this.GetTable<CountryRef>();
			}
		}
		
		public System.Data.Linq.Table<ForeignAddress> ForeignAddresses
		{
			get
			{
				return this.GetTable<ForeignAddress>();
			}
		}
		
		public System.Data.Linq.Table<DenmarkAddress> DenmarkAddresses
		{
			get
			{
				return this.GetTable<DenmarkAddress>();
			}
		}
		
		public System.Data.Linq.Table<CountrySchemeType> CountrySchemeTypes
		{
			get
			{
				return this.GetTable<CountrySchemeType>();
			}
		}
		
		public System.Data.Linq.Table<AddressPointStatus> AddressPointStatus
		{
			get
			{
				return this.GetTable<AddressPointStatus>();
			}
		}
		
		public System.Data.Linq.Table<AddressCoordinateQualityType> AddressCoordinateQualityTypes
		{
			get
			{
				return this.GetTable<AddressCoordinateQualityType>();
			}
		}
		
		public System.Data.Linq.Table<PersonRegistration> PersonRegistrations
		{
			get
			{
				return this.GetTable<PersonRegistration>();
			}
		}
		
		public System.Data.Linq.Table<PersonAttributes> PersonAttributes
		{
			get
			{
				return this.GetTable<PersonAttributes>();
			}
		}
		
		public System.Data.Linq.Table<CprData> CprDatas
		{
			get
			{
				return this.GetTable<CprData>();
			}
		}
		
		public System.Data.Linq.Table<ForeignCitizenCountry> ForeignCitizenCountries
		{
			get
			{
				return this.GetTable<ForeignCitizenCountry>();
			}
		}
		
		public System.Data.Linq.Table<ForeignCitizenData> ForeignCitizenDatas
		{
			get
			{
				return this.GetTable<ForeignCitizenData>();
			}
		}
		
		public System.Data.Linq.Table<UnknownCitizenData> UnknownCitizenDatas
		{
			get
			{
				return this.GetTable<UnknownCitizenData>();
			}
		}
		
		public System.Data.Linq.Table<HealthInformation> HealthInformations
		{
			get
			{
				return this.GetTable<HealthInformation>();
			}
		}
		
		public System.Data.Linq.Table<PersonName> PersonNames
		{
			get
			{
				return this.GetTable<PersonName>();
			}
		}
		
		public System.Data.Linq.Table<PersonProperties> PersonProperties
		{
			get
			{
				return this.GetTable<PersonProperties>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonMapping")]
	public partial class PersonMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UUID;
		
		private string _CprNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUUIDChanging(System.Guid value);
    partial void OnUUIDChanged();
    partial void OnCprNumberChanging(string value);
    partial void OnCprNumberChanged();
    #endregion
		
		public PersonMapping()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UUID
		{
			get
			{
				return this._UUID;
			}
			set
			{
				if ((this._UUID != value))
				{
					this.OnUUIDChanging(value);
					this.SendPropertyChanging();
					this._UUID = value;
					this.SendPropertyChanged("UUID");
					this.OnUUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CprNumber", DbType="VarChar(10)", CanBeNull=false)]
		public string CprNumber
		{
			get
			{
				return this._CprNumber;
			}
			set
			{
				if ((this._CprNumber != value))
				{
					this.OnCprNumberChanging(value);
					this.SendPropertyChanging();
					this._CprNumber = value;
					this.SendPropertyChanged("CprNumber");
					this.OnCprNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenderId;
		
		private string _GenderName;
		
		private EntitySet<PersonProperties> _PersonProperties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIdChanging(int value);
    partial void OnGenderIdChanged();
    partial void OnGenderNameChanging(string value);
    partial void OnGenderNameChanged();
    #endregion
		
		public Gender()
		{
			this._PersonProperties = new EntitySet<PersonProperties>(new Action<PersonProperties>(this.attach_PersonProperties), new Action<PersonProperties>(this.detach_PersonProperties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GenderName
		{
			get
			{
				return this._GenderName;
			}
			set
			{
				if ((this._GenderName != value))
				{
					this.OnGenderNameChanging(value);
					this.SendPropertyChanging();
					this._GenderName = value;
					this.SendPropertyChanged("GenderName");
					this.OnGenderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_PersonProperties", Storage="_PersonProperties", ThisKey="GenderId", OtherKey="GenderId")]
		public EntitySet<PersonProperties> PersonProperties
		{
			get
			{
				return this._PersonProperties;
			}
			set
			{
				this._PersonProperties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonProperties(PersonProperties entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_PersonProperties(PersonProperties entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelationshipType")]
	public partial class RelationshipType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationshipTypeId;
		
		private string _ForwardName;
		
		private EntitySet<PersonRelationship> _PersonRelationships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipTypeIdChanging(int value);
    partial void OnRelationshipTypeIdChanged();
    partial void OnForwardNameChanging(string value);
    partial void OnForwardNameChanged();
    #endregion
		
		public RelationshipType()
		{
			this._PersonRelationships = new EntitySet<PersonRelationship>(new Action<PersonRelationship>(this.attach_PersonRelationships), new Action<PersonRelationship>(this.detach_PersonRelationships));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RelationshipTypeId
		{
			get
			{
				return this._RelationshipTypeId;
			}
			set
			{
				if ((this._RelationshipTypeId != value))
				{
					this.OnRelationshipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeId = value;
					this.SendPropertyChanged("RelationshipTypeId");
					this.OnRelationshipTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForwardName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ForwardName
		{
			get
			{
				return this._ForwardName;
			}
			set
			{
				if ((this._ForwardName != value))
				{
					this.OnForwardNameChanging(value);
					this.SendPropertyChanging();
					this._ForwardName = value;
					this.SendPropertyChanged("ForwardName");
					this.OnForwardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationshipType_PersonRelationship", Storage="_PersonRelationships", ThisKey="RelationshipTypeId", OtherKey="RelationshipTypeId")]
		public EntitySet<PersonRelationship> PersonRelationships
		{
			get
			{
				return this._PersonRelationships;
			}
			set
			{
				this._PersonRelationships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonRelationships(PersonRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = this;
		}
		
		private void detach_PersonRelationships(PersonRelationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonRelationship")]
	public partial class PersonRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonRelationshipId;
		
		private System.Guid _PersonRegistrationId;
		
		private System.Guid _RelatedPersonUuid;
		
		private int _RelationshipTypeId;
		
		private string _CommentText;
		
		private System.Nullable<System.Guid> _EffectId;
		
		private EntityRef<RelationshipType> _RelationshipType;
		
		private EntityRef<Effect> _Effect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonRelationshipIdChanging(System.Guid value);
    partial void OnPersonRelationshipIdChanged();
    partial void OnPersonRegistrationIdChanging(System.Guid value);
    partial void OnPersonRegistrationIdChanged();
    partial void OnRelatedPersonUuidChanging(System.Guid value);
    partial void OnRelatedPersonUuidChanged();
    partial void OnRelationshipTypeIdChanging(int value);
    partial void OnRelationshipTypeIdChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnEffectIdChanging(System.Nullable<System.Guid> value);
    partial void OnEffectIdChanged();
    #endregion
		
		public PersonRelationship()
		{
			this._RelationshipType = default(EntityRef<RelationshipType>);
			this._Effect = default(EntityRef<Effect>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonRelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonRelationshipId
		{
			get
			{
				return this._PersonRelationshipId;
			}
			set
			{
				if ((this._PersonRelationshipId != value))
				{
					this.OnPersonRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._PersonRelationshipId = value;
					this.SendPropertyChanged("PersonRelationshipId");
					this.OnPersonRelationshipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonRegistrationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonRegistrationId
		{
			get
			{
				return this._PersonRegistrationId;
			}
			set
			{
				if ((this._PersonRegistrationId != value))
				{
					this.OnPersonRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._PersonRegistrationId = value;
					this.SendPropertyChanged("PersonRegistrationId");
					this.OnPersonRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedPersonUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RelatedPersonUuid
		{
			get
			{
				return this._RelatedPersonUuid;
			}
			set
			{
				if ((this._RelatedPersonUuid != value))
				{
					this.OnRelatedPersonUuidChanging(value);
					this.SendPropertyChanging();
					this._RelatedPersonUuid = value;
					this.SendPropertyChanged("RelatedPersonUuid");
					this.OnRelatedPersonUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipTypeId", DbType="Int NOT NULL")]
		public int RelationshipTypeId
		{
			get
			{
				return this._RelationshipTypeId;
			}
			set
			{
				if ((this._RelationshipTypeId != value))
				{
					if (this._RelationshipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeId = value;
					this.SendPropertyChanged("RelationshipTypeId");
					this.OnRelationshipTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="VarChar(50)")]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EffectId
		{
			get
			{
				return this._EffectId;
			}
			set
			{
				if ((this._EffectId != value))
				{
					if (this._Effect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEffectIdChanging(value);
					this.SendPropertyChanging();
					this._EffectId = value;
					this.SendPropertyChanged("EffectId");
					this.OnEffectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelationshipType_PersonRelationship", Storage="_RelationshipType", ThisKey="RelationshipTypeId", OtherKey="RelationshipTypeId", IsForeignKey=true)]
		public RelationshipType RelationshipType
		{
			get
			{
				return this._RelationshipType.Entity;
			}
			set
			{
				RelationshipType previousValue = this._RelationshipType.Entity;
				if (((previousValue != value) 
							|| (this._RelationshipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelationshipType.Entity = null;
						previousValue.PersonRelationships.Remove(this);
					}
					this._RelationshipType.Entity = value;
					if ((value != null))
					{
						value.PersonRelationships.Add(this);
						this._RelationshipTypeId = value.RelationshipTypeId;
					}
					else
					{
						this._RelationshipTypeId = default(int);
					}
					this.SendPropertyChanged("RelationshipType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effect_PersonRelationship", Storage="_Effect", ThisKey="EffectId", OtherKey="EffectId", IsForeignKey=true)]
		public Effect Effect
		{
			get
			{
				return this._Effect.Entity;
			}
			set
			{
				Effect previousValue = this._Effect.Entity;
				if (((previousValue != value) 
							|| (this._Effect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Effect.Entity = null;
						previousValue.PersonRelationships.Remove(this);
					}
					this._Effect.Entity = value;
					if ((value != null))
					{
						value.PersonRelationships.Add(this);
						this._EffectId = value.EffectId;
					}
					else
					{
						this._EffectId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Effect");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LifecycleStatus")]
	public partial class LifecycleStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LifecycleStatusId;
		
		private string _LifecycleStatusName;
		
		private EntitySet<PersonRegistration> _PersonRegistrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLifecycleStatusIdChanging(int value);
    partial void OnLifecycleStatusIdChanged();
    partial void OnLifecycleStatusNameChanging(string value);
    partial void OnLifecycleStatusNameChanged();
    #endregion
		
		public LifecycleStatus()
		{
			this._PersonRegistrations = new EntitySet<PersonRegistration>(new Action<PersonRegistration>(this.attach_PersonRegistrations), new Action<PersonRegistration>(this.detach_PersonRegistrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifecycleStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LifecycleStatusId
		{
			get
			{
				return this._LifecycleStatusId;
			}
			set
			{
				if ((this._LifecycleStatusId != value))
				{
					this.OnLifecycleStatusIdChanging(value);
					this.SendPropertyChanging();
					this._LifecycleStatusId = value;
					this.SendPropertyChanged("LifecycleStatusId");
					this.OnLifecycleStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifecycleStatusName", DbType="VarChar(50)")]
		public string LifecycleStatusName
		{
			get
			{
				return this._LifecycleStatusName;
			}
			set
			{
				if ((this._LifecycleStatusName != value))
				{
					this.OnLifecycleStatusNameChanging(value);
					this.SendPropertyChanging();
					this._LifecycleStatusName = value;
					this.SendPropertyChanged("LifecycleStatusName");
					this.OnLifecycleStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LifecycleStatus_PersonRegistration", Storage="_PersonRegistrations", ThisKey="LifecycleStatusId", OtherKey="LifecycleStatusId")]
		public EntitySet<PersonRegistration> PersonRegistrations
		{
			get
			{
				return this._PersonRegistrations;
			}
			set
			{
				this._PersonRegistrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.LifecycleStatus = this;
		}
		
		private void detach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.LifecycleStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UUID;
		
		private string _UserInterfaceKeyText;
		
		private EntitySet<PersonRegistration> _PersonRegistrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUUIDChanging(System.Guid value);
    partial void OnUUIDChanged();
    partial void OnUserInterfaceKeyTextChanging(string value);
    partial void OnUserInterfaceKeyTextChanged();
    #endregion
		
		public Person()
		{
			this._PersonRegistrations = new EntitySet<PersonRegistration>(new Action<PersonRegistration>(this.attach_PersonRegistrations), new Action<PersonRegistration>(this.detach_PersonRegistrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UUID
		{
			get
			{
				return this._UUID;
			}
			set
			{
				if ((this._UUID != value))
				{
					this.OnUUIDChanging(value);
					this.SendPropertyChanging();
					this._UUID = value;
					this.SendPropertyChanged("UUID");
					this.OnUUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInterfaceKeyText", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserInterfaceKeyText
		{
			get
			{
				return this._UserInterfaceKeyText;
			}
			set
			{
				if ((this._UserInterfaceKeyText != value))
				{
					this.OnUserInterfaceKeyTextChanging(value);
					this.SendPropertyChanging();
					this._UserInterfaceKeyText = value;
					this.SendPropertyChanged("UserInterfaceKeyText");
					this.OnUserInterfaceKeyTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRegistration", Storage="_PersonRegistrations", ThisKey="UUID", OtherKey="UUID")]
		public EntitySet<PersonRegistration> PersonRegistrations
		{
			get
			{
				return this._PersonRegistrations;
			}
			set
			{
				this._PersonRegistrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private string _Note;
		
		private bool _IsUnknown;
		
		private EntityRef<ForeignAddress> _ForeignAddress;
		
		private EntityRef<DenmarkAddress> _DenmarkAddress;
		
		private EntitySet<CprData> _CprDatas;
		
		private EntitySet<PersonProperties> _PersonProperties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnIsUnknownChanging(bool value);
    partial void OnIsUnknownChanged();
    #endregion
		
		public Address()
		{
			this._ForeignAddress = default(EntityRef<ForeignAddress>);
			this._DenmarkAddress = default(EntityRef<DenmarkAddress>);
			this._CprDatas = new EntitySet<CprData>(new Action<CprData>(this.attach_CprDatas), new Action<CprData>(this.detach_CprDatas));
			this._PersonProperties = new EntitySet<PersonProperties>(new Action<PersonProperties>(this.attach_PersonProperties), new Action<PersonProperties>(this.detach_PersonProperties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUnknown", DbType="Bit NOT NULL")]
		public bool IsUnknown
		{
			get
			{
				return this._IsUnknown;
			}
			set
			{
				if ((this._IsUnknown != value))
				{
					this.OnIsUnknownChanging(value);
					this.SendPropertyChanging();
					this._IsUnknown = value;
					this.SendPropertyChanged("IsUnknown");
					this.OnIsUnknownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_ForeignAddress", Storage="_ForeignAddress", ThisKey="AddressId", OtherKey="AddressId", IsUnique=true, IsForeignKey=false)]
		public ForeignAddress ForeignAddress
		{
			get
			{
				return this._ForeignAddress.Entity;
			}
			set
			{
				ForeignAddress previousValue = this._ForeignAddress.Entity;
				if (((previousValue != value) 
							|| (this._ForeignAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForeignAddress.Entity = null;
						previousValue.Address = null;
					}
					this._ForeignAddress.Entity = value;
					if ((value != null))
					{
						value.Address = this;
					}
					this.SendPropertyChanged("ForeignAddress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_DenmarkAddress", Storage="_DenmarkAddress", ThisKey="AddressId", OtherKey="AddressId", IsUnique=true, IsForeignKey=false)]
		public DenmarkAddress DenmarkAddress
		{
			get
			{
				return this._DenmarkAddress.Entity;
			}
			set
			{
				DenmarkAddress previousValue = this._DenmarkAddress.Entity;
				if (((previousValue != value) 
							|| (this._DenmarkAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DenmarkAddress.Entity = null;
						previousValue.Address = null;
					}
					this._DenmarkAddress.Entity = value;
					if ((value != null))
					{
						value.Address = this;
					}
					this.SendPropertyChanged("DenmarkAddress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_CprData", Storage="_CprDatas", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<CprData> CprDatas
		{
			get
			{
				return this._CprDatas;
			}
			set
			{
				this._CprDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_PersonProperties", Storage="_PersonProperties", ThisKey="AddressId", OtherKey="OtherAddressId")]
		public EntitySet<PersonProperties> PersonProperties
		{
			get
			{
				return this._PersonProperties;
			}
			set
			{
				this._PersonProperties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CprDatas(CprData entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_CprDatas(CprData entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_PersonProperties(PersonProperties entity)
		{
			this.SendPropertyChanging();
			entity.OtherAddress = this;
		}
		
		private void detach_PersonProperties(PersonProperties entity)
		{
			this.SendPropertyChanging();
			entity.OtherAddress = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DanishAddress")]
	public partial class DanishAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private System.Nullable<System.Guid> _AddressPointId;
		
		private string _SocialDistrict;
		
		private string _SchoolDistrict;
		
		private string _PostDistrict;
		
		private string _ParishDistrict;
		
		private string _ConstituencyDistrict;
		
		private string _PoliceDistrict;
		
		private string _PostOfficeBoxIdentifier;
		
		private EntityRef<AddressPoint> _AddressPoint;
		
		private EntityRef<DenmarkAddress> _DenmarkAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnAddressPointIdChanging(System.Nullable<System.Guid> value);
    partial void OnAddressPointIdChanged();
    partial void OnSocialDistrictChanging(string value);
    partial void OnSocialDistrictChanged();
    partial void OnSchoolDistrictChanging(string value);
    partial void OnSchoolDistrictChanged();
    partial void OnPostDistrictChanging(string value);
    partial void OnPostDistrictChanged();
    partial void OnParishDistrictChanging(string value);
    partial void OnParishDistrictChanged();
    partial void OnConstituencyDistrictChanging(string value);
    partial void OnConstituencyDistrictChanged();
    partial void OnPoliceDistrictChanging(string value);
    partial void OnPoliceDistrictChanged();
    partial void OnPostOfficeBoxIdentifierChanging(string value);
    partial void OnPostOfficeBoxIdentifierChanged();
    #endregion
		
		public DanishAddress()
		{
			this._AddressPoint = default(EntityRef<AddressPoint>);
			this._DenmarkAddress = default(EntityRef<DenmarkAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._DenmarkAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressPointId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AddressPointId
		{
			get
			{
				return this._AddressPointId;
			}
			set
			{
				if ((this._AddressPointId != value))
				{
					this.OnAddressPointIdChanging(value);
					this.SendPropertyChanging();
					this._AddressPointId = value;
					this.SendPropertyChanged("AddressPointId");
					this.OnAddressPointIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialDistrict", DbType="VarChar(50)")]
		public string SocialDistrict
		{
			get
			{
				return this._SocialDistrict;
			}
			set
			{
				if ((this._SocialDistrict != value))
				{
					this.OnSocialDistrictChanging(value);
					this.SendPropertyChanging();
					this._SocialDistrict = value;
					this.SendPropertyChanged("SocialDistrict");
					this.OnSocialDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolDistrict", DbType="VarChar(50)")]
		public string SchoolDistrict
		{
			get
			{
				return this._SchoolDistrict;
			}
			set
			{
				if ((this._SchoolDistrict != value))
				{
					this.OnSchoolDistrictChanging(value);
					this.SendPropertyChanging();
					this._SchoolDistrict = value;
					this.SendPropertyChanged("SchoolDistrict");
					this.OnSchoolDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDistrict", DbType="VarChar(50)")]
		public string PostDistrict
		{
			get
			{
				return this._PostDistrict;
			}
			set
			{
				if ((this._PostDistrict != value))
				{
					this.OnPostDistrictChanging(value);
					this.SendPropertyChanging();
					this._PostDistrict = value;
					this.SendPropertyChanged("PostDistrict");
					this.OnPostDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParishDistrict", DbType="VarChar(50)")]
		public string ParishDistrict
		{
			get
			{
				return this._ParishDistrict;
			}
			set
			{
				if ((this._ParishDistrict != value))
				{
					this.OnParishDistrictChanging(value);
					this.SendPropertyChanging();
					this._ParishDistrict = value;
					this.SendPropertyChanged("ParishDistrict");
					this.OnParishDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConstituencyDistrict", DbType="VarChar(50)")]
		public string ConstituencyDistrict
		{
			get
			{
				return this._ConstituencyDistrict;
			}
			set
			{
				if ((this._ConstituencyDistrict != value))
				{
					this.OnConstituencyDistrictChanging(value);
					this.SendPropertyChanging();
					this._ConstituencyDistrict = value;
					this.SendPropertyChanged("ConstituencyDistrict");
					this.OnConstituencyDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoliceDistrict", DbType="VarChar(50)")]
		public string PoliceDistrict
		{
			get
			{
				return this._PoliceDistrict;
			}
			set
			{
				if ((this._PoliceDistrict != value))
				{
					this.OnPoliceDistrictChanging(value);
					this.SendPropertyChanging();
					this._PoliceDistrict = value;
					this.SendPropertyChanged("PoliceDistrict");
					this.OnPoliceDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostOfficeBoxIdentifier", DbType="VarChar(50)")]
		public string PostOfficeBoxIdentifier
		{
			get
			{
				return this._PostOfficeBoxIdentifier;
			}
			set
			{
				if ((this._PostOfficeBoxIdentifier != value))
				{
					this.OnPostOfficeBoxIdentifierChanging(value);
					this.SendPropertyChanging();
					this._PostOfficeBoxIdentifier = value;
					this.SendPropertyChanged("PostOfficeBoxIdentifier");
					this.OnPostOfficeBoxIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DanishAddress_AddressPoint", Storage="_AddressPoint", ThisKey="AddressId", OtherKey="AddressId", IsUnique=true, IsForeignKey=false)]
		public AddressPoint AddressPoint
		{
			get
			{
				return this._AddressPoint.Entity;
			}
			set
			{
				AddressPoint previousValue = this._AddressPoint.Entity;
				if (((previousValue != value) 
							|| (this._AddressPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressPoint.Entity = null;
						previousValue.DanishAddress = null;
					}
					this._AddressPoint.Entity = value;
					if ((value != null))
					{
						value.DanishAddress = this;
					}
					this.SendPropertyChanged("AddressPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DenmarkAddress_DanishAddress", Storage="_DenmarkAddress", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DenmarkAddress DenmarkAddress
		{
			get
			{
				return this._DenmarkAddress.Entity;
			}
			set
			{
				DenmarkAddress previousValue = this._DenmarkAddress.Entity;
				if (((previousValue != value) 
							|| (this._DenmarkAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DenmarkAddress.Entity = null;
						previousValue.DanishAddress = null;
					}
					this._DenmarkAddress.Entity = value;
					if ((value != null))
					{
						value.DanishAddress = this;
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(System.Guid);
					}
					this.SendPropertyChanged("DenmarkAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GreenlandicAddress")]
	public partial class GreenlandicAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private string _GreenlandBuildingIdentifierField;
		
		private EntityRef<DenmarkAddress> _DenmarkAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnGreenlandBuildingIdentifierFieldChanging(string value);
    partial void OnGreenlandBuildingIdentifierFieldChanged();
    #endregion
		
		public GreenlandicAddress()
		{
			this._DenmarkAddress = default(EntityRef<DenmarkAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._DenmarkAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GreenlandBuildingIdentifierField", DbType="VarChar(4)")]
		public string GreenlandBuildingIdentifierField
		{
			get
			{
				return this._GreenlandBuildingIdentifierField;
			}
			set
			{
				if ((this._GreenlandBuildingIdentifierField != value))
				{
					this.OnGreenlandBuildingIdentifierFieldChanging(value);
					this.SendPropertyChanging();
					this._GreenlandBuildingIdentifierField = value;
					this.SendPropertyChanged("GreenlandBuildingIdentifierField");
					this.OnGreenlandBuildingIdentifierFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DenmarkAddress_GreenlandicAddress", Storage="_DenmarkAddress", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DenmarkAddress DenmarkAddress
		{
			get
			{
				return this._DenmarkAddress.Entity;
			}
			set
			{
				DenmarkAddress previousValue = this._DenmarkAddress.Entity;
				if (((previousValue != value) 
							|| (this._DenmarkAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DenmarkAddress.Entity = null;
						previousValue.GreenlandicAddress = null;
					}
					this._DenmarkAddress.Entity = value;
					if ((value != null))
					{
						value.GreenlandicAddress = this;
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(System.Guid);
					}
					this.SendPropertyChanged("DenmarkAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactChannelType")]
	public partial class ContactChannelType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactChannelTypeId;
		
		private string _Name;
		
		private EntitySet<ContactChannel> _ContactChannels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactChannelTypeIdChanging(int value);
    partial void OnContactChannelTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ContactChannelType()
		{
			this._ContactChannels = new EntitySet<ContactChannel>(new Action<ContactChannel>(this.attach_ContactChannels), new Action<ContactChannel>(this.detach_ContactChannels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactChannelTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContactChannelTypeId
		{
			get
			{
				return this._ContactChannelTypeId;
			}
			set
			{
				if ((this._ContactChannelTypeId != value))
				{
					this.OnContactChannelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContactChannelTypeId = value;
					this.SendPropertyChanged("ContactChannelTypeId");
					this.OnContactChannelTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactChannelType_ContactChannel", Storage="_ContactChannels", ThisKey="ContactChannelTypeId", OtherKey="ContactChannelTypeId")]
		public EntitySet<ContactChannel> ContactChannels
		{
			get
			{
				return this._ContactChannels;
			}
			set
			{
				this._ContactChannels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactChannels(ContactChannel entity)
		{
			this.SendPropertyChanging();
			entity.ContactChannelType = this;
		}
		
		private void detach_ContactChannels(ContactChannel entity)
		{
			this.SendPropertyChanging();
			entity.ContactChannelType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactChannel")]
	public partial class ContactChannel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContactChannelId;
		
		private int _ContactChannelTypeId;
		
		private string _UsageLimits;
		
		private string _Value;
		
		private System.Nullable<bool> _CanSendSms;
		
		private string _Note;
		
		private string _OtherNote;
		
		private EntitySet<PersonProperties> _PersonProperties;
		
		private EntitySet<PersonProperties> _PersonProperties1;
		
		private EntityRef<ContactChannelType> _ContactChannelType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactChannelIdChanging(System.Guid value);
    partial void OnContactChannelIdChanged();
    partial void OnContactChannelTypeIdChanging(int value);
    partial void OnContactChannelTypeIdChanged();
    partial void OnUsageLimitsChanging(string value);
    partial void OnUsageLimitsChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCanSendSmsChanging(System.Nullable<bool> value);
    partial void OnCanSendSmsChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnOtherNoteChanging(string value);
    partial void OnOtherNoteChanged();
    #endregion
		
		public ContactChannel()
		{
			this._PersonProperties = new EntitySet<PersonProperties>(new Action<PersonProperties>(this.attach_PersonProperties), new Action<PersonProperties>(this.detach_PersonProperties));
			this._PersonProperties1 = new EntitySet<PersonProperties>(new Action<PersonProperties>(this.attach_PersonProperties1), new Action<PersonProperties>(this.detach_PersonProperties1));
			this._ContactChannelType = default(EntityRef<ContactChannelType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactChannelId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContactChannelId
		{
			get
			{
				return this._ContactChannelId;
			}
			set
			{
				if ((this._ContactChannelId != value))
				{
					this.OnContactChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ContactChannelId = value;
					this.SendPropertyChanged("ContactChannelId");
					this.OnContactChannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactChannelTypeId", DbType="Int NOT NULL")]
		public int ContactChannelTypeId
		{
			get
			{
				return this._ContactChannelTypeId;
			}
			set
			{
				if ((this._ContactChannelTypeId != value))
				{
					if (this._ContactChannelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactChannelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContactChannelTypeId = value;
					this.SendPropertyChanged("ContactChannelTypeId");
					this.OnContactChannelTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsageLimits", DbType="VarChar(50)")]
		public string UsageLimits
		{
			get
			{
				return this._UsageLimits;
			}
			set
			{
				if ((this._UsageLimits != value))
				{
					this.OnUsageLimitsChanging(value);
					this.SendPropertyChanging();
					this._UsageLimits = value;
					this.SendPropertyChanged("UsageLimits");
					this.OnUsageLimitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanSendSms", DbType="Bit")]
		public System.Nullable<bool> CanSendSms
		{
			get
			{
				return this._CanSendSms;
			}
			set
			{
				if ((this._CanSendSms != value))
				{
					this.OnCanSendSmsChanging(value);
					this.SendPropertyChanging();
					this._CanSendSms = value;
					this.SendPropertyChanged("CanSendSms");
					this.OnCanSendSmsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherNote", DbType="VarChar(50)")]
		public string OtherNote
		{
			get
			{
				return this._OtherNote;
			}
			set
			{
				if ((this._OtherNote != value))
				{
					this.OnOtherNoteChanging(value);
					this.SendPropertyChanging();
					this._OtherNote = value;
					this.SendPropertyChanged("OtherNote");
					this.OnOtherNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactChannel_PersonProperties", Storage="_PersonProperties", ThisKey="ContactChannelId", OtherKey="ContactChannelId")]
		public EntitySet<PersonProperties> PersonProperties
		{
			get
			{
				return this._PersonProperties;
			}
			set
			{
				this._PersonProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactChannel_PersonProperties1", Storage="_PersonProperties1", ThisKey="ContactChannelId", OtherKey="NextOfKinContactChannelId")]
		public EntitySet<PersonProperties> PersonProperties1
		{
			get
			{
				return this._PersonProperties1;
			}
			set
			{
				this._PersonProperties1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactChannelType_ContactChannel", Storage="_ContactChannelType", ThisKey="ContactChannelTypeId", OtherKey="ContactChannelTypeId", IsForeignKey=true)]
		public ContactChannelType ContactChannelType
		{
			get
			{
				return this._ContactChannelType.Entity;
			}
			set
			{
				ContactChannelType previousValue = this._ContactChannelType.Entity;
				if (((previousValue != value) 
							|| (this._ContactChannelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactChannelType.Entity = null;
						previousValue.ContactChannels.Remove(this);
					}
					this._ContactChannelType.Entity = value;
					if ((value != null))
					{
						value.ContactChannels.Add(this);
						this._ContactChannelTypeId = value.ContactChannelTypeId;
					}
					else
					{
						this._ContactChannelTypeId = default(int);
					}
					this.SendPropertyChanged("ContactChannelType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonProperties(PersonProperties entity)
		{
			this.SendPropertyChanging();
			entity.ContactChannel = this;
		}
		
		private void detach_PersonProperties(PersonProperties entity)
		{
			this.SendPropertyChanging();
			entity.ContactChannel = null;
		}
		
		private void attach_PersonProperties1(PersonProperties entity)
		{
			this.SendPropertyChanging();
			entity.NextOfKinContactChannel = this;
		}
		
		private void detach_PersonProperties1(PersonProperties entity)
		{
			this.SendPropertyChanging();
			entity.NextOfKinContactChannel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Effect")]
	public partial class Effect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EffectId;
		
		private System.Nullable<System.Guid> _ActorRefId;
		
		private string _CommentText;
		
		private System.Nullable<System.DateTime> _FromDate;
		
		private System.Nullable<System.DateTime> _ToDate;
		
		private EntitySet<PersonRelationship> _PersonRelationships;
		
		private EntitySet<PersonLifeState> _PersonLifeStates;
		
		private EntitySet<PersonCivilState> _PersonCivilStates;
		
		private EntitySet<PersonAttributes> _PersonAttributes;
		
		private EntityRef<ActorRef> _ActorRef;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEffectIdChanging(System.Guid value);
    partial void OnEffectIdChanged();
    partial void OnActorRefIdChanging(System.Nullable<System.Guid> value);
    partial void OnActorRefIdChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnFromDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.Nullable<System.DateTime> value);
    partial void OnToDateChanged();
    #endregion
		
		public Effect()
		{
			this._PersonRelationships = new EntitySet<PersonRelationship>(new Action<PersonRelationship>(this.attach_PersonRelationships), new Action<PersonRelationship>(this.detach_PersonRelationships));
			this._PersonLifeStates = new EntitySet<PersonLifeState>(new Action<PersonLifeState>(this.attach_PersonLifeStates), new Action<PersonLifeState>(this.detach_PersonLifeStates));
			this._PersonCivilStates = new EntitySet<PersonCivilState>(new Action<PersonCivilState>(this.attach_PersonCivilStates), new Action<PersonCivilState>(this.detach_PersonCivilStates));
			this._PersonAttributes = new EntitySet<PersonAttributes>(new Action<PersonAttributes>(this.attach_PersonAttributes), new Action<PersonAttributes>(this.detach_PersonAttributes));
			this._ActorRef = default(EntityRef<ActorRef>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EffectId
		{
			get
			{
				return this._EffectId;
			}
			set
			{
				if ((this._EffectId != value))
				{
					this.OnEffectIdChanging(value);
					this.SendPropertyChanging();
					this._EffectId = value;
					this.SendPropertyChanged("EffectId");
					this.OnEffectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorRefId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ActorRefId
		{
			get
			{
				return this._ActorRefId;
			}
			set
			{
				if ((this._ActorRefId != value))
				{
					if (this._ActorRef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorRefIdChanging(value);
					this.SendPropertyChanging();
					this._ActorRefId = value;
					this.SendPropertyChanged("ActorRefId");
					this.OnActorRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="VarChar(50)")]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effect_PersonRelationship", Storage="_PersonRelationships", ThisKey="EffectId", OtherKey="EffectId")]
		public EntitySet<PersonRelationship> PersonRelationships
		{
			get
			{
				return this._PersonRelationships;
			}
			set
			{
				this._PersonRelationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effect_PersonLifeState", Storage="_PersonLifeStates", ThisKey="EffectId", OtherKey="EffectId")]
		public EntitySet<PersonLifeState> PersonLifeStates
		{
			get
			{
				return this._PersonLifeStates;
			}
			set
			{
				this._PersonLifeStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effect_PersonCivilState", Storage="_PersonCivilStates", ThisKey="EffectId", OtherKey="EffectId")]
		public EntitySet<PersonCivilState> PersonCivilStates
		{
			get
			{
				return this._PersonCivilStates;
			}
			set
			{
				this._PersonCivilStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effect_PersonAttributes", Storage="_PersonAttributes", ThisKey="EffectId", OtherKey="EffectId")]
		public EntitySet<PersonAttributes> PersonAttributes
		{
			get
			{
				return this._PersonAttributes;
			}
			set
			{
				this._PersonAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActorRef_Effect", Storage="_ActorRef", ThisKey="ActorRefId", OtherKey="ActorRefId", IsForeignKey=true)]
		public ActorRef ActorRef
		{
			get
			{
				return this._ActorRef.Entity;
			}
			set
			{
				ActorRef previousValue = this._ActorRef.Entity;
				if (((previousValue != value) 
							|| (this._ActorRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActorRef.Entity = null;
						previousValue.Effects.Remove(this);
					}
					this._ActorRef.Entity = value;
					if ((value != null))
					{
						value.Effects.Add(this);
						this._ActorRefId = value.ActorRefId;
					}
					else
					{
						this._ActorRefId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ActorRef");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonRelationships(PersonRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Effect = this;
		}
		
		private void detach_PersonRelationships(PersonRelationship entity)
		{
			this.SendPropertyChanging();
			entity.Effect = null;
		}
		
		private void attach_PersonLifeStates(PersonLifeState entity)
		{
			this.SendPropertyChanging();
			entity.Effect = this;
		}
		
		private void detach_PersonLifeStates(PersonLifeState entity)
		{
			this.SendPropertyChanging();
			entity.Effect = null;
		}
		
		private void attach_PersonCivilStates(PersonCivilState entity)
		{
			this.SendPropertyChanging();
			entity.Effect = this;
		}
		
		private void detach_PersonCivilStates(PersonCivilState entity)
		{
			this.SendPropertyChanging();
			entity.Effect = null;
		}
		
		private void attach_PersonAttributes(PersonAttributes entity)
		{
			this.SendPropertyChanging();
			entity.Effect = this;
		}
		
		private void detach_PersonAttributes(PersonAttributes entity)
		{
			this.SendPropertyChanging();
			entity.Effect = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActorRef")]
	public partial class ActorRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActorRefId;
		
		private int _Type;
		
		private string _Value;
		
		private EntitySet<Effect> _Effects;
		
		private EntitySet<PersonRegistration> _PersonRegistrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorRefIdChanging(System.Guid value);
    partial void OnActorRefIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ActorRef()
		{
			this._Effects = new EntitySet<Effect>(new Action<Effect>(this.attach_Effects), new Action<Effect>(this.detach_Effects));
			this._PersonRegistrations = new EntitySet<PersonRegistration>(new Action<PersonRegistration>(this.attach_PersonRegistrations), new Action<PersonRegistration>(this.detach_PersonRegistrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorRefId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActorRefId
		{
			get
			{
				return this._ActorRefId;
			}
			set
			{
				if ((this._ActorRefId != value))
				{
					this.OnActorRefIdChanging(value);
					this.SendPropertyChanging();
					this._ActorRefId = value;
					this.SendPropertyChanged("ActorRefId");
					this.OnActorRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActorRef_Effect", Storage="_Effects", ThisKey="ActorRefId", OtherKey="ActorRefId")]
		public EntitySet<Effect> Effects
		{
			get
			{
				return this._Effects;
			}
			set
			{
				this._Effects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActorRef_PersonRegistration", Storage="_PersonRegistrations", ThisKey="ActorRefId", OtherKey="ActorRefId")]
		public EntitySet<PersonRegistration> PersonRegistrations
		{
			get
			{
				return this._PersonRegistrations;
			}
			set
			{
				this._PersonRegistrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Effects(Effect entity)
		{
			this.SendPropertyChanging();
			entity.ActorRef = this;
		}
		
		private void detach_Effects(Effect entity)
		{
			this.SendPropertyChanging();
			entity.ActorRef = null;
		}
		
		private void attach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.ActorRef = this;
		}
		
		private void detach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.ActorRef = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonState")]
	public partial class PersonState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonRegistrationId;
		
		private EntityRef<PersonLifeState> _PersonLifeState;
		
		private EntityRef<PersonCivilState> _PersonCivilState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonRegistrationIdChanging(System.Guid value);
    partial void OnPersonRegistrationIdChanged();
    #endregion
		
		public PersonState()
		{
			this._PersonLifeState = default(EntityRef<PersonLifeState>);
			this._PersonCivilState = default(EntityRef<PersonCivilState>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonRegistrationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonRegistrationId
		{
			get
			{
				return this._PersonRegistrationId;
			}
			set
			{
				if ((this._PersonRegistrationId != value))
				{
					this.OnPersonRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._PersonRegistrationId = value;
					this.SendPropertyChanged("PersonRegistrationId");
					this.OnPersonRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonState_PersonLifeState", Storage="_PersonLifeState", ThisKey="PersonRegistrationId", OtherKey="PersonRegistrationId", IsUnique=true, IsForeignKey=false)]
		public PersonLifeState PersonLifeState
		{
			get
			{
				return this._PersonLifeState.Entity;
			}
			set
			{
				PersonLifeState previousValue = this._PersonLifeState.Entity;
				if (((previousValue != value) 
							|| (this._PersonLifeState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonLifeState.Entity = null;
						previousValue.PersonState = null;
					}
					this._PersonLifeState.Entity = value;
					if ((value != null))
					{
						value.PersonState = this;
					}
					this.SendPropertyChanged("PersonLifeState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonState_PersonCivilState", Storage="_PersonCivilState", ThisKey="PersonRegistrationId", OtherKey="PersonRegistrationId", IsUnique=true, IsForeignKey=false)]
		public PersonCivilState PersonCivilState
		{
			get
			{
				return this._PersonCivilState.Entity;
			}
			set
			{
				PersonCivilState previousValue = this._PersonCivilState.Entity;
				if (((previousValue != value) 
							|| (this._PersonCivilState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonCivilState.Entity = null;
						previousValue.PersonState = null;
					}
					this._PersonCivilState.Entity = value;
					if ((value != null))
					{
						value.PersonState = this;
					}
					this.SendPropertyChanged("PersonCivilState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CivilStatusCodeType")]
	public partial class CivilStatusCodeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CivilStatusCodeTypeId;
		
		private string _Name;
		
		private EntitySet<PersonCivilState> _PersonCivilStates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCivilStatusCodeTypeIdChanging(int value);
    partial void OnCivilStatusCodeTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CivilStatusCodeType()
		{
			this._PersonCivilStates = new EntitySet<PersonCivilState>(new Action<PersonCivilState>(this.attach_PersonCivilStates), new Action<PersonCivilState>(this.detach_PersonCivilStates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CivilStatusCodeTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CivilStatusCodeTypeId
		{
			get
			{
				return this._CivilStatusCodeTypeId;
			}
			set
			{
				if ((this._CivilStatusCodeTypeId != value))
				{
					this.OnCivilStatusCodeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CivilStatusCodeTypeId = value;
					this.SendPropertyChanged("CivilStatusCodeTypeId");
					this.OnCivilStatusCodeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CivilStatusCodeType_PersonCivilState", Storage="_PersonCivilStates", ThisKey="CivilStatusCodeTypeId", OtherKey="CivilStatusCodeTypeId")]
		public EntitySet<PersonCivilState> PersonCivilStates
		{
			get
			{
				return this._PersonCivilStates;
			}
			set
			{
				this._PersonCivilStates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonCivilStates(PersonCivilState entity)
		{
			this.SendPropertyChanging();
			entity.CivilStatusCodeType = this;
		}
		
		private void detach_PersonCivilStates(PersonCivilState entity)
		{
			this.SendPropertyChanging();
			entity.CivilStatusCodeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LifeStatusCodeType")]
	public partial class LifeStatusCodeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LifeStatusCodeTypeId;
		
		private string _Name;
		
		private EntitySet<PersonLifeState> _PersonLifeStates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLifeStatusCodeTypeIdChanging(int value);
    partial void OnLifeStatusCodeTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public LifeStatusCodeType()
		{
			this._PersonLifeStates = new EntitySet<PersonLifeState>(new Action<PersonLifeState>(this.attach_PersonLifeStates), new Action<PersonLifeState>(this.detach_PersonLifeStates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifeStatusCodeTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LifeStatusCodeTypeId
		{
			get
			{
				return this._LifeStatusCodeTypeId;
			}
			set
			{
				if ((this._LifeStatusCodeTypeId != value))
				{
					this.OnLifeStatusCodeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._LifeStatusCodeTypeId = value;
					this.SendPropertyChanged("LifeStatusCodeTypeId");
					this.OnLifeStatusCodeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LifeStatusCodeType_PersonLifeState", Storage="_PersonLifeStates", ThisKey="LifeStatusCodeTypeId", OtherKey="LifeStatusCodeTypeId")]
		public EntitySet<PersonLifeState> PersonLifeStates
		{
			get
			{
				return this._PersonLifeStates;
			}
			set
			{
				this._PersonLifeStates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonLifeStates(PersonLifeState entity)
		{
			this.SendPropertyChanging();
			entity.LifeStatusCodeType = this;
		}
		
		private void detach_PersonLifeStates(PersonLifeState entity)
		{
			this.SendPropertyChanging();
			entity.LifeStatusCodeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonLifeState")]
	public partial class PersonLifeState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonRegistrationId;
		
		private int _LifeStatusCodeTypeId;
		
		private System.Nullable<System.Guid> _EffectId;
		
		private EntityRef<Effect> _Effect;
		
		private EntityRef<LifeStatusCodeType> _LifeStatusCodeType;
		
		private EntityRef<PersonState> _PersonState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonRegistrationIdChanging(System.Guid value);
    partial void OnPersonRegistrationIdChanged();
    partial void OnLifeStatusCodeTypeIdChanging(int value);
    partial void OnLifeStatusCodeTypeIdChanged();
    partial void OnEffectIdChanging(System.Nullable<System.Guid> value);
    partial void OnEffectIdChanged();
    #endregion
		
		public PersonLifeState()
		{
			this._Effect = default(EntityRef<Effect>);
			this._LifeStatusCodeType = default(EntityRef<LifeStatusCodeType>);
			this._PersonState = default(EntityRef<PersonState>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonRegistrationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonRegistrationId
		{
			get
			{
				return this._PersonRegistrationId;
			}
			set
			{
				if ((this._PersonRegistrationId != value))
				{
					if (this._PersonState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._PersonRegistrationId = value;
					this.SendPropertyChanged("PersonRegistrationId");
					this.OnPersonRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifeStatusCodeTypeId", DbType="Int NOT NULL")]
		public int LifeStatusCodeTypeId
		{
			get
			{
				return this._LifeStatusCodeTypeId;
			}
			set
			{
				if ((this._LifeStatusCodeTypeId != value))
				{
					if (this._LifeStatusCodeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLifeStatusCodeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._LifeStatusCodeTypeId = value;
					this.SendPropertyChanged("LifeStatusCodeTypeId");
					this.OnLifeStatusCodeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EffectId
		{
			get
			{
				return this._EffectId;
			}
			set
			{
				if ((this._EffectId != value))
				{
					if (this._Effect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEffectIdChanging(value);
					this.SendPropertyChanging();
					this._EffectId = value;
					this.SendPropertyChanged("EffectId");
					this.OnEffectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effect_PersonLifeState", Storage="_Effect", ThisKey="EffectId", OtherKey="EffectId", IsForeignKey=true)]
		public Effect Effect
		{
			get
			{
				return this._Effect.Entity;
			}
			set
			{
				Effect previousValue = this._Effect.Entity;
				if (((previousValue != value) 
							|| (this._Effect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Effect.Entity = null;
						previousValue.PersonLifeStates.Remove(this);
					}
					this._Effect.Entity = value;
					if ((value != null))
					{
						value.PersonLifeStates.Add(this);
						this._EffectId = value.EffectId;
					}
					else
					{
						this._EffectId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Effect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LifeStatusCodeType_PersonLifeState", Storage="_LifeStatusCodeType", ThisKey="LifeStatusCodeTypeId", OtherKey="LifeStatusCodeTypeId", IsForeignKey=true)]
		public LifeStatusCodeType LifeStatusCodeType
		{
			get
			{
				return this._LifeStatusCodeType.Entity;
			}
			set
			{
				LifeStatusCodeType previousValue = this._LifeStatusCodeType.Entity;
				if (((previousValue != value) 
							|| (this._LifeStatusCodeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LifeStatusCodeType.Entity = null;
						previousValue.PersonLifeStates.Remove(this);
					}
					this._LifeStatusCodeType.Entity = value;
					if ((value != null))
					{
						value.PersonLifeStates.Add(this);
						this._LifeStatusCodeTypeId = value.LifeStatusCodeTypeId;
					}
					else
					{
						this._LifeStatusCodeTypeId = default(int);
					}
					this.SendPropertyChanged("LifeStatusCodeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonState_PersonLifeState", Storage="_PersonState", ThisKey="PersonRegistrationId", OtherKey="PersonRegistrationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PersonState PersonState
		{
			get
			{
				return this._PersonState.Entity;
			}
			set
			{
				PersonState previousValue = this._PersonState.Entity;
				if (((previousValue != value) 
							|| (this._PersonState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonState.Entity = null;
						previousValue.PersonLifeState = null;
					}
					this._PersonState.Entity = value;
					if ((value != null))
					{
						value.PersonLifeState = this;
						this._PersonRegistrationId = value.PersonRegistrationId;
					}
					else
					{
						this._PersonRegistrationId = default(System.Guid);
					}
					this.SendPropertyChanged("PersonState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonCivilState")]
	public partial class PersonCivilState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonRegistrationId;
		
		private int _CivilStatusCodeTypeId;
		
		private System.Nullable<System.Guid> _EffectId;
		
		private EntityRef<CivilStatusCodeType> _CivilStatusCodeType;
		
		private EntityRef<Effect> _Effect;
		
		private EntityRef<PersonState> _PersonState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonRegistrationIdChanging(System.Guid value);
    partial void OnPersonRegistrationIdChanged();
    partial void OnCivilStatusCodeTypeIdChanging(int value);
    partial void OnCivilStatusCodeTypeIdChanged();
    partial void OnEffectIdChanging(System.Nullable<System.Guid> value);
    partial void OnEffectIdChanged();
    #endregion
		
		public PersonCivilState()
		{
			this._CivilStatusCodeType = default(EntityRef<CivilStatusCodeType>);
			this._Effect = default(EntityRef<Effect>);
			this._PersonState = default(EntityRef<PersonState>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonRegistrationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonRegistrationId
		{
			get
			{
				return this._PersonRegistrationId;
			}
			set
			{
				if ((this._PersonRegistrationId != value))
				{
					if (this._PersonState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._PersonRegistrationId = value;
					this.SendPropertyChanged("PersonRegistrationId");
					this.OnPersonRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CivilStatusCodeTypeId", DbType="Int NOT NULL")]
		public int CivilStatusCodeTypeId
		{
			get
			{
				return this._CivilStatusCodeTypeId;
			}
			set
			{
				if ((this._CivilStatusCodeTypeId != value))
				{
					if (this._CivilStatusCodeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCivilStatusCodeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CivilStatusCodeTypeId = value;
					this.SendPropertyChanged("CivilStatusCodeTypeId");
					this.OnCivilStatusCodeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EffectId
		{
			get
			{
				return this._EffectId;
			}
			set
			{
				if ((this._EffectId != value))
				{
					if (this._Effect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEffectIdChanging(value);
					this.SendPropertyChanging();
					this._EffectId = value;
					this.SendPropertyChanged("EffectId");
					this.OnEffectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CivilStatusCodeType_PersonCivilState", Storage="_CivilStatusCodeType", ThisKey="CivilStatusCodeTypeId", OtherKey="CivilStatusCodeTypeId", IsForeignKey=true)]
		public CivilStatusCodeType CivilStatusCodeType
		{
			get
			{
				return this._CivilStatusCodeType.Entity;
			}
			set
			{
				CivilStatusCodeType previousValue = this._CivilStatusCodeType.Entity;
				if (((previousValue != value) 
							|| (this._CivilStatusCodeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CivilStatusCodeType.Entity = null;
						previousValue.PersonCivilStates.Remove(this);
					}
					this._CivilStatusCodeType.Entity = value;
					if ((value != null))
					{
						value.PersonCivilStates.Add(this);
						this._CivilStatusCodeTypeId = value.CivilStatusCodeTypeId;
					}
					else
					{
						this._CivilStatusCodeTypeId = default(int);
					}
					this.SendPropertyChanged("CivilStatusCodeType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effect_PersonCivilState", Storage="_Effect", ThisKey="EffectId", OtherKey="EffectId", IsForeignKey=true)]
		public Effect Effect
		{
			get
			{
				return this._Effect.Entity;
			}
			set
			{
				Effect previousValue = this._Effect.Entity;
				if (((previousValue != value) 
							|| (this._Effect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Effect.Entity = null;
						previousValue.PersonCivilStates.Remove(this);
					}
					this._Effect.Entity = value;
					if ((value != null))
					{
						value.PersonCivilStates.Add(this);
						this._EffectId = value.EffectId;
					}
					else
					{
						this._EffectId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Effect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonState_PersonCivilState", Storage="_PersonState", ThisKey="PersonRegistrationId", OtherKey="PersonRegistrationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PersonState PersonState
		{
			get
			{
				return this._PersonState.Entity;
			}
			set
			{
				PersonState previousValue = this._PersonState.Entity;
				if (((previousValue != value) 
							|| (this._PersonState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonState.Entity = null;
						previousValue.PersonCivilState = null;
					}
					this._PersonState.Entity = value;
					if ((value != null))
					{
						value.PersonCivilState = this;
						this._PersonRegistrationId = value.PersonRegistrationId;
					}
					else
					{
						this._PersonRegistrationId = default(System.Guid);
					}
					this.SendPropertyChanged("PersonState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressPoint")]
	public partial class AddressPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private string _Identifier;
		
		private EntityRef<GeographicPointLocation> _GeographicPointLocation;
		
		private EntityRef<AddressPointStatus> _AddressPointStatus;
		
		private EntityRef<DanishAddress> _DanishAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    #endregion
		
		public AddressPoint()
		{
			this._GeographicPointLocation = default(EntityRef<GeographicPointLocation>);
			this._AddressPointStatus = default(EntityRef<AddressPointStatus>);
			this._DanishAddress = default(EntityRef<DanishAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._DanishAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identifier", DbType="VarChar(50)")]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressPoint_GeographicPointLocation", Storage="_GeographicPointLocation", ThisKey="AddressId", OtherKey="AddressId", IsUnique=true, IsForeignKey=false)]
		public GeographicPointLocation GeographicPointLocation
		{
			get
			{
				return this._GeographicPointLocation.Entity;
			}
			set
			{
				GeographicPointLocation previousValue = this._GeographicPointLocation.Entity;
				if (((previousValue != value) 
							|| (this._GeographicPointLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeographicPointLocation.Entity = null;
						previousValue.AddressPoint = null;
					}
					this._GeographicPointLocation.Entity = value;
					if ((value != null))
					{
						value.AddressPoint = this;
					}
					this.SendPropertyChanged("GeographicPointLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressPoint_AddressPointStatus", Storage="_AddressPointStatus", ThisKey="AddressId", OtherKey="AddressId", IsUnique=true, IsForeignKey=false)]
		public AddressPointStatus AddressPointStatus
		{
			get
			{
				return this._AddressPointStatus.Entity;
			}
			set
			{
				AddressPointStatus previousValue = this._AddressPointStatus.Entity;
				if (((previousValue != value) 
							|| (this._AddressPointStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressPointStatus.Entity = null;
						previousValue.AddressPoint = null;
					}
					this._AddressPointStatus.Entity = value;
					if ((value != null))
					{
						value.AddressPoint = this;
					}
					this.SendPropertyChanged("AddressPointStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DanishAddress_AddressPoint", Storage="_DanishAddress", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DanishAddress DanishAddress
		{
			get
			{
				return this._DanishAddress.Entity;
			}
			set
			{
				DanishAddress previousValue = this._DanishAddress.Entity;
				if (((previousValue != value) 
							|| (this._DanishAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DanishAddress.Entity = null;
						previousValue.AddressPoint = null;
					}
					this._DanishAddress.Entity = value;
					if ((value != null))
					{
						value.AddressPoint = this;
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(System.Guid);
					}
					this.SendPropertyChanged("DanishAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeographicCoorditaneTuple")]
	public partial class GeographicCoorditaneTuple : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private decimal _Easting;
		
		private decimal _Northing;
		
		private System.Nullable<decimal> _Height;
		
		private EntityRef<GeographicPointLocation> _GeographicPointLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnEastingChanging(decimal value);
    partial void OnEastingChanged();
    partial void OnNorthingChanging(decimal value);
    partial void OnNorthingChanged();
    partial void OnHeightChanging(System.Nullable<decimal> value);
    partial void OnHeightChanged();
    #endregion
		
		public GeographicCoorditaneTuple()
		{
			this._GeographicPointLocation = default(EntityRef<GeographicPointLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._GeographicPointLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Easting", DbType="Decimal(18,4) NOT NULL")]
		public decimal Easting
		{
			get
			{
				return this._Easting;
			}
			set
			{
				if ((this._Easting != value))
				{
					this.OnEastingChanging(value);
					this.SendPropertyChanging();
					this._Easting = value;
					this.SendPropertyChanged("Easting");
					this.OnEastingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Northing", DbType="Decimal(18,4) NOT NULL")]
		public decimal Northing
		{
			get
			{
				return this._Northing;
			}
			set
			{
				if ((this._Northing != value))
				{
					this.OnNorthingChanging(value);
					this.SendPropertyChanging();
					this._Northing = value;
					this.SendPropertyChanged("Northing");
					this.OnNorthingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeographicPointLocation_GeographicCoorditaneTuple", Storage="_GeographicPointLocation", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GeographicPointLocation GeographicPointLocation
		{
			get
			{
				return this._GeographicPointLocation.Entity;
			}
			set
			{
				GeographicPointLocation previousValue = this._GeographicPointLocation.Entity;
				if (((previousValue != value) 
							|| (this._GeographicPointLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeographicPointLocation.Entity = null;
						previousValue.GeographicCoorditaneTuple = null;
					}
					this._GeographicPointLocation.Entity = value;
					if ((value != null))
					{
						value.GeographicCoorditaneTuple = this;
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(System.Guid);
					}
					this.SendPropertyChanged("GeographicPointLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeographicPointLocation")]
	public partial class GeographicPointLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private string _CrsIdentifier;
		
		private EntityRef<GeographicCoorditaneTuple> _GeographicCoorditaneTuple;
		
		private EntityRef<AddressPoint> _AddressPoint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnCrsIdentifierChanging(string value);
    partial void OnCrsIdentifierChanged();
    #endregion
		
		public GeographicPointLocation()
		{
			this._GeographicCoorditaneTuple = default(EntityRef<GeographicCoorditaneTuple>);
			this._AddressPoint = default(EntityRef<AddressPoint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._AddressPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrsIdentifier", DbType="VarChar(50)")]
		public string CrsIdentifier
		{
			get
			{
				return this._CrsIdentifier;
			}
			set
			{
				if ((this._CrsIdentifier != value))
				{
					this.OnCrsIdentifierChanging(value);
					this.SendPropertyChanging();
					this._CrsIdentifier = value;
					this.SendPropertyChanged("CrsIdentifier");
					this.OnCrsIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeographicPointLocation_GeographicCoorditaneTuple", Storage="_GeographicCoorditaneTuple", ThisKey="AddressId", OtherKey="AddressId", IsUnique=true, IsForeignKey=false)]
		public GeographicCoorditaneTuple GeographicCoorditaneTuple
		{
			get
			{
				return this._GeographicCoorditaneTuple.Entity;
			}
			set
			{
				GeographicCoorditaneTuple previousValue = this._GeographicCoorditaneTuple.Entity;
				if (((previousValue != value) 
							|| (this._GeographicCoorditaneTuple.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeographicCoorditaneTuple.Entity = null;
						previousValue.GeographicPointLocation = null;
					}
					this._GeographicCoorditaneTuple.Entity = value;
					if ((value != null))
					{
						value.GeographicPointLocation = this;
					}
					this.SendPropertyChanged("GeographicCoorditaneTuple");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressPoint_GeographicPointLocation", Storage="_AddressPoint", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AddressPoint AddressPoint
		{
			get
			{
				return this._AddressPoint.Entity;
			}
			set
			{
				AddressPoint previousValue = this._AddressPoint.Entity;
				if (((previousValue != value) 
							|| (this._AddressPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressPoint.Entity = null;
						previousValue.GeographicPointLocation = null;
					}
					this._AddressPoint.Entity = value;
					if ((value != null))
					{
						value.GeographicPointLocation = this;
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(System.Guid);
					}
					this.SendPropertyChanged("AddressPoint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CountryRef")]
	public partial class CountryRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CountryRefId;
		
		private int _CountrySchemeTypeId;
		
		private string _Value;
		
		private EntitySet<ForeignAddress> _ForeignAddresses;
		
		private EntitySet<DenmarkAddress> _DenmarkAddresses;
		
		private EntitySet<CprData> _CprDatas;
		
		private EntitySet<ForeignCitizenCountry> _ForeignCitizenCountries;
		
		private EntitySet<ForeignCitizenData> _ForeignCitizenDatas;
		
		private EntityRef<CountrySchemeType> _CountrySchemeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryRefIdChanging(System.Guid value);
    partial void OnCountryRefIdChanged();
    partial void OnCountrySchemeTypeIdChanging(int value);
    partial void OnCountrySchemeTypeIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public CountryRef()
		{
			this._ForeignAddresses = new EntitySet<ForeignAddress>(new Action<ForeignAddress>(this.attach_ForeignAddresses), new Action<ForeignAddress>(this.detach_ForeignAddresses));
			this._DenmarkAddresses = new EntitySet<DenmarkAddress>(new Action<DenmarkAddress>(this.attach_DenmarkAddresses), new Action<DenmarkAddress>(this.detach_DenmarkAddresses));
			this._CprDatas = new EntitySet<CprData>(new Action<CprData>(this.attach_CprDatas), new Action<CprData>(this.detach_CprDatas));
			this._ForeignCitizenCountries = new EntitySet<ForeignCitizenCountry>(new Action<ForeignCitizenCountry>(this.attach_ForeignCitizenCountries), new Action<ForeignCitizenCountry>(this.detach_ForeignCitizenCountries));
			this._ForeignCitizenDatas = new EntitySet<ForeignCitizenData>(new Action<ForeignCitizenData>(this.attach_ForeignCitizenDatas), new Action<ForeignCitizenData>(this.detach_ForeignCitizenDatas));
			this._CountrySchemeType = default(EntityRef<CountrySchemeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryRefId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CountryRefId
		{
			get
			{
				return this._CountryRefId;
			}
			set
			{
				if ((this._CountryRefId != value))
				{
					this.OnCountryRefIdChanging(value);
					this.SendPropertyChanging();
					this._CountryRefId = value;
					this.SendPropertyChanged("CountryRefId");
					this.OnCountryRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountrySchemeTypeId", DbType="Int NOT NULL")]
		public int CountrySchemeTypeId
		{
			get
			{
				return this._CountrySchemeTypeId;
			}
			set
			{
				if ((this._CountrySchemeTypeId != value))
				{
					if (this._CountrySchemeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountrySchemeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CountrySchemeTypeId = value;
					this.SendPropertyChanged("CountrySchemeTypeId");
					this.OnCountrySchemeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_ForeignAddress", Storage="_ForeignAddresses", ThisKey="CountryRefId", OtherKey="CountryRefId")]
		public EntitySet<ForeignAddress> ForeignAddresses
		{
			get
			{
				return this._ForeignAddresses;
			}
			set
			{
				this._ForeignAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_DenmarkAddress", Storage="_DenmarkAddresses", ThisKey="CountryRefId", OtherKey="CountryRefId")]
		public EntitySet<DenmarkAddress> DenmarkAddresses
		{
			get
			{
				return this._DenmarkAddresses;
			}
			set
			{
				this._DenmarkAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_CprData", Storage="_CprDatas", ThisKey="CountryRefId", OtherKey="NationalityCountryRefId")]
		public EntitySet<CprData> CprDatas
		{
			get
			{
				return this._CprDatas;
			}
			set
			{
				this._CprDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_ForeignCitizenCountry", Storage="_ForeignCitizenCountries", ThisKey="CountryRefId", OtherKey="CountryRefId")]
		public EntitySet<ForeignCitizenCountry> ForeignCitizenCountries
		{
			get
			{
				return this._ForeignCitizenCountries;
			}
			set
			{
				this._ForeignCitizenCountries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_ForeignCitizenData", Storage="_ForeignCitizenDatas", ThisKey="CountryRefId", OtherKey="BirthCountryRefId")]
		public EntitySet<ForeignCitizenData> ForeignCitizenDatas
		{
			get
			{
				return this._ForeignCitizenDatas;
			}
			set
			{
				this._ForeignCitizenDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountrySchemeType_CountryRef", Storage="_CountrySchemeType", ThisKey="CountrySchemeTypeId", OtherKey="Id", IsForeignKey=true)]
		public CountrySchemeType CountrySchemeType
		{
			get
			{
				return this._CountrySchemeType.Entity;
			}
			set
			{
				CountrySchemeType previousValue = this._CountrySchemeType.Entity;
				if (((previousValue != value) 
							|| (this._CountrySchemeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountrySchemeType.Entity = null;
						previousValue.CountryRefs.Remove(this);
					}
					this._CountrySchemeType.Entity = value;
					if ((value != null))
					{
						value.CountryRefs.Add(this);
						this._CountrySchemeTypeId = value.Id;
					}
					else
					{
						this._CountrySchemeTypeId = default(int);
					}
					this.SendPropertyChanged("CountrySchemeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForeignAddresses(ForeignAddress entity)
		{
			this.SendPropertyChanging();
			entity.CountryRef = this;
		}
		
		private void detach_ForeignAddresses(ForeignAddress entity)
		{
			this.SendPropertyChanging();
			entity.CountryRef = null;
		}
		
		private void attach_DenmarkAddresses(DenmarkAddress entity)
		{
			this.SendPropertyChanging();
			entity.CountryRef = this;
		}
		
		private void detach_DenmarkAddresses(DenmarkAddress entity)
		{
			this.SendPropertyChanging();
			entity.CountryRef = null;
		}
		
		private void attach_CprDatas(CprData entity)
		{
			this.SendPropertyChanging();
			entity.NationalityCountryRef = this;
		}
		
		private void detach_CprDatas(CprData entity)
		{
			this.SendPropertyChanging();
			entity.NationalityCountryRef = null;
		}
		
		private void attach_ForeignCitizenCountries(ForeignCitizenCountry entity)
		{
			this.SendPropertyChanging();
			entity.CountryRef = this;
		}
		
		private void detach_ForeignCitizenCountries(ForeignCitizenCountry entity)
		{
			this.SendPropertyChanging();
			entity.CountryRef = null;
		}
		
		private void attach_ForeignCitizenDatas(ForeignCitizenData entity)
		{
			this.SendPropertyChanging();
			entity.BirthCountryRef = this;
		}
		
		private void detach_ForeignCitizenDatas(ForeignCitizenData entity)
		{
			this.SendPropertyChanging();
			entity.BirthCountryRef = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForeignAddress")]
	public partial class ForeignAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private string _FirstLine;
		
		private string _SecondLine;
		
		private string _ThirdLine;
		
		private string _FourthLine;
		
		private string _FifthLine;
		
		private string _LocationDescription;
		
		private System.Nullable<System.Guid> _CountryRefId;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<CountryRef> _CountryRef;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnFirstLineChanging(string value);
    partial void OnFirstLineChanged();
    partial void OnSecondLineChanging(string value);
    partial void OnSecondLineChanged();
    partial void OnThirdLineChanging(string value);
    partial void OnThirdLineChanged();
    partial void OnFourthLineChanging(string value);
    partial void OnFourthLineChanged();
    partial void OnFifthLineChanging(string value);
    partial void OnFifthLineChanged();
    partial void OnLocationDescriptionChanging(string value);
    partial void OnLocationDescriptionChanged();
    partial void OnCountryRefIdChanging(System.Nullable<System.Guid> value);
    partial void OnCountryRefIdChanged();
    #endregion
		
		public ForeignAddress()
		{
			this._Address = default(EntityRef<Address>);
			this._CountryRef = default(EntityRef<CountryRef>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstLine", DbType="VarChar(50)")]
		public string FirstLine
		{
			get
			{
				return this._FirstLine;
			}
			set
			{
				if ((this._FirstLine != value))
				{
					this.OnFirstLineChanging(value);
					this.SendPropertyChanging();
					this._FirstLine = value;
					this.SendPropertyChanged("FirstLine");
					this.OnFirstLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondLine", DbType="VarChar(50)")]
		public string SecondLine
		{
			get
			{
				return this._SecondLine;
			}
			set
			{
				if ((this._SecondLine != value))
				{
					this.OnSecondLineChanging(value);
					this.SendPropertyChanging();
					this._SecondLine = value;
					this.SendPropertyChanged("SecondLine");
					this.OnSecondLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdLine", DbType="VarChar(50)")]
		public string ThirdLine
		{
			get
			{
				return this._ThirdLine;
			}
			set
			{
				if ((this._ThirdLine != value))
				{
					this.OnThirdLineChanging(value);
					this.SendPropertyChanging();
					this._ThirdLine = value;
					this.SendPropertyChanged("ThirdLine");
					this.OnThirdLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FourthLine", DbType="VarChar(50)")]
		public string FourthLine
		{
			get
			{
				return this._FourthLine;
			}
			set
			{
				if ((this._FourthLine != value))
				{
					this.OnFourthLineChanging(value);
					this.SendPropertyChanging();
					this._FourthLine = value;
					this.SendPropertyChanged("FourthLine");
					this.OnFourthLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FifthLine", DbType="VarChar(50)")]
		public string FifthLine
		{
			get
			{
				return this._FifthLine;
			}
			set
			{
				if ((this._FifthLine != value))
				{
					this.OnFifthLineChanging(value);
					this.SendPropertyChanging();
					this._FifthLine = value;
					this.SendPropertyChanged("FifthLine");
					this.OnFifthLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationDescription", DbType="VarChar(50)")]
		public string LocationDescription
		{
			get
			{
				return this._LocationDescription;
			}
			set
			{
				if ((this._LocationDescription != value))
				{
					this.OnLocationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LocationDescription = value;
					this.SendPropertyChanged("LocationDescription");
					this.OnLocationDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryRefId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CountryRefId
		{
			get
			{
				return this._CountryRefId;
			}
			set
			{
				if ((this._CountryRefId != value))
				{
					if (this._CountryRef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryRefIdChanging(value);
					this.SendPropertyChanging();
					this._CountryRefId = value;
					this.SendPropertyChanged("CountryRefId");
					this.OnCountryRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_ForeignAddress", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.ForeignAddress = null;
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.ForeignAddress = this;
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(System.Guid);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_ForeignAddress", Storage="_CountryRef", ThisKey="CountryRefId", OtherKey="CountryRefId", IsForeignKey=true)]
		public CountryRef CountryRef
		{
			get
			{
				return this._CountryRef.Entity;
			}
			set
			{
				CountryRef previousValue = this._CountryRef.Entity;
				if (((previousValue != value) 
							|| (this._CountryRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryRef.Entity = null;
						previousValue.ForeignAddresses.Remove(this);
					}
					this._CountryRef.Entity = value;
					if ((value != null))
					{
						value.ForeignAddresses.Add(this);
						this._CountryRefId = value.CountryRefId;
					}
					else
					{
						this._CountryRefId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CountryRef");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DenmarkAddress")]
	public partial class DenmarkAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private System.Nullable<bool> _SpecialRoadCode;
		
		private string _MunicipalityCode;
		
		private string _StreetCode;
		
		private string _MailDeliverySublocation;
		
		private string _StreetName;
		
		private string _StreetNameForAddressing;
		
		private string _StreetBuildingIdentifier;
		
		private string _FloorIdentifier;
		
		private string _SuiteIdentifier;
		
		private string _DistrictSubdivisionIdentifier;
		
		private string _PostCodeIdentifier;
		
		private string _DistrictName;
		
		private System.Nullable<System.Guid> _CountryRefId;
		
		private EntityRef<DanishAddress> _DanishAddress;
		
		private EntityRef<GreenlandicAddress> _GreenlandicAddress;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<CountryRef> _CountryRef;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnSpecialRoadCodeChanging(System.Nullable<bool> value);
    partial void OnSpecialRoadCodeChanged();
    partial void OnMunicipalityCodeChanging(string value);
    partial void OnMunicipalityCodeChanged();
    partial void OnStreetCodeChanging(string value);
    partial void OnStreetCodeChanged();
    partial void OnMailDeliverySublocationChanging(string value);
    partial void OnMailDeliverySublocationChanged();
    partial void OnStreetNameChanging(string value);
    partial void OnStreetNameChanged();
    partial void OnStreetNameForAddressingChanging(string value);
    partial void OnStreetNameForAddressingChanged();
    partial void OnStreetBuildingIdentifierChanging(string value);
    partial void OnStreetBuildingIdentifierChanged();
    partial void OnFloorIdentifierChanging(string value);
    partial void OnFloorIdentifierChanged();
    partial void OnSuiteIdentifierChanging(string value);
    partial void OnSuiteIdentifierChanged();
    partial void OnDistrictSubdivisionIdentifierChanging(string value);
    partial void OnDistrictSubdivisionIdentifierChanged();
    partial void OnPostCodeIdentifierChanging(string value);
    partial void OnPostCodeIdentifierChanged();
    partial void OnDistrictNameChanging(string value);
    partial void OnDistrictNameChanged();
    partial void OnCountryRefIdChanging(System.Nullable<System.Guid> value);
    partial void OnCountryRefIdChanged();
    #endregion
		
		public DenmarkAddress()
		{
			this._DanishAddress = default(EntityRef<DanishAddress>);
			this._GreenlandicAddress = default(EntityRef<GreenlandicAddress>);
			this._Address = default(EntityRef<Address>);
			this._CountryRef = default(EntityRef<CountryRef>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialRoadCode", DbType="Bit")]
		public System.Nullable<bool> SpecialRoadCode
		{
			get
			{
				return this._SpecialRoadCode;
			}
			set
			{
				if ((this._SpecialRoadCode != value))
				{
					this.OnSpecialRoadCodeChanging(value);
					this.SendPropertyChanging();
					this._SpecialRoadCode = value;
					this.SendPropertyChanged("SpecialRoadCode");
					this.OnSpecialRoadCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MunicipalityCode", DbType="VarChar(4)")]
		public string MunicipalityCode
		{
			get
			{
				return this._MunicipalityCode;
			}
			set
			{
				if ((this._MunicipalityCode != value))
				{
					this.OnMunicipalityCodeChanging(value);
					this.SendPropertyChanging();
					this._MunicipalityCode = value;
					this.SendPropertyChanged("MunicipalityCode");
					this.OnMunicipalityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetCode", DbType="VarChar(4)")]
		public string StreetCode
		{
			get
			{
				return this._StreetCode;
			}
			set
			{
				if ((this._StreetCode != value))
				{
					this.OnStreetCodeChanging(value);
					this.SendPropertyChanging();
					this._StreetCode = value;
					this.SendPropertyChanged("StreetCode");
					this.OnStreetCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailDeliverySublocation", DbType="VarChar(50)")]
		public string MailDeliverySublocation
		{
			get
			{
				return this._MailDeliverySublocation;
			}
			set
			{
				if ((this._MailDeliverySublocation != value))
				{
					this.OnMailDeliverySublocationChanging(value);
					this.SendPropertyChanging();
					this._MailDeliverySublocation = value;
					this.SendPropertyChanged("MailDeliverySublocation");
					this.OnMailDeliverySublocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetName", DbType="VarChar(50)")]
		public string StreetName
		{
			get
			{
				return this._StreetName;
			}
			set
			{
				if ((this._StreetName != value))
				{
					this.OnStreetNameChanging(value);
					this.SendPropertyChanging();
					this._StreetName = value;
					this.SendPropertyChanged("StreetName");
					this.OnStreetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetNameForAddressing", DbType="VarChar(50)")]
		public string StreetNameForAddressing
		{
			get
			{
				return this._StreetNameForAddressing;
			}
			set
			{
				if ((this._StreetNameForAddressing != value))
				{
					this.OnStreetNameForAddressingChanging(value);
					this.SendPropertyChanging();
					this._StreetNameForAddressing = value;
					this.SendPropertyChanged("StreetNameForAddressing");
					this.OnStreetNameForAddressingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetBuildingIdentifier", DbType="VarChar(4)")]
		public string StreetBuildingIdentifier
		{
			get
			{
				return this._StreetBuildingIdentifier;
			}
			set
			{
				if ((this._StreetBuildingIdentifier != value))
				{
					this.OnStreetBuildingIdentifierChanging(value);
					this.SendPropertyChanging();
					this._StreetBuildingIdentifier = value;
					this.SendPropertyChanged("StreetBuildingIdentifier");
					this.OnStreetBuildingIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FloorIdentifier", DbType="VarChar(50)")]
		public string FloorIdentifier
		{
			get
			{
				return this._FloorIdentifier;
			}
			set
			{
				if ((this._FloorIdentifier != value))
				{
					this.OnFloorIdentifierChanging(value);
					this.SendPropertyChanging();
					this._FloorIdentifier = value;
					this.SendPropertyChanged("FloorIdentifier");
					this.OnFloorIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuiteIdentifier", DbType="VarChar(50)")]
		public string SuiteIdentifier
		{
			get
			{
				return this._SuiteIdentifier;
			}
			set
			{
				if ((this._SuiteIdentifier != value))
				{
					this.OnSuiteIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SuiteIdentifier = value;
					this.SendPropertyChanged("SuiteIdentifier");
					this.OnSuiteIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictSubdivisionIdentifier", DbType="VarChar(50)")]
		public string DistrictSubdivisionIdentifier
		{
			get
			{
				return this._DistrictSubdivisionIdentifier;
			}
			set
			{
				if ((this._DistrictSubdivisionIdentifier != value))
				{
					this.OnDistrictSubdivisionIdentifierChanging(value);
					this.SendPropertyChanging();
					this._DistrictSubdivisionIdentifier = value;
					this.SendPropertyChanged("DistrictSubdivisionIdentifier");
					this.OnDistrictSubdivisionIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCodeIdentifier", DbType="VarChar(50)")]
		public string PostCodeIdentifier
		{
			get
			{
				return this._PostCodeIdentifier;
			}
			set
			{
				if ((this._PostCodeIdentifier != value))
				{
					this.OnPostCodeIdentifierChanging(value);
					this.SendPropertyChanging();
					this._PostCodeIdentifier = value;
					this.SendPropertyChanged("PostCodeIdentifier");
					this.OnPostCodeIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictName", DbType="VarChar(50)")]
		public string DistrictName
		{
			get
			{
				return this._DistrictName;
			}
			set
			{
				if ((this._DistrictName != value))
				{
					this.OnDistrictNameChanging(value);
					this.SendPropertyChanging();
					this._DistrictName = value;
					this.SendPropertyChanged("DistrictName");
					this.OnDistrictNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryRefId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CountryRefId
		{
			get
			{
				return this._CountryRefId;
			}
			set
			{
				if ((this._CountryRefId != value))
				{
					if (this._CountryRef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryRefIdChanging(value);
					this.SendPropertyChanging();
					this._CountryRefId = value;
					this.SendPropertyChanged("CountryRefId");
					this.OnCountryRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DenmarkAddress_DanishAddress", Storage="_DanishAddress", ThisKey="AddressId", OtherKey="AddressId", IsUnique=true, IsForeignKey=false)]
		public DanishAddress DanishAddress
		{
			get
			{
				return this._DanishAddress.Entity;
			}
			set
			{
				DanishAddress previousValue = this._DanishAddress.Entity;
				if (((previousValue != value) 
							|| (this._DanishAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DanishAddress.Entity = null;
						previousValue.DenmarkAddress = null;
					}
					this._DanishAddress.Entity = value;
					if ((value != null))
					{
						value.DenmarkAddress = this;
					}
					this.SendPropertyChanged("DanishAddress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DenmarkAddress_GreenlandicAddress", Storage="_GreenlandicAddress", ThisKey="AddressId", OtherKey="AddressId", IsUnique=true, IsForeignKey=false)]
		public GreenlandicAddress GreenlandicAddress
		{
			get
			{
				return this._GreenlandicAddress.Entity;
			}
			set
			{
				GreenlandicAddress previousValue = this._GreenlandicAddress.Entity;
				if (((previousValue != value) 
							|| (this._GreenlandicAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GreenlandicAddress.Entity = null;
						previousValue.DenmarkAddress = null;
					}
					this._GreenlandicAddress.Entity = value;
					if ((value != null))
					{
						value.DenmarkAddress = this;
					}
					this.SendPropertyChanged("GreenlandicAddress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_DenmarkAddress", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.DenmarkAddress = null;
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.DenmarkAddress = this;
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(System.Guid);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_DenmarkAddress", Storage="_CountryRef", ThisKey="CountryRefId", OtherKey="CountryRefId", IsForeignKey=true)]
		public CountryRef CountryRef
		{
			get
			{
				return this._CountryRef.Entity;
			}
			set
			{
				CountryRef previousValue = this._CountryRef.Entity;
				if (((previousValue != value) 
							|| (this._CountryRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryRef.Entity = null;
						previousValue.DenmarkAddresses.Remove(this);
					}
					this._CountryRef.Entity = value;
					if ((value != null))
					{
						value.DenmarkAddresses.Add(this);
						this._CountryRefId = value.CountryRefId;
					}
					else
					{
						this._CountryRefId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CountryRef");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CountrySchemeType")]
	public partial class CountrySchemeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<CountryRef> _CountryRefs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CountrySchemeType()
		{
			this._CountryRefs = new EntitySet<CountryRef>(new Action<CountryRef>(this.attach_CountryRefs), new Action<CountryRef>(this.detach_CountryRefs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountrySchemeType_CountryRef", Storage="_CountryRefs", ThisKey="Id", OtherKey="CountrySchemeTypeId")]
		public EntitySet<CountryRef> CountryRefs
		{
			get
			{
				return this._CountryRefs;
			}
			set
			{
				this._CountryRefs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CountryRefs(CountryRef entity)
		{
			this.SendPropertyChanging();
			entity.CountrySchemeType = this;
		}
		
		private void detach_CountryRefs(CountryRef entity)
		{
			this.SendPropertyChanging();
			entity.CountrySchemeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressPointStatus")]
	public partial class AddressPointStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AddressId;
		
		private System.DateTime _RevisionDate;
		
		private System.Nullable<System.DateTime> _ValidStartDate;
		
		private System.Nullable<System.DateTime> _ValidEndDate;
		
		private System.Nullable<char> _AddressCoordinateQualityTypeCode;
		
		private EntityRef<AddressPoint> _AddressPoint;
		
		private EntityRef<AddressCoordinateQualityType> _AddressCoordinateQualityType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(System.Guid value);
    partial void OnAddressIdChanged();
    partial void OnRevisionDateChanging(System.DateTime value);
    partial void OnRevisionDateChanged();
    partial void OnValidStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValidStartDateChanged();
    partial void OnValidEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValidEndDateChanged();
    partial void OnAddressCoordinateQualityTypeCodeChanging(System.Nullable<char> value);
    partial void OnAddressCoordinateQualityTypeCodeChanged();
    #endregion
		
		public AddressPointStatus()
		{
			this._AddressPoint = default(EntityRef<AddressPoint>);
			this._AddressCoordinateQualityType = default(EntityRef<AddressCoordinateQualityType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._AddressPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionDate", DbType="DateTime NOT NULL")]
		public System.DateTime RevisionDate
		{
			get
			{
				return this._RevisionDate;
			}
			set
			{
				if ((this._RevisionDate != value))
				{
					this.OnRevisionDateChanging(value);
					this.SendPropertyChanging();
					this._RevisionDate = value;
					this.SendPropertyChanged("RevisionDate");
					this.OnRevisionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidStartDate
		{
			get
			{
				return this._ValidStartDate;
			}
			set
			{
				if ((this._ValidStartDate != value))
				{
					this.OnValidStartDateChanging(value);
					this.SendPropertyChanging();
					this._ValidStartDate = value;
					this.SendPropertyChanged("ValidStartDate");
					this.OnValidStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidEndDate
		{
			get
			{
				return this._ValidEndDate;
			}
			set
			{
				if ((this._ValidEndDate != value))
				{
					this.OnValidEndDateChanging(value);
					this.SendPropertyChanging();
					this._ValidEndDate = value;
					this.SendPropertyChanged("ValidEndDate");
					this.OnValidEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressCoordinateQualityTypeCode", DbType="Char(1)")]
		public System.Nullable<char> AddressCoordinateQualityTypeCode
		{
			get
			{
				return this._AddressCoordinateQualityTypeCode;
			}
			set
			{
				if ((this._AddressCoordinateQualityTypeCode != value))
				{
					if (this._AddressCoordinateQualityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressCoordinateQualityTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._AddressCoordinateQualityTypeCode = value;
					this.SendPropertyChanged("AddressCoordinateQualityTypeCode");
					this.OnAddressCoordinateQualityTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressPoint_AddressPointStatus", Storage="_AddressPoint", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AddressPoint AddressPoint
		{
			get
			{
				return this._AddressPoint.Entity;
			}
			set
			{
				AddressPoint previousValue = this._AddressPoint.Entity;
				if (((previousValue != value) 
							|| (this._AddressPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressPoint.Entity = null;
						previousValue.AddressPointStatus = null;
					}
					this._AddressPoint.Entity = value;
					if ((value != null))
					{
						value.AddressPointStatus = this;
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(System.Guid);
					}
					this.SendPropertyChanged("AddressPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressCoordinateQualityType_AddressPointStatus", Storage="_AddressCoordinateQualityType", ThisKey="AddressCoordinateQualityTypeCode", OtherKey="Code", IsForeignKey=true)]
		public AddressCoordinateQualityType AddressCoordinateQualityType
		{
			get
			{
				return this._AddressCoordinateQualityType.Entity;
			}
			set
			{
				AddressCoordinateQualityType previousValue = this._AddressCoordinateQualityType.Entity;
				if (((previousValue != value) 
							|| (this._AddressCoordinateQualityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressCoordinateQualityType.Entity = null;
						previousValue.AddressPointStatus.Remove(this);
					}
					this._AddressCoordinateQualityType.Entity = value;
					if ((value != null))
					{
						value.AddressPointStatus.Add(this);
						this._AddressCoordinateQualityTypeCode = value.Code;
					}
					else
					{
						this._AddressCoordinateQualityTypeCode = default(Nullable<char>);
					}
					this.SendPropertyChanged("AddressCoordinateQualityType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressCoordinateQualityType")]
	public partial class AddressCoordinateQualityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _Code;
		
		private string _Name;
		
		private EntitySet<AddressPointStatus> _AddressPointStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(char value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AddressCoordinateQualityType()
		{
			this._AddressPointStatus = new EntitySet<AddressPointStatus>(new Action<AddressPointStatus>(this.attach_AddressPointStatus), new Action<AddressPointStatus>(this.detach_AddressPointStatus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressCoordinateQualityType_AddressPointStatus", Storage="_AddressPointStatus", ThisKey="Code", OtherKey="AddressCoordinateQualityTypeCode")]
		public EntitySet<AddressPointStatus> AddressPointStatus
		{
			get
			{
				return this._AddressPointStatus;
			}
			set
			{
				this._AddressPointStatus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AddressPointStatus(AddressPointStatus entity)
		{
			this.SendPropertyChanging();
			entity.AddressCoordinateQualityType = this;
		}
		
		private void detach_AddressPointStatus(AddressPointStatus entity)
		{
			this.SendPropertyChanging();
			entity.AddressCoordinateQualityType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonRegistration")]
	public partial class PersonRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonRegistrationId;
		
		private System.Guid _UUID;
		
		private System.Nullable<System.Guid> _ActorRefId;
		
		private System.DateTime _RegistrationDate;
		
		private System.DateTime _BrokerUpdateDate;
		
		private string _CommentText;
		
		private int _LifecycleStatusId;
		
		private System.Xml.Linq.XElement _Contents;
		
		private System.Xml.Linq.XElement _SourceObjects;
		
		private EntityRef<ActorRef> _ActorRef;
		
		private EntityRef<LifecycleStatus> _LifecycleStatus;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonRegistrationIdChanging(System.Guid value);
    partial void OnPersonRegistrationIdChanged();
    partial void OnUUIDChanging(System.Guid value);
    partial void OnUUIDChanged();
    partial void OnActorRefIdChanging(System.Nullable<System.Guid> value);
    partial void OnActorRefIdChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnBrokerUpdateDateChanging(System.DateTime value);
    partial void OnBrokerUpdateDateChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnLifecycleStatusIdChanging(int value);
    partial void OnLifecycleStatusIdChanged();
    partial void OnContentsChanging(System.Xml.Linq.XElement value);
    partial void OnContentsChanged();
    partial void OnSourceObjectsChanging(System.Xml.Linq.XElement value);
    partial void OnSourceObjectsChanged();
    #endregion
		
		public PersonRegistration()
		{
			this._ActorRef = default(EntityRef<ActorRef>);
			this._LifecycleStatus = default(EntityRef<LifecycleStatus>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonRegistrationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonRegistrationId
		{
			get
			{
				return this._PersonRegistrationId;
			}
			set
			{
				if ((this._PersonRegistrationId != value))
				{
					this.OnPersonRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._PersonRegistrationId = value;
					this.SendPropertyChanged("PersonRegistrationId");
					this.OnPersonRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UUID
		{
			get
			{
				return this._UUID;
			}
			set
			{
				if ((this._UUID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUUIDChanging(value);
					this.SendPropertyChanging();
					this._UUID = value;
					this.SendPropertyChanged("UUID");
					this.OnUUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorRefId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ActorRefId
		{
			get
			{
				return this._ActorRefId;
			}
			set
			{
				if ((this._ActorRefId != value))
				{
					if (this._ActorRef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorRefIdChanging(value);
					this.SendPropertyChanging();
					this._ActorRefId = value;
					this.SendPropertyChanged("ActorRefId");
					this.OnActorRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime BrokerUpdateDate
		{
			get
			{
				return this._BrokerUpdateDate;
			}
			set
			{
				if ((this._BrokerUpdateDate != value))
				{
					this.OnBrokerUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._BrokerUpdateDate = value;
					this.SendPropertyChanged("BrokerUpdateDate");
					this.OnBrokerUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="VarChar(50)")]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifecycleStatusId", DbType="Int NOT NULL")]
		public int LifecycleStatusId
		{
			get
			{
				return this._LifecycleStatusId;
			}
			set
			{
				if ((this._LifecycleStatusId != value))
				{
					if (this._LifecycleStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLifecycleStatusIdChanging(value);
					this.SendPropertyChanging();
					this._LifecycleStatusId = value;
					this.SendPropertyChanged("LifecycleStatusId");
					this.OnLifecycleStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceObjects", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement SourceObjects
		{
			get
			{
				return this._SourceObjects;
			}
			set
			{
				if ((this._SourceObjects != value))
				{
					this.OnSourceObjectsChanging(value);
					this.SendPropertyChanging();
					this._SourceObjects = value;
					this.SendPropertyChanged("SourceObjects");
					this.OnSourceObjectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActorRef_PersonRegistration", Storage="_ActorRef", ThisKey="ActorRefId", OtherKey="ActorRefId", IsForeignKey=true)]
		public ActorRef ActorRef
		{
			get
			{
				return this._ActorRef.Entity;
			}
			set
			{
				ActorRef previousValue = this._ActorRef.Entity;
				if (((previousValue != value) 
							|| (this._ActorRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActorRef.Entity = null;
						previousValue.PersonRegistrations.Remove(this);
					}
					this._ActorRef.Entity = value;
					if ((value != null))
					{
						value.PersonRegistrations.Add(this);
						this._ActorRefId = value.ActorRefId;
					}
					else
					{
						this._ActorRefId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ActorRef");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LifecycleStatus_PersonRegistration", Storage="_LifecycleStatus", ThisKey="LifecycleStatusId", OtherKey="LifecycleStatusId", IsForeignKey=true)]
		public LifecycleStatus LifecycleStatus
		{
			get
			{
				return this._LifecycleStatus.Entity;
			}
			set
			{
				LifecycleStatus previousValue = this._LifecycleStatus.Entity;
				if (((previousValue != value) 
							|| (this._LifecycleStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LifecycleStatus.Entity = null;
						previousValue.PersonRegistrations.Remove(this);
					}
					this._LifecycleStatus.Entity = value;
					if ((value != null))
					{
						value.PersonRegistrations.Add(this);
						this._LifecycleStatusId = value.LifecycleStatusId;
					}
					else
					{
						this._LifecycleStatusId = default(int);
					}
					this.SendPropertyChanged("LifecycleStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRegistration", Storage="_Person", ThisKey="UUID", OtherKey="UUID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonRegistrations.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonRegistrations.Add(this);
						this._UUID = value.UUID;
					}
					else
					{
						this._UUID = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonAttributes")]
	public partial class PersonAttributes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonAttributesId;
		
		private System.Nullable<System.Guid> _EffectId;
		
		private System.Guid _PersonRegistrationId;
		
		private EntityRef<CprData> _CprData;
		
		private EntityRef<ForeignCitizenData> _ForeignCitizenData;
		
		private EntityRef<UnknownCitizenData> _UnknownCitizenData;
		
		private EntityRef<HealthInformation> _HealthInformation;
		
		private EntityRef<PersonProperties> _PersonProperties;
		
		private EntityRef<Effect> _Effect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonAttributesIdChanging(System.Guid value);
    partial void OnPersonAttributesIdChanged();
    partial void OnEffectIdChanging(System.Nullable<System.Guid> value);
    partial void OnEffectIdChanged();
    partial void OnPersonRegistrationIdChanging(System.Guid value);
    partial void OnPersonRegistrationIdChanged();
    #endregion
		
		public PersonAttributes()
		{
			this._CprData = default(EntityRef<CprData>);
			this._ForeignCitizenData = default(EntityRef<ForeignCitizenData>);
			this._UnknownCitizenData = default(EntityRef<UnknownCitizenData>);
			this._HealthInformation = default(EntityRef<HealthInformation>);
			this._PersonProperties = default(EntityRef<PersonProperties>);
			this._Effect = default(EntityRef<Effect>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAttributesId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonAttributesId
		{
			get
			{
				return this._PersonAttributesId;
			}
			set
			{
				if ((this._PersonAttributesId != value))
				{
					this.OnPersonAttributesIdChanging(value);
					this.SendPropertyChanging();
					this._PersonAttributesId = value;
					this.SendPropertyChanged("PersonAttributesId");
					this.OnPersonAttributesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EffectId
		{
			get
			{
				return this._EffectId;
			}
			set
			{
				if ((this._EffectId != value))
				{
					if (this._Effect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEffectIdChanging(value);
					this.SendPropertyChanging();
					this._EffectId = value;
					this.SendPropertyChanged("EffectId");
					this.OnEffectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonRegistrationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonRegistrationId
		{
			get
			{
				return this._PersonRegistrationId;
			}
			set
			{
				if ((this._PersonRegistrationId != value))
				{
					this.OnPersonRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._PersonRegistrationId = value;
					this.SendPropertyChanged("PersonRegistrationId");
					this.OnPersonRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_CprData", Storage="_CprData", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsUnique=true, IsForeignKey=false)]
		public CprData CprData
		{
			get
			{
				return this._CprData.Entity;
			}
			set
			{
				CprData previousValue = this._CprData.Entity;
				if (((previousValue != value) 
							|| (this._CprData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CprData.Entity = null;
						previousValue.PersonAttributes = null;
					}
					this._CprData.Entity = value;
					if ((value != null))
					{
						value.PersonAttributes = this;
					}
					this.SendPropertyChanged("CprData");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_ForeignCitizenData", Storage="_ForeignCitizenData", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsUnique=true, IsForeignKey=false)]
		public ForeignCitizenData ForeignCitizenData
		{
			get
			{
				return this._ForeignCitizenData.Entity;
			}
			set
			{
				ForeignCitizenData previousValue = this._ForeignCitizenData.Entity;
				if (((previousValue != value) 
							|| (this._ForeignCitizenData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForeignCitizenData.Entity = null;
						previousValue.PersonAttributes = null;
					}
					this._ForeignCitizenData.Entity = value;
					if ((value != null))
					{
						value.PersonAttributes = this;
					}
					this.SendPropertyChanged("ForeignCitizenData");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_UnknownCitizenData", Storage="_UnknownCitizenData", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsUnique=true, IsForeignKey=false)]
		public UnknownCitizenData UnknownCitizenData
		{
			get
			{
				return this._UnknownCitizenData.Entity;
			}
			set
			{
				UnknownCitizenData previousValue = this._UnknownCitizenData.Entity;
				if (((previousValue != value) 
							|| (this._UnknownCitizenData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnknownCitizenData.Entity = null;
						previousValue.PersonAttributes = null;
					}
					this._UnknownCitizenData.Entity = value;
					if ((value != null))
					{
						value.PersonAttributes = this;
					}
					this.SendPropertyChanged("UnknownCitizenData");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_HealthInformation", Storage="_HealthInformation", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsUnique=true, IsForeignKey=false)]
		public HealthInformation HealthInformation
		{
			get
			{
				return this._HealthInformation.Entity;
			}
			set
			{
				HealthInformation previousValue = this._HealthInformation.Entity;
				if (((previousValue != value) 
							|| (this._HealthInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthInformation.Entity = null;
						previousValue.PersonAttributes = null;
					}
					this._HealthInformation.Entity = value;
					if ((value != null))
					{
						value.PersonAttributes = this;
					}
					this.SendPropertyChanged("HealthInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_PersonProperties", Storage="_PersonProperties", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsUnique=true, IsForeignKey=false)]
		public PersonProperties PersonProperties
		{
			get
			{
				return this._PersonProperties.Entity;
			}
			set
			{
				PersonProperties previousValue = this._PersonProperties.Entity;
				if (((previousValue != value) 
							|| (this._PersonProperties.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonProperties.Entity = null;
						previousValue.PersonAttributes = null;
					}
					this._PersonProperties.Entity = value;
					if ((value != null))
					{
						value.PersonAttributes = this;
					}
					this.SendPropertyChanged("PersonProperties");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Effect_PersonAttributes", Storage="_Effect", ThisKey="EffectId", OtherKey="EffectId", IsForeignKey=true)]
		public Effect Effect
		{
			get
			{
				return this._Effect.Entity;
			}
			set
			{
				Effect previousValue = this._Effect.Entity;
				if (((previousValue != value) 
							|| (this._Effect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Effect.Entity = null;
						previousValue.PersonAttributes.Remove(this);
					}
					this._Effect.Entity = value;
					if ((value != null))
					{
						value.PersonAttributes.Add(this);
						this._EffectId = value.EffectId;
					}
					else
					{
						this._EffectId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Effect");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CprData")]
	public partial class CprData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonAttributesId;
		
		private string _CprNumber;
		
		private bool _CprNumberValidity;
		
		private System.Nullable<System.Guid> _NationalityCountryRefId;
		
		private bool _NameAndAddressProtectionIndicator;
		
		private bool _TelephoneNumberProtection;
		
		private bool _ResearchProtection;
		
		private System.Nullable<System.Guid> _AddressId;
		
		private string _AddressNote;
		
		private bool _ChurchMember;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<CountryRef> _CountryRef;
		
		private EntityRef<PersonAttributes> _PersonAttribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonAttributesIdChanging(System.Guid value);
    partial void OnPersonAttributesIdChanged();
    partial void OnCprNumberChanging(string value);
    partial void OnCprNumberChanged();
    partial void OnCprNumberValidityChanging(bool value);
    partial void OnCprNumberValidityChanged();
    partial void OnNationalityCountryRefIdChanging(System.Nullable<System.Guid> value);
    partial void OnNationalityCountryRefIdChanged();
    partial void OnNameAndAddressProtectionIndicatorChanging(bool value);
    partial void OnNameAndAddressProtectionIndicatorChanged();
    partial void OnTelephoneNumberProtectionChanging(bool value);
    partial void OnTelephoneNumberProtectionChanged();
    partial void OnResearchProtectionChanging(bool value);
    partial void OnResearchProtectionChanged();
    partial void OnAddressIdChanging(System.Nullable<System.Guid> value);
    partial void OnAddressIdChanged();
    partial void OnAddressNoteChanging(string value);
    partial void OnAddressNoteChanged();
    partial void OnChurchMemberChanging(bool value);
    partial void OnChurchMemberChanged();
    #endregion
		
		public CprData()
		{
			this._Address = default(EntityRef<Address>);
			this._CountryRef = default(EntityRef<CountryRef>);
			this._PersonAttribute = default(EntityRef<PersonAttributes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAttributesId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonAttributesId
		{
			get
			{
				return this._PersonAttributesId;
			}
			set
			{
				if ((this._PersonAttributesId != value))
				{
					if (this._PersonAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAttributesIdChanging(value);
					this.SendPropertyChanging();
					this._PersonAttributesId = value;
					this.SendPropertyChanged("PersonAttributesId");
					this.OnPersonAttributesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CprNumber", DbType="VarChar(10)")]
		public string CprNumber
		{
			get
			{
				return this._CprNumber;
			}
			set
			{
				if ((this._CprNumber != value))
				{
					this.OnCprNumberChanging(value);
					this.SendPropertyChanging();
					this._CprNumber = value;
					this.SendPropertyChanged("CprNumber");
					this.OnCprNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CprNumberValidity", DbType="Bit NOT NULL")]
		public bool CprNumberValidity
		{
			get
			{
				return this._CprNumberValidity;
			}
			set
			{
				if ((this._CprNumberValidity != value))
				{
					this.OnCprNumberValidityChanging(value);
					this.SendPropertyChanging();
					this._CprNumberValidity = value;
					this.SendPropertyChanged("CprNumberValidity");
					this.OnCprNumberValidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalityCountryRefId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NationalityCountryRefId
		{
			get
			{
				return this._NationalityCountryRefId;
			}
			set
			{
				if ((this._NationalityCountryRefId != value))
				{
					if (this._CountryRef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNationalityCountryRefIdChanging(value);
					this.SendPropertyChanging();
					this._NationalityCountryRefId = value;
					this.SendPropertyChanged("NationalityCountryRefId");
					this.OnNationalityCountryRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameAndAddressProtectionIndicator", DbType="Bit NOT NULL")]
		public bool NameAndAddressProtectionIndicator
		{
			get
			{
				return this._NameAndAddressProtectionIndicator;
			}
			set
			{
				if ((this._NameAndAddressProtectionIndicator != value))
				{
					this.OnNameAndAddressProtectionIndicatorChanging(value);
					this.SendPropertyChanging();
					this._NameAndAddressProtectionIndicator = value;
					this.SendPropertyChanged("NameAndAddressProtectionIndicator");
					this.OnNameAndAddressProtectionIndicatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumberProtection", DbType="Bit NOT NULL")]
		public bool TelephoneNumberProtection
		{
			get
			{
				return this._TelephoneNumberProtection;
			}
			set
			{
				if ((this._TelephoneNumberProtection != value))
				{
					this.OnTelephoneNumberProtectionChanging(value);
					this.SendPropertyChanging();
					this._TelephoneNumberProtection = value;
					this.SendPropertyChanged("TelephoneNumberProtection");
					this.OnTelephoneNumberProtectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResearchProtection", DbType="Bit NOT NULL")]
		public bool ResearchProtection
		{
			get
			{
				return this._ResearchProtection;
			}
			set
			{
				if ((this._ResearchProtection != value))
				{
					this.OnResearchProtectionChanging(value);
					this.SendPropertyChanging();
					this._ResearchProtection = value;
					this.SendPropertyChanged("ResearchProtection");
					this.OnResearchProtectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressNote", DbType="VarChar(50)")]
		public string AddressNote
		{
			get
			{
				return this._AddressNote;
			}
			set
			{
				if ((this._AddressNote != value))
				{
					this.OnAddressNoteChanging(value);
					this.SendPropertyChanging();
					this._AddressNote = value;
					this.SendPropertyChanged("AddressNote");
					this.OnAddressNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchMember", DbType="Bit NOT NULL")]
		public bool ChurchMember
		{
			get
			{
				return this._ChurchMember;
			}
			set
			{
				if ((this._ChurchMember != value))
				{
					this.OnChurchMemberChanging(value);
					this.SendPropertyChanging();
					this._ChurchMember = value;
					this.SendPropertyChanged("ChurchMember");
					this.OnChurchMemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_CprData", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.CprDatas.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.CprDatas.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_CprData", Storage="_CountryRef", ThisKey="NationalityCountryRefId", OtherKey="CountryRefId", IsForeignKey=true)]
		public CountryRef NationalityCountryRef
		{
			get
			{
				return this._CountryRef.Entity;
			}
			set
			{
				CountryRef previousValue = this._CountryRef.Entity;
				if (((previousValue != value) 
							|| (this._CountryRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryRef.Entity = null;
						previousValue.CprDatas.Remove(this);
					}
					this._CountryRef.Entity = value;
					if ((value != null))
					{
						value.CprDatas.Add(this);
						this._NationalityCountryRefId = value.CountryRefId;
					}
					else
					{
						this._NationalityCountryRefId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("NationalityCountryRef");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_CprData", Storage="_PersonAttribute", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PersonAttributes PersonAttributes
		{
			get
			{
				return this._PersonAttribute.Entity;
			}
			set
			{
				PersonAttributes previousValue = this._PersonAttribute.Entity;
				if (((previousValue != value) 
							|| (this._PersonAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonAttribute.Entity = null;
						previousValue.CprData = null;
					}
					this._PersonAttribute.Entity = value;
					if ((value != null))
					{
						value.CprData = this;
						this._PersonAttributesId = value.PersonAttributesId;
					}
					else
					{
						this._PersonAttributesId = default(System.Guid);
					}
					this.SendPropertyChanged("PersonAttributes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForeignCitizenCountry")]
	public partial class ForeignCitizenCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ForeignCitizenCountryId;
		
		private System.Guid _PersonAttributesId;
		
		private int _Ordinal;
		
		private bool _IsNationality;
		
		private System.Guid _CountryRefId;
		
		private EntityRef<CountryRef> _CountryRef;
		
		private EntityRef<ForeignCitizenData> _ForeignCitizenData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForeignCitizenCountryIdChanging(System.Guid value);
    partial void OnForeignCitizenCountryIdChanged();
    partial void OnPersonAttributesIdChanging(System.Guid value);
    partial void OnPersonAttributesIdChanged();
    partial void OnOrdinalChanging(int value);
    partial void OnOrdinalChanged();
    partial void OnIsNationalityChanging(bool value);
    partial void OnIsNationalityChanged();
    partial void OnCountryRefIdChanging(System.Guid value);
    partial void OnCountryRefIdChanged();
    #endregion
		
		public ForeignCitizenCountry()
		{
			this._CountryRef = default(EntityRef<CountryRef>);
			this._ForeignCitizenData = default(EntityRef<ForeignCitizenData>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForeignCitizenCountryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ForeignCitizenCountryId
		{
			get
			{
				return this._ForeignCitizenCountryId;
			}
			set
			{
				if ((this._ForeignCitizenCountryId != value))
				{
					this.OnForeignCitizenCountryIdChanging(value);
					this.SendPropertyChanging();
					this._ForeignCitizenCountryId = value;
					this.SendPropertyChanged("ForeignCitizenCountryId");
					this.OnForeignCitizenCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAttributesId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonAttributesId
		{
			get
			{
				return this._PersonAttributesId;
			}
			set
			{
				if ((this._PersonAttributesId != value))
				{
					if (this._ForeignCitizenData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAttributesIdChanging(value);
					this.SendPropertyChanging();
					this._PersonAttributesId = value;
					this.SendPropertyChanged("PersonAttributesId");
					this.OnPersonAttributesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ordinal", DbType="Int NOT NULL")]
		public int Ordinal
		{
			get
			{
				return this._Ordinal;
			}
			set
			{
				if ((this._Ordinal != value))
				{
					this.OnOrdinalChanging(value);
					this.SendPropertyChanging();
					this._Ordinal = value;
					this.SendPropertyChanged("Ordinal");
					this.OnOrdinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNationality", DbType="Bit NOT NULL")]
		public bool IsNationality
		{
			get
			{
				return this._IsNationality;
			}
			set
			{
				if ((this._IsNationality != value))
				{
					this.OnIsNationalityChanging(value);
					this.SendPropertyChanging();
					this._IsNationality = value;
					this.SendPropertyChanged("IsNationality");
					this.OnIsNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryRefId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CountryRefId
		{
			get
			{
				return this._CountryRefId;
			}
			set
			{
				if ((this._CountryRefId != value))
				{
					if (this._CountryRef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryRefIdChanging(value);
					this.SendPropertyChanging();
					this._CountryRefId = value;
					this.SendPropertyChanged("CountryRefId");
					this.OnCountryRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_ForeignCitizenCountry", Storage="_CountryRef", ThisKey="CountryRefId", OtherKey="CountryRefId", IsForeignKey=true)]
		public CountryRef CountryRef
		{
			get
			{
				return this._CountryRef.Entity;
			}
			set
			{
				CountryRef previousValue = this._CountryRef.Entity;
				if (((previousValue != value) 
							|| (this._CountryRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryRef.Entity = null;
						previousValue.ForeignCitizenCountries.Remove(this);
					}
					this._CountryRef.Entity = value;
					if ((value != null))
					{
						value.ForeignCitizenCountries.Add(this);
						this._CountryRefId = value.CountryRefId;
					}
					else
					{
						this._CountryRefId = default(System.Guid);
					}
					this.SendPropertyChanged("CountryRef");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForeignCitizenData_ForeignCitizenCountry", Storage="_ForeignCitizenData", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ForeignCitizenData ForeignCitizenData
		{
			get
			{
				return this._ForeignCitizenData.Entity;
			}
			set
			{
				ForeignCitizenData previousValue = this._ForeignCitizenData.Entity;
				if (((previousValue != value) 
							|| (this._ForeignCitizenData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForeignCitizenData.Entity = null;
						previousValue.ForeignCitizenCountries.Remove(this);
					}
					this._ForeignCitizenData.Entity = value;
					if ((value != null))
					{
						value.ForeignCitizenCountries.Add(this);
						this._PersonAttributesId = value.PersonAttributesId;
					}
					else
					{
						this._PersonAttributesId = default(System.Guid);
					}
					this.SendPropertyChanged("ForeignCitizenData");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForeignCitizenData")]
	public partial class ForeignCitizenData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonAttributesId;
		
		private string _PersonIdentifier;
		
		private string _CivilRegistrationReplacementIdentifier;
		
		private System.Nullable<System.Guid> _BirthCountryRefId;
		
		private EntitySet<ForeignCitizenCountry> _ForeignCitizenCountries;
		
		private EntityRef<CountryRef> _CountryRef;
		
		private EntityRef<PersonAttributes> _PersonAttribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonAttributesIdChanging(System.Guid value);
    partial void OnPersonAttributesIdChanged();
    partial void OnPersonIdentifierChanging(string value);
    partial void OnPersonIdentifierChanged();
    partial void OnCivilRegistrationReplacementIdentifierChanging(string value);
    partial void OnCivilRegistrationReplacementIdentifierChanged();
    partial void OnBirthCountryRefIdChanging(System.Nullable<System.Guid> value);
    partial void OnBirthCountryRefIdChanged();
    #endregion
		
		public ForeignCitizenData()
		{
			this._ForeignCitizenCountries = new EntitySet<ForeignCitizenCountry>(new Action<ForeignCitizenCountry>(this.attach_ForeignCitizenCountries), new Action<ForeignCitizenCountry>(this.detach_ForeignCitizenCountries));
			this._CountryRef = default(EntityRef<CountryRef>);
			this._PersonAttribute = default(EntityRef<PersonAttributes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAttributesId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonAttributesId
		{
			get
			{
				return this._PersonAttributesId;
			}
			set
			{
				if ((this._PersonAttributesId != value))
				{
					if (this._PersonAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAttributesIdChanging(value);
					this.SendPropertyChanging();
					this._PersonAttributesId = value;
					this.SendPropertyChanged("PersonAttributesId");
					this.OnPersonAttributesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonIdentifier", DbType="VarChar(50)")]
		public string PersonIdentifier
		{
			get
			{
				return this._PersonIdentifier;
			}
			set
			{
				if ((this._PersonIdentifier != value))
				{
					this.OnPersonIdentifierChanging(value);
					this.SendPropertyChanging();
					this._PersonIdentifier = value;
					this.SendPropertyChanged("PersonIdentifier");
					this.OnPersonIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CivilRegistrationReplacementIdentifier", DbType="VarChar(50)")]
		public string CivilRegistrationReplacementIdentifier
		{
			get
			{
				return this._CivilRegistrationReplacementIdentifier;
			}
			set
			{
				if ((this._CivilRegistrationReplacementIdentifier != value))
				{
					this.OnCivilRegistrationReplacementIdentifierChanging(value);
					this.SendPropertyChanging();
					this._CivilRegistrationReplacementIdentifier = value;
					this.SendPropertyChanged("CivilRegistrationReplacementIdentifier");
					this.OnCivilRegistrationReplacementIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCountryRefId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> BirthCountryRefId
		{
			get
			{
				return this._BirthCountryRefId;
			}
			set
			{
				if ((this._BirthCountryRefId != value))
				{
					if (this._CountryRef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBirthCountryRefIdChanging(value);
					this.SendPropertyChanging();
					this._BirthCountryRefId = value;
					this.SendPropertyChanged("BirthCountryRefId");
					this.OnBirthCountryRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForeignCitizenData_ForeignCitizenCountry", Storage="_ForeignCitizenCountries", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId")]
		public EntitySet<ForeignCitizenCountry> ForeignCitizenCountries
		{
			get
			{
				return this._ForeignCitizenCountries;
			}
			set
			{
				this._ForeignCitizenCountries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryRef_ForeignCitizenData", Storage="_CountryRef", ThisKey="BirthCountryRefId", OtherKey="CountryRefId", IsForeignKey=true)]
		public CountryRef BirthCountryRef
		{
			get
			{
				return this._CountryRef.Entity;
			}
			set
			{
				CountryRef previousValue = this._CountryRef.Entity;
				if (((previousValue != value) 
							|| (this._CountryRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryRef.Entity = null;
						previousValue.ForeignCitizenDatas.Remove(this);
					}
					this._CountryRef.Entity = value;
					if ((value != null))
					{
						value.ForeignCitizenDatas.Add(this);
						this._BirthCountryRefId = value.CountryRefId;
					}
					else
					{
						this._BirthCountryRefId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("BirthCountryRef");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_ForeignCitizenData", Storage="_PersonAttribute", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PersonAttributes PersonAttributes
		{
			get
			{
				return this._PersonAttribute.Entity;
			}
			set
			{
				PersonAttributes previousValue = this._PersonAttribute.Entity;
				if (((previousValue != value) 
							|| (this._PersonAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonAttribute.Entity = null;
						previousValue.ForeignCitizenData = null;
					}
					this._PersonAttribute.Entity = value;
					if ((value != null))
					{
						value.ForeignCitizenData = this;
						this._PersonAttributesId = value.PersonAttributesId;
					}
					else
					{
						this._PersonAttributesId = default(System.Guid);
					}
					this.SendPropertyChanged("PersonAttributes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForeignCitizenCountries(ForeignCitizenCountry entity)
		{
			this.SendPropertyChanging();
			entity.ForeignCitizenData = this;
		}
		
		private void detach_ForeignCitizenCountries(ForeignCitizenCountry entity)
		{
			this.SendPropertyChanging();
			entity.ForeignCitizenData = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnknownCitizenData")]
	public partial class UnknownCitizenData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonAttributesId;
		
		private string _CprNumber;
		
		private EntityRef<PersonAttributes> _PersonAttribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonAttributesIdChanging(System.Guid value);
    partial void OnPersonAttributesIdChanged();
    partial void OnCprNumberChanging(string value);
    partial void OnCprNumberChanged();
    #endregion
		
		public UnknownCitizenData()
		{
			this._PersonAttribute = default(EntityRef<PersonAttributes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAttributesId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonAttributesId
		{
			get
			{
				return this._PersonAttributesId;
			}
			set
			{
				if ((this._PersonAttributesId != value))
				{
					if (this._PersonAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAttributesIdChanging(value);
					this.SendPropertyChanging();
					this._PersonAttributesId = value;
					this.SendPropertyChanged("PersonAttributesId");
					this.OnPersonAttributesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CprNumber", DbType="VarChar(50)")]
		public string CprNumber
		{
			get
			{
				return this._CprNumber;
			}
			set
			{
				if ((this._CprNumber != value))
				{
					this.OnCprNumberChanging(value);
					this.SendPropertyChanging();
					this._CprNumber = value;
					this.SendPropertyChanged("CprNumber");
					this.OnCprNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_UnknownCitizenData", Storage="_PersonAttribute", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsForeignKey=true)]
		public PersonAttributes PersonAttributes
		{
			get
			{
				return this._PersonAttribute.Entity;
			}
			set
			{
				PersonAttributes previousValue = this._PersonAttribute.Entity;
				if (((previousValue != value) 
							|| (this._PersonAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonAttribute.Entity = null;
						previousValue.UnknownCitizenData = null;
					}
					this._PersonAttribute.Entity = value;
					if ((value != null))
					{
						value.UnknownCitizenData = this;
						this._PersonAttributesId = value.PersonAttributesId;
					}
					else
					{
						this._PersonAttributesId = default(System.Guid);
					}
					this.SendPropertyChanged("PersonAttributes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthInformation")]
	public partial class HealthInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonAttributesId;
		
		private string _PhysicianName;
		
		private string _PhysicianProviderNumber;
		
		private string _HealthInsuranceGroupCode;
		
		private EntityRef<PersonAttributes> _PersonAttribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonAttributesIdChanging(System.Guid value);
    partial void OnPersonAttributesIdChanged();
    partial void OnPhysicianNameChanging(string value);
    partial void OnPhysicianNameChanged();
    partial void OnPhysicianProviderNumberChanging(string value);
    partial void OnPhysicianProviderNumberChanged();
    partial void OnHealthInsuranceGroupCodeChanging(string value);
    partial void OnHealthInsuranceGroupCodeChanged();
    #endregion
		
		public HealthInformation()
		{
			this._PersonAttribute = default(EntityRef<PersonAttributes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAttributesId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonAttributesId
		{
			get
			{
				return this._PersonAttributesId;
			}
			set
			{
				if ((this._PersonAttributesId != value))
				{
					if (this._PersonAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAttributesIdChanging(value);
					this.SendPropertyChanging();
					this._PersonAttributesId = value;
					this.SendPropertyChanged("PersonAttributesId");
					this.OnPersonAttributesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicianName", DbType="VarChar(200)")]
		public string PhysicianName
		{
			get
			{
				return this._PhysicianName;
			}
			set
			{
				if ((this._PhysicianName != value))
				{
					this.OnPhysicianNameChanging(value);
					this.SendPropertyChanging();
					this._PhysicianName = value;
					this.SendPropertyChanged("PhysicianName");
					this.OnPhysicianNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicianProviderNumber", DbType="VarChar(50)")]
		public string PhysicianProviderNumber
		{
			get
			{
				return this._PhysicianProviderNumber;
			}
			set
			{
				if ((this._PhysicianProviderNumber != value))
				{
					this.OnPhysicianProviderNumberChanging(value);
					this.SendPropertyChanging();
					this._PhysicianProviderNumber = value;
					this.SendPropertyChanged("PhysicianProviderNumber");
					this.OnPhysicianProviderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthInsuranceGroupCode", DbType="VarChar(50)")]
		public string HealthInsuranceGroupCode
		{
			get
			{
				return this._HealthInsuranceGroupCode;
			}
			set
			{
				if ((this._HealthInsuranceGroupCode != value))
				{
					this.OnHealthInsuranceGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._HealthInsuranceGroupCode = value;
					this.SendPropertyChanged("HealthInsuranceGroupCode");
					this.OnHealthInsuranceGroupCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_HealthInformation", Storage="_PersonAttribute", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsForeignKey=true)]
		public PersonAttributes PersonAttributes
		{
			get
			{
				return this._PersonAttribute.Entity;
			}
			set
			{
				PersonAttributes previousValue = this._PersonAttribute.Entity;
				if (((previousValue != value) 
							|| (this._PersonAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonAttribute.Entity = null;
						previousValue.HealthInformation = null;
					}
					this._PersonAttribute.Entity = value;
					if ((value != null))
					{
						value.HealthInformation = this;
						this._PersonAttributesId = value.PersonAttributesId;
					}
					else
					{
						this._PersonAttributesId = default(System.Guid);
					}
					this.SendPropertyChanged("PersonAttributes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonName")]
	public partial class PersonName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonAttributesId;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private EntityRef<PersonProperties> _PersonProperties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonAttributesIdChanging(System.Guid value);
    partial void OnPersonAttributesIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public PersonName()
		{
			this._PersonProperties = default(EntityRef<PersonProperties>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAttributesId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonAttributesId
		{
			get
			{
				return this._PersonAttributesId;
			}
			set
			{
				if ((this._PersonAttributesId != value))
				{
					if (this._PersonProperties.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAttributesIdChanging(value);
					this.SendPropertyChanging();
					this._PersonAttributesId = value;
					this.SendPropertyChanged("PersonAttributesId");
					this.OnPersonAttributesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonProperties_PersonName", Storage="_PersonProperties", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PersonProperties PersonProperties
		{
			get
			{
				return this._PersonProperties.Entity;
			}
			set
			{
				PersonProperties previousValue = this._PersonProperties.Entity;
				if (((previousValue != value) 
							|| (this._PersonProperties.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonProperties.Entity = null;
						previousValue.PersonName = null;
					}
					this._PersonProperties.Entity = value;
					if ((value != null))
					{
						value.PersonName = this;
						this._PersonAttributesId = value.PersonAttributesId;
					}
					else
					{
						this._PersonAttributesId = default(System.Guid);
					}
					this.SendPropertyChanged("PersonProperties");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonProperties")]
	public partial class PersonProperties : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonAttributesId;
		
		private string _NickName;
		
		private string _NameNoteText;
		
		private string _AddressingName;
		
		private int _GenderId;
		
		private System.DateTime _BirthDate;
		
		private string _BirthPlace;
		
		private string _BirthRegistrationAuthority;
		
		private System.Nullable<System.Guid> _ContactChannelId;
		
		private System.Nullable<System.Guid> _NextOfKinContactChannelId;
		
		private System.Nullable<System.Guid> _OtherAddressId;
		
		private EntityRef<PersonName> _PersonName;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<ContactChannel> _ContactChannel;
		
		private EntityRef<ContactChannel> _ContactChannel1;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<PersonAttributes> _PersonAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonAttributesIdChanging(System.Guid value);
    partial void OnPersonAttributesIdChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnNameNoteTextChanging(string value);
    partial void OnNameNoteTextChanged();
    partial void OnAddressingNameChanging(string value);
    partial void OnAddressingNameChanged();
    partial void OnGenderIdChanging(int value);
    partial void OnGenderIdChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnBirthPlaceChanging(string value);
    partial void OnBirthPlaceChanged();
    partial void OnBirthRegistrationAuthorityChanging(string value);
    partial void OnBirthRegistrationAuthorityChanged();
    partial void OnContactChannelIdChanging(System.Nullable<System.Guid> value);
    partial void OnContactChannelIdChanged();
    partial void OnNextOfKinContactChannelIdChanging(System.Nullable<System.Guid> value);
    partial void OnNextOfKinContactChannelIdChanged();
    partial void OnOtherAddressIdChanging(System.Nullable<System.Guid> value);
    partial void OnOtherAddressIdChanged();
    #endregion
		
		public PersonProperties()
		{
			this._PersonName = default(EntityRef<PersonName>);
			this._Address = default(EntityRef<Address>);
			this._ContactChannel = default(EntityRef<ContactChannel>);
			this._ContactChannel1 = default(EntityRef<ContactChannel>);
			this._Gender = default(EntityRef<Gender>);
			this._PersonAttributes = default(EntityRef<PersonAttributes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAttributesId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonAttributesId
		{
			get
			{
				return this._PersonAttributesId;
			}
			set
			{
				if ((this._PersonAttributesId != value))
				{
					if (this._PersonAttributes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAttributesIdChanging(value);
					this.SendPropertyChanging();
					this._PersonAttributesId = value;
					this.SendPropertyChanged("PersonAttributesId");
					this.OnPersonAttributesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="VarChar(50)")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameNoteText", DbType="VarChar(50)")]
		public string NameNoteText
		{
			get
			{
				return this._NameNoteText;
			}
			set
			{
				if ((this._NameNoteText != value))
				{
					this.OnNameNoteTextChanging(value);
					this.SendPropertyChanging();
					this._NameNoteText = value;
					this.SendPropertyChanged("NameNoteText");
					this.OnNameNoteTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressingName", DbType="VarChar(50)")]
		public string AddressingName
		{
			get
			{
				return this._AddressingName;
			}
			set
			{
				if ((this._AddressingName != value))
				{
					this.OnAddressingNameChanging(value);
					this.SendPropertyChanging();
					this._AddressingName = value;
					this.SendPropertyChanged("AddressingName");
					this.OnAddressingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderId", DbType="Int NOT NULL")]
		public int GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthPlace", DbType="VarChar(132)")]
		public string BirthPlace
		{
			get
			{
				return this._BirthPlace;
			}
			set
			{
				if ((this._BirthPlace != value))
				{
					this.OnBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._BirthPlace = value;
					this.SendPropertyChanged("BirthPlace");
					this.OnBirthPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthRegistrationAuthority", DbType="VarChar(60)")]
		public string BirthRegistrationAuthority
		{
			get
			{
				return this._BirthRegistrationAuthority;
			}
			set
			{
				if ((this._BirthRegistrationAuthority != value))
				{
					this.OnBirthRegistrationAuthorityChanging(value);
					this.SendPropertyChanging();
					this._BirthRegistrationAuthority = value;
					this.SendPropertyChanged("BirthRegistrationAuthority");
					this.OnBirthRegistrationAuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactChannelId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ContactChannelId
		{
			get
			{
				return this._ContactChannelId;
			}
			set
			{
				if ((this._ContactChannelId != value))
				{
					if (this._ContactChannel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ContactChannelId = value;
					this.SendPropertyChanged("ContactChannelId");
					this.OnContactChannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextOfKinContactChannelId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NextOfKinContactChannelId
		{
			get
			{
				return this._NextOfKinContactChannelId;
			}
			set
			{
				if ((this._NextOfKinContactChannelId != value))
				{
					if (this._ContactChannel1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextOfKinContactChannelIdChanging(value);
					this.SendPropertyChanging();
					this._NextOfKinContactChannelId = value;
					this.SendPropertyChanged("NextOfKinContactChannelId");
					this.OnNextOfKinContactChannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherAddressId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OtherAddressId
		{
			get
			{
				return this._OtherAddressId;
			}
			set
			{
				if ((this._OtherAddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOtherAddressIdChanging(value);
					this.SendPropertyChanging();
					this._OtherAddressId = value;
					this.SendPropertyChanged("OtherAddressId");
					this.OnOtherAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonProperties_PersonName", Storage="_PersonName", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsUnique=true, IsForeignKey=false)]
		public PersonName PersonName
		{
			get
			{
				return this._PersonName.Entity;
			}
			set
			{
				PersonName previousValue = this._PersonName.Entity;
				if (((previousValue != value) 
							|| (this._PersonName.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonName.Entity = null;
						previousValue.PersonProperties = null;
					}
					this._PersonName.Entity = value;
					if ((value != null))
					{
						value.PersonProperties = this;
					}
					this.SendPropertyChanged("PersonName");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_PersonProperties", Storage="_Address", ThisKey="OtherAddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address OtherAddress
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.PersonProperties.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.PersonProperties.Add(this);
						this._OtherAddressId = value.AddressId;
					}
					else
					{
						this._OtherAddressId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("OtherAddress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactChannel_PersonProperties", Storage="_ContactChannel", ThisKey="ContactChannelId", OtherKey="ContactChannelId", IsForeignKey=true)]
		public ContactChannel ContactChannel
		{
			get
			{
				return this._ContactChannel.Entity;
			}
			set
			{
				ContactChannel previousValue = this._ContactChannel.Entity;
				if (((previousValue != value) 
							|| (this._ContactChannel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactChannel.Entity = null;
						previousValue.PersonProperties.Remove(this);
					}
					this._ContactChannel.Entity = value;
					if ((value != null))
					{
						value.PersonProperties.Add(this);
						this._ContactChannelId = value.ContactChannelId;
					}
					else
					{
						this._ContactChannelId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ContactChannel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactChannel_PersonProperties1", Storage="_ContactChannel1", ThisKey="NextOfKinContactChannelId", OtherKey="ContactChannelId", IsForeignKey=true)]
		public ContactChannel NextOfKinContactChannel
		{
			get
			{
				return this._ContactChannel1.Entity;
			}
			set
			{
				ContactChannel previousValue = this._ContactChannel1.Entity;
				if (((previousValue != value) 
							|| (this._ContactChannel1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactChannel1.Entity = null;
						previousValue.PersonProperties1.Remove(this);
					}
					this._ContactChannel1.Entity = value;
					if ((value != null))
					{
						value.PersonProperties1.Add(this);
						this._NextOfKinContactChannelId = value.ContactChannelId;
					}
					else
					{
						this._NextOfKinContactChannelId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("NextOfKinContactChannel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_PersonProperties", Storage="_Gender", ThisKey="GenderId", OtherKey="GenderId", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.PersonProperties.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.PersonProperties.Add(this);
						this._GenderId = value.GenderId;
					}
					else
					{
						this._GenderId = default(int);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAttributes_PersonProperties", Storage="_PersonAttributes", ThisKey="PersonAttributesId", OtherKey="PersonAttributesId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PersonAttributes PersonAttributes
		{
			get
			{
				return this._PersonAttributes.Entity;
			}
			set
			{
				PersonAttributes previousValue = this._PersonAttributes.Entity;
				if (((previousValue != value) 
							|| (this._PersonAttributes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonAttributes.Entity = null;
						previousValue.PersonProperties = null;
					}
					this._PersonAttributes.Entity = value;
					if ((value != null))
					{
						value.PersonProperties = this;
						this._PersonAttributesId = value.PersonAttributesId;
					}
					else
					{
						this._PersonAttributesId = default(System.Guid);
					}
					this.SendPropertyChanged("PersonAttributes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
