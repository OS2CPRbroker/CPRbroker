#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CprBroker.Data.Part
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PartCopy")]
	public partial class PartDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPersonMapping(CprBroker.Data.Part.PersonMapping instance);
    partial void UpdatePersonMapping(CprBroker.Data.Part.PersonMapping instance);
    partial void DeletePersonMapping(CprBroker.Data.Part.PersonMapping instance);
    partial void InsertLifecycleStatus(CprBroker.Data.Part.LifecycleStatus instance);
    partial void UpdateLifecycleStatus(CprBroker.Data.Part.LifecycleStatus instance);
    partial void DeleteLifecycleStatus(CprBroker.Data.Part.LifecycleStatus instance);
    partial void InsertPerson(CprBroker.Data.Part.Person instance);
    partial void UpdatePerson(CprBroker.Data.Part.Person instance);
    partial void DeletePerson(CprBroker.Data.Part.Person instance);
    partial void InsertActorRef(CprBroker.Data.Part.ActorRef instance);
    partial void UpdateActorRef(CprBroker.Data.Part.ActorRef instance);
    partial void DeleteActorRef(CprBroker.Data.Part.ActorRef instance);
    partial void InsertPersonRegistration(CprBroker.Data.Part.PersonRegistration instance);
    partial void UpdatePersonRegistration(CprBroker.Data.Part.PersonRegistration instance);
    partial void DeletePersonRegistration(CprBroker.Data.Part.PersonRegistration instance);
    #endregion
		
		public PartDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CprBroker.Data.Part.PersonMapping> PersonMappings
		{
			get
			{
				return this.GetTable<CprBroker.Data.Part.PersonMapping>();
			}
		}
		
		public System.Data.Linq.Table<CprBroker.Data.Part.LifecycleStatus> LifecycleStatus
		{
			get
			{
				return this.GetTable<CprBroker.Data.Part.LifecycleStatus>();
			}
		}
		
		public System.Data.Linq.Table<CprBroker.Data.Part.Person> Persons
		{
			get
			{
				return this.GetTable<CprBroker.Data.Part.Person>();
			}
		}
		
		public System.Data.Linq.Table<CprBroker.Data.Part.ActorRef> ActorRefs
		{
			get
			{
				return this.GetTable<CprBroker.Data.Part.ActorRef>();
			}
		}
		
		public System.Data.Linq.Table<CprBroker.Data.Part.PersonRegistration> PersonRegistrations
		{
			get
			{
				return this.GetTable<CprBroker.Data.Part.PersonRegistration>();
			}
		}
	}
}
namespace CprBroker.Data.Part
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonMapping")]
	public partial class PersonMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UUID;
		
		private string _CprNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUUIDChanging(System.Guid value);
    partial void OnUUIDChanged();
    partial void OnCprNumberChanging(string value);
    partial void OnCprNumberChanged();
    #endregion
		
		public PersonMapping()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UUID
		{
			get
			{
				return this._UUID;
			}
			set
			{
				if ((this._UUID != value))
				{
					this.OnUUIDChanging(value);
					this.SendPropertyChanging();
					this._UUID = value;
					this.SendPropertyChanged("UUID");
					this.OnUUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CprNumber", DbType="VarChar(10)", CanBeNull=false)]
		public string CprNumber
		{
			get
			{
				return this._CprNumber;
			}
			set
			{
				if ((this._CprNumber != value))
				{
					this.OnCprNumberChanging(value);
					this.SendPropertyChanging();
					this._CprNumber = value;
					this.SendPropertyChanged("CprNumber");
					this.OnCprNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LifecycleStatus")]
	public partial class LifecycleStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LifecycleStatusId;
		
		private string _LifecycleStatusName;
		
		private EntitySet<PersonRegistration> _PersonRegistrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLifecycleStatusIdChanging(int value);
    partial void OnLifecycleStatusIdChanged();
    partial void OnLifecycleStatusNameChanging(string value);
    partial void OnLifecycleStatusNameChanged();
    #endregion
		
		public LifecycleStatus()
		{
			this._PersonRegistrations = new EntitySet<PersonRegistration>(new Action<PersonRegistration>(this.attach_PersonRegistrations), new Action<PersonRegistration>(this.detach_PersonRegistrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifecycleStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LifecycleStatusId
		{
			get
			{
				return this._LifecycleStatusId;
			}
			set
			{
				if ((this._LifecycleStatusId != value))
				{
					this.OnLifecycleStatusIdChanging(value);
					this.SendPropertyChanging();
					this._LifecycleStatusId = value;
					this.SendPropertyChanged("LifecycleStatusId");
					this.OnLifecycleStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifecycleStatusName", DbType="VarChar(50)")]
		public string LifecycleStatusName
		{
			get
			{
				return this._LifecycleStatusName;
			}
			set
			{
				if ((this._LifecycleStatusName != value))
				{
					this.OnLifecycleStatusNameChanging(value);
					this.SendPropertyChanging();
					this._LifecycleStatusName = value;
					this.SendPropertyChanged("LifecycleStatusName");
					this.OnLifecycleStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LifecycleStatus_PersonRegistration", Storage="_PersonRegistrations", ThisKey="LifecycleStatusId", OtherKey="LifecycleStatusId")]
		public EntitySet<PersonRegistration> PersonRegistrations
		{
			get
			{
				return this._PersonRegistrations;
			}
			set
			{
				this._PersonRegistrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.LifecycleStatus = this;
		}
		
		private void detach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.LifecycleStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UUID;
		
		private string _UserInterfaceKeyText;
		
		private EntitySet<PersonRegistration> _PersonRegistrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUUIDChanging(System.Guid value);
    partial void OnUUIDChanged();
    partial void OnUserInterfaceKeyTextChanging(string value);
    partial void OnUserInterfaceKeyTextChanged();
    #endregion
		
		public Person()
		{
			this._PersonRegistrations = new EntitySet<PersonRegistration>(new Action<PersonRegistration>(this.attach_PersonRegistrations), new Action<PersonRegistration>(this.detach_PersonRegistrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UUID
		{
			get
			{
				return this._UUID;
			}
			set
			{
				if ((this._UUID != value))
				{
					this.OnUUIDChanging(value);
					this.SendPropertyChanging();
					this._UUID = value;
					this.SendPropertyChanged("UUID");
					this.OnUUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInterfaceKeyText", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserInterfaceKeyText
		{
			get
			{
				return this._UserInterfaceKeyText;
			}
			set
			{
				if ((this._UserInterfaceKeyText != value))
				{
					this.OnUserInterfaceKeyTextChanging(value);
					this.SendPropertyChanging();
					this._UserInterfaceKeyText = value;
					this.SendPropertyChanged("UserInterfaceKeyText");
					this.OnUserInterfaceKeyTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRegistration", Storage="_PersonRegistrations", ThisKey="UUID", OtherKey="UUID")]
		public EntitySet<PersonRegistration> PersonRegistrations
		{
			get
			{
				return this._PersonRegistrations;
			}
			set
			{
				this._PersonRegistrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActorRef")]
	public partial class ActorRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ActorRefId;
		
		private int _Type;
		
		private string _Value;
		
		private EntitySet<PersonRegistration> _PersonRegistrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorRefIdChanging(System.Guid value);
    partial void OnActorRefIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ActorRef()
		{
			this._PersonRegistrations = new EntitySet<PersonRegistration>(new Action<PersonRegistration>(this.attach_PersonRegistrations), new Action<PersonRegistration>(this.detach_PersonRegistrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorRefId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ActorRefId
		{
			get
			{
				return this._ActorRefId;
			}
			set
			{
				if ((this._ActorRefId != value))
				{
					this.OnActorRefIdChanging(value);
					this.SendPropertyChanging();
					this._ActorRefId = value;
					this.SendPropertyChanged("ActorRefId");
					this.OnActorRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActorRef_PersonRegistration", Storage="_PersonRegistrations", ThisKey="ActorRefId", OtherKey="ActorRefId")]
		public EntitySet<PersonRegistration> PersonRegistrations
		{
			get
			{
				return this._PersonRegistrations;
			}
			set
			{
				this._PersonRegistrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.ActorRef = this;
		}
		
		private void detach_PersonRegistrations(PersonRegistration entity)
		{
			this.SendPropertyChanging();
			entity.ActorRef = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonRegistration")]
	public partial class PersonRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonRegistrationId;
		
		private System.Guid _UUID;
		
		private System.Nullable<System.Guid> _ActorRefId;
		
		private System.DateTime _RegistrationDate;
		
		private System.DateTime _BrokerUpdateDate;
		
		private string _CommentText;
		
		private int _LifecycleStatusId;
		
		private System.Xml.Linq.XElement _Contents;
		
		private System.Xml.Linq.XElement _SourceObjects;
		
		private EntityRef<ActorRef> _ActorRef;
		
		private EntityRef<LifecycleStatus> _LifecycleStatus;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonRegistrationIdChanging(System.Guid value);
    partial void OnPersonRegistrationIdChanged();
    partial void OnUUIDChanging(System.Guid value);
    partial void OnUUIDChanged();
    partial void OnActorRefIdChanging(System.Nullable<System.Guid> value);
    partial void OnActorRefIdChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnBrokerUpdateDateChanging(System.DateTime value);
    partial void OnBrokerUpdateDateChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnLifecycleStatusIdChanging(int value);
    partial void OnLifecycleStatusIdChanged();
    partial void OnContentsChanging(System.Xml.Linq.XElement value);
    partial void OnContentsChanged();
    partial void OnSourceObjectsChanging(System.Xml.Linq.XElement value);
    partial void OnSourceObjectsChanged();
    #endregion
		
		public PersonRegistration()
		{
			this._ActorRef = default(EntityRef<ActorRef>);
			this._LifecycleStatus = default(EntityRef<LifecycleStatus>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonRegistrationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonRegistrationId
		{
			get
			{
				return this._PersonRegistrationId;
			}
			set
			{
				if ((this._PersonRegistrationId != value))
				{
					this.OnPersonRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._PersonRegistrationId = value;
					this.SendPropertyChanged("PersonRegistrationId");
					this.OnPersonRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UUID
		{
			get
			{
				return this._UUID;
			}
			set
			{
				if ((this._UUID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUUIDChanging(value);
					this.SendPropertyChanging();
					this._UUID = value;
					this.SendPropertyChanged("UUID");
					this.OnUUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorRefId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ActorRefId
		{
			get
			{
				return this._ActorRefId;
			}
			set
			{
				if ((this._ActorRefId != value))
				{
					if (this._ActorRef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorRefIdChanging(value);
					this.SendPropertyChanging();
					this._ActorRefId = value;
					this.SendPropertyChanged("ActorRefId");
					this.OnActorRefIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerUpdateDate", DbType="DateTime NOT NULL")]
		public System.DateTime BrokerUpdateDate
		{
			get
			{
				return this._BrokerUpdateDate;
			}
			set
			{
				if ((this._BrokerUpdateDate != value))
				{
					this.OnBrokerUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._BrokerUpdateDate = value;
					this.SendPropertyChanged("BrokerUpdateDate");
					this.OnBrokerUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="VarChar(50)")]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifecycleStatusId", DbType="Int NOT NULL")]
		public int LifecycleStatusId
		{
			get
			{
				return this._LifecycleStatusId;
			}
			set
			{
				if ((this._LifecycleStatusId != value))
				{
					if (this._LifecycleStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLifecycleStatusIdChanging(value);
					this.SendPropertyChanging();
					this._LifecycleStatusId = value;
					this.SendPropertyChanged("LifecycleStatusId");
					this.OnLifecycleStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceObjects", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement SourceObjects
		{
			get
			{
				return this._SourceObjects;
			}
			set
			{
				if ((this._SourceObjects != value))
				{
					this.OnSourceObjectsChanging(value);
					this.SendPropertyChanging();
					this._SourceObjects = value;
					this.SendPropertyChanged("SourceObjects");
					this.OnSourceObjectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActorRef_PersonRegistration", Storage="_ActorRef", ThisKey="ActorRefId", OtherKey="ActorRefId", IsForeignKey=true)]
		public ActorRef ActorRef
		{
			get
			{
				return this._ActorRef.Entity;
			}
			set
			{
				ActorRef previousValue = this._ActorRef.Entity;
				if (((previousValue != value) 
							|| (this._ActorRef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActorRef.Entity = null;
						previousValue.PersonRegistrations.Remove(this);
					}
					this._ActorRef.Entity = value;
					if ((value != null))
					{
						value.PersonRegistrations.Add(this);
						this._ActorRefId = value.ActorRefId;
					}
					else
					{
						this._ActorRefId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ActorRef");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LifecycleStatus_PersonRegistration", Storage="_LifecycleStatus", ThisKey="LifecycleStatusId", OtherKey="LifecycleStatusId", IsForeignKey=true)]
		public LifecycleStatus LifecycleStatus
		{
			get
			{
				return this._LifecycleStatus.Entity;
			}
			set
			{
				LifecycleStatus previousValue = this._LifecycleStatus.Entity;
				if (((previousValue != value) 
							|| (this._LifecycleStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LifecycleStatus.Entity = null;
						previousValue.PersonRegistrations.Remove(this);
					}
					this._LifecycleStatus.Entity = value;
					if ((value != null))
					{
						value.PersonRegistrations.Add(this);
						this._LifecycleStatusId = value.LifecycleStatusId;
					}
					else
					{
						this._LifecycleStatusId = default(int);
					}
					this.SendPropertyChanged("LifecycleStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRegistration", Storage="_Person", ThisKey="UUID", OtherKey="UUID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonRegistrations.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonRegistrations.Add(this);
						this._UUID = value.UUID;
					}
					else
					{
						this._UUID = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
