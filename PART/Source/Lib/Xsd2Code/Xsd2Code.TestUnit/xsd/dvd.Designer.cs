// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.5.0.14929
//    <NameSpace>Xsd2Code.TestUnit</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>True</TrackingChangesEnable><GenTrackingClasses>True</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Xsd2Code.TestUnit
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Specialized;
    using System.Runtime.Serialization;
    using System.Collections.ObjectModel;
    using System.Reflection;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    #region PropertyValueState class
    public class PropertyValueState
    {

        public string PropertyName { get; set; }
        public object OriginalValue { get; set; }
        public object CurrentValue { get; set; }
        public ObjectState State { get; set; }
    }
    #endregion

    #region ObjectStateChangingEventArgs class
    public class ObjectStateChangingEventArgs : EventArgs
    {

        public ObjectState NewState { get; set; }
    }
    #endregion

    #region ObjectList class
    public class ObjectList : List<object>
    {
    }
    #endregion

    #region ObjectState enum
    public enum ObjectState
    {

        Unchanged,

        Added,

        Modified,

        Deleted,
    }
    #endregion

    #region NotifyTrackableCollectionChangedEventHandler class
    public delegate void NotifyTrackableCollectionChangedEventHandler(object sender, NotifyCollectionChangedEventArgs e, string propertyName);
    #endregion

    #region Tracking changes class
    public class ObjectChangeTracker : System.ComponentModel.INotifyPropertyChanged
    {

        #region  Fields
        private bool isDeserializingField;
        private ObjectState originalobjectStateField = ObjectState.Added;
        private bool isInitilizedField = false;
        private readonly ObservableCollection<PropertyValueState> changeSetsField = new ObservableCollection<PropertyValueState>();
        private Delegate collectionChangedDelegateField = null;

        private bool objectTrackingEnabledField;
        private readonly object trackedObjectField;

        private PropertyValueStatesDictionary propertyValueStatesFields;
        //private ValueStatesDictionary valueStatesField;

        private ObjectsAddedToCollectionProperties objectsAddedToCollectionsField = new ObjectsAddedToCollectionProperties();
        private ObjectsRemovedFromCollectionProperties objectsRemovedFromCollectionsField = new ObjectsRemovedFromCollectionProperties();
        private ObjectsOriginalFromCollectionProperties objectsOriginalFromCollectionsField = new ObjectsOriginalFromCollectionProperties();
        #endregion

        public ObjectChangeTracker(object trackedObject)
        {
            trackedObjectField = trackedObject;
        }

        #region Events

        public event EventHandler<ObjectStateChangingEventArgs> ObjectStateChanging;

        #endregion

        protected virtual void OnObjectStateChanging(ObjectState newState)
        {
            if (ObjectStateChanging != null)
            {
                ObjectStateChanging(this, new ObjectStateChangingEventArgs() { NewState = newState });
            }
        }

        /// <summary>
        /// indicate current state
        /// </summary>
        private ObjectState stateField;

        /// <summary>
        /// Gets the state.
        /// </summary>
        /// <value>The state.</value>
        public ObjectState State
        {
            get
            {
                return stateField;
            }
        }

        /// <summary>
        /// Updates the state of the change.
        /// </summary>
        private void UpdateChangeState()
        {
            ObjectState resultState = ObjectState.Added;
            this.changeSetsField.Clear();
            if (this.originalobjectStateField == ObjectState.Added)
            {
                if (stateField != ObjectState.Added)
                {
                    stateField = ObjectState.Added;
                    OnPropertyChanged("State");
                    OnObjectStateChanging(stateField);
                }
                return;
            }
            foreach (var propertyValuestate in PropertyValueStates)
            {
                if (propertyValuestate.Value.State == ObjectState.Modified)
                {
                    changeSetsField.Add(propertyValuestate.Value);
                    resultState = ObjectState.Modified;
                }
            }

            if (ObjectsRemovedFromCollectionProperties.Count > 0)
            {
                foreach (var objectsRemovedFromCollectionProperty in ObjectsRemovedFromCollectionProperties)
                {
                    foreach (var objectsRemoved in objectsRemovedFromCollectionProperty.Value)
                    {
                        changeSetsField.Add(new PropertyValueState() { PropertyName = objectsRemovedFromCollectionProperty.Key, State = ObjectState.Deleted, CurrentValue = objectsRemoved.ToString() });
                    }
                }
                resultState = ObjectState.Modified;
            }

            if (ObjectsAddedToCollectionProperties.Count > 0)
            {
                foreach (var objectsAddedFromCollectionProperty in ObjectsAddedToCollectionProperties)
                {
                    foreach (var objectsAdded in objectsAddedFromCollectionProperty.Value)
                    {
                        changeSetsField.Add(new PropertyValueState() { PropertyName = objectsAddedFromCollectionProperty.Key, State = ObjectState.Added, CurrentValue = objectsAdded.ToString() });
                    }
                }
                resultState = ObjectState.Modified;
            }

            if (resultState == ObjectState.Modified)
            {
                if (stateField != ObjectState.Modified)
                {
                    stateField = ObjectState.Modified;
                    OnPropertyChanged("State");
                    OnObjectStateChanging(stateField);
                }
                return;
            }
            if (stateField != this.originalobjectStateField)
            {
                stateField = this.originalobjectStateField;
                OnPropertyChanged("State");
                OnObjectStateChanging(stateField);
            }
            return;
        }

        public ObservableCollection<PropertyValueState> ChangeSets
        {
            get
            {
                return this.changeSetsField;
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether [change tracking enabled].
        /// </summary>
        /// <value>
        /// 	<c>true</c> if [change tracking enabled]; otherwise, <c>false</c>.
        /// </value>
        public bool ObjectTrackingEnabled
        {
            get { return objectTrackingEnabledField; }
        }

        /// <summary>
        /// Starts record changes.
        /// </summary>
        public void StartTracking()
        {
            objectTrackingEnabledField = true;
            ResetTracking();
        }

        /// <summary>
        /// Starts record changes.
        /// </summary>
        public void StartTracking(bool keepLastRecords)
        {
            objectTrackingEnabledField = true;
            if (!keepLastRecords)
                StartTracking();
        }

        /// <summary>
        /// Starts record changes.
        /// </summary>
        public void StopTracking()
        {
            objectTrackingEnabledField = false;
        }

        // Resets the ObjectChangeTracker to the Unchanged state and
        // clears the original values as well as the record of changes
        // to collection properties
        public void ResetTracking()
        {
            if (this.objectTrackingEnabledField)
            {
                this.originalobjectStateField = ObjectState.Unchanged;
                ResetOriginalValue();
                ObjectsAddedToCollectionProperties.Clear();
                ObjectsRemovedFromCollectionProperties.Clear();
                ObjectsOriginalFromCollectionProperties.Clear();
                InitOriginalValue();
                UpdateChangeState();
            }
        }
        /// <summary>
        /// Inits the original value.
        /// </summary>
        private void InitOriginalValue()
        {
            var type = trackedObjectField.GetType();
            var propertyies = type.GetProperties();

            if (!isInitilizedField)
            {
                foreach (var propertyInfo in propertyies)
                {
                    if (!propertyInfo.Name.Equals("ChangeTracker") && !propertyInfo.Name.Equals("Item"))
                    {
                        object o = propertyInfo.GetValue(trackedObjectField, null);
                        if (propertyInfo.PropertyType.Name.Contains("TrackableCollection"))
                        {
                            var eventInfo = propertyInfo.PropertyType.GetEvent("TrackableCollectionChanged");
                            if (eventInfo != null)
                            {
                                Type tDelegate = eventInfo.EventHandlerType;
                                if (tDelegate != null)
                                {
                                    if (collectionChangedDelegateField == null)
                                        collectionChangedDelegateField = Delegate.CreateDelegate(tDelegate, this, "TrackableCollectionChanged");

                                    // Get the "add" accessor of the event and invoke it late bound, passing in the delegate instance. This is equivalent
                                    // to using the += operator in C#. The instance on which the "add" accessor is invoked.
                                    MethodInfo addHandler = eventInfo.GetAddMethod();
                                    Object[] addHandlerArgs = { collectionChangedDelegateField };
                                    addHandler.Invoke(o, addHandlerArgs);
                                }
                            }

                            var collection = o as IEnumerable;
                            if (collection != null)
                            {
                                foreach (var item in collection)
                                {
                                    RecordOriginalToCollectionProperties(propertyInfo.Name, item);
                                }
                            }
                        }
                        else
                        {
                            RecordCurrentValue(propertyInfo.Name, o);
                        }
                    }
                }
                isInitilizedField = true;
            }
        }

        /// <summary>
        /// Resets the original value.
        /// </summary>
        private void ResetOriginalValue()
        {
            PropertyValueStates.Clear();
            //ValueStates.Clear();

            if (isInitilizedField)
            {
                var type = trackedObjectField.GetType();
                var propertyies = type.GetProperties();
                foreach (var propertyInfo in propertyies)
                {
                    if (!propertyInfo.Name.Equals("ChangeTracker") && !propertyInfo.Name.Equals("Item"))
                    {
                        object o = propertyInfo.GetValue(trackedObjectField, null);
                        if (propertyInfo.PropertyType.Name.Contains("TrackableCollection"))
                        {
                            var eventInfo = propertyInfo.PropertyType.GetEvent("TrackableCollectionChanged");
                            if (eventInfo != null)
                            {
                                Type tDelegate = eventInfo.EventHandlerType;
                                if (tDelegate != null)
                                {
                                    if (collectionChangedDelegateField != null)
                                    {
                                        // Get the "remove" accessor of the event and invoke it latebound, passing in the delegate instance. This is equivalent
                                        // to using the += operator in C#. The instance on which the "add" accessor is invoked.
                                        MethodInfo removeHandler = eventInfo.GetRemoveMethod();
                                        Object[] addHandlerArgs = { collectionChangedDelegateField };
                                        removeHandler.Invoke(o, addHandlerArgs);
                                    }
                                }
                            }
                        }
                    }
                }
                isInitilizedField = false;
            }
        }

        /// <summary>
        /// Trackables the collection changed.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="NotifyTrackableCollectionChangedEventArgs"/> instance containing the event data.</param>
        /// <param name="propertyName">Name of the property.</param>
        private void TrackableCollectionChanged(object sender, NotifyCollectionChangedEventArgs e, string propertyName)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var newItem in e.NewItems)
                    {
                        //todo:implémenter la récursivité sur l'ajout des élements dans la collection
                        //var project = newItem as IObjectWithChangeTracker;
                        //if (project != null)
                        //{
                        //    if (this.ChangeTrackingEnabled)
                        //    {
                        //        project.ChangeTracker.Start();
                        //    }
                        //}
                        RecordAdditionToCollectionProperties(propertyName, newItem);
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (var odlItem in e.OldItems)
                    {
                        RecordRemovalFromCollectionProperties(propertyName, odlItem);
                    }
                    break;
                case NotifyCollectionChangedAction.Reset:
                    {
                        // Cas d'un Clear sur la collection.
                        // Vide le cache des modifications pour la collection.
                        if (ObjectsRemovedFromCollectionProperties.ContainsKey(propertyName))
                        {
                            ObjectsRemovedFromCollectionProperties.Remove(propertyName);
                        }

                        if (ObjectsAddedToCollectionProperties.ContainsKey(propertyName))
                        {
                            ObjectsAddedToCollectionProperties.Remove(propertyName);
                        }

                        // Tranfère les données de départ dans les élements supprimés.
                        if (ObjectsOriginalFromCollectionProperties.Count > 0)
                        {
                            foreach (var item in ObjectsOriginalFromCollectionProperties[propertyName])
                            {
                                RecordRemovalFromCollectionProperties(propertyName, item);
                            }
                        }
                    }
                    break;
                case NotifyCollectionChangedAction.Replace:
                    {
                        // Comment gérer le cas d'un changement d'instance dans la liste ?
                    }
                    break;
            }
            UpdateChangeState();
        }

        #region public properties
        // Returns the removed objects to collection valued properties that were changed.
        [DataMember]
        public ObjectsRemovedFromCollectionProperties ObjectsRemovedFromCollectionProperties
        {
            get { return objectsRemovedFromCollectionsField ?? (objectsRemovedFromCollectionsField = new ObjectsRemovedFromCollectionProperties()); }
        }

        // Returns the original values for properties that were changed.
        [DataMember]
        public PropertyValueStatesDictionary PropertyValueStates
        {
            get { return propertyValueStatesFields ?? (propertyValueStatesFields = new PropertyValueStatesDictionary()); }
        }

        // Returns the added objects to collection valued properties that were changed.
        [DataMember]
        public ObjectsAddedToCollectionProperties ObjectsAddedToCollectionProperties
        {
            get { return objectsAddedToCollectionsField ?? (objectsAddedToCollectionsField = new ObjectsAddedToCollectionProperties()); }
        }

        // Returns the added objects to collection valued properties that were changed.
        [DataMember]
        public ObjectsOriginalFromCollectionProperties ObjectsOriginalFromCollectionProperties
        {
            get { return objectsOriginalFromCollectionsField ?? (objectsOriginalFromCollectionsField = new ObjectsOriginalFromCollectionProperties()); }
        }

        #region MethodsForChangeTrackingOnClient

        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            isDeserializingField = true;
        }

        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            isDeserializingField = false;
        }
        #endregion

        /// <summary>
        /// Captures the original value for a property that is changing.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The value.</param>
        public void RecordCurrentValue(string propertyName, object value)
        {
            if (objectTrackingEnabledField)
            {
                if (!PropertyValueStates.ContainsKey(propertyName))
                {
                    PropertyValueStates[propertyName] = new PropertyValueState() { PropertyName = propertyName, OriginalValue = value, CurrentValue = value, State = ObjectState.Unchanged };
                }
                // Compare original value new 
                else
                {
                    PropertyValueStates[propertyName].CurrentValue = value;
                    var originalValue = PropertyValueStates[propertyName].OriginalValue;
                    if (originalValue != null)
                    {
                        PropertyValueStates[propertyName].State = originalValue.Equals(value) ? ObjectState.Unchanged : ObjectState.Modified;
                    }
                    else
                    {
                        if (value == null)
                        {
                            PropertyValueStates[propertyName].State = ObjectState.Unchanged;
                        }
                        else
                        {
                            PropertyValueStates[propertyName].State = string.IsNullOrEmpty(value.ToString()) ? ObjectState.Unchanged : ObjectState.Modified;
                        }
                    }
                }
                UpdateChangeState();
            }
        }

        /// <summary>
        /// Records original items value of collection to collection valued properties on SelfTracking Entities.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The value.</param>
        private void RecordOriginalToCollectionProperties(string propertyName, object value)
        {
            if (objectTrackingEnabledField)
            {
                if (!ObjectsOriginalFromCollectionProperties.ContainsKey(propertyName))
                {
                    ObjectsOriginalFromCollectionProperties[propertyName] = new ObjectList();
                    ObjectsOriginalFromCollectionProperties[propertyName].Add(value);
                }
                else
                {
                    ObjectsOriginalFromCollectionProperties[propertyName].Add(value);
                }
            }
        }


        /// <summary>
        /// Records an addition to collection valued properties on SelfTracking Entities.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The value.</param>
        private void RecordAdditionToCollectionProperties(string propertyName, object value)
        {
            if (objectTrackingEnabledField)
            {
                // Add the entity back after deleting it, we should do nothing here then
                if (ObjectsRemovedFromCollectionProperties.ContainsKey(propertyName)
                    && ObjectsRemovedFromCollectionProperties[propertyName].Contains(value))
                {
                    ObjectsRemovedFromCollectionProperties[propertyName].Remove(value);
                    if (ObjectsRemovedFromCollectionProperties[propertyName].Count == 0)
                    {
                        ObjectsRemovedFromCollectionProperties.Remove(propertyName);
                    }
                    return;
                }

                if (!ObjectsAddedToCollectionProperties.ContainsKey(propertyName))
                {
                    ObjectsAddedToCollectionProperties[propertyName] = new ObjectList();
                    ObjectsAddedToCollectionProperties[propertyName].Add(value);
                }
                else
                {
                    ObjectsAddedToCollectionProperties[propertyName].Add(value);
                }
            }
        }

        /// <summary>
        /// Records a removal to collection valued properties on SelfTracking Entities.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="value">The object value.</param>
        internal void RecordRemovalFromCollectionProperties(string propertyName, object value)
        {
            if (objectTrackingEnabledField)
            {
                // Delete the entity back after adding it, we should do nothing here then
                if (ObjectsAddedToCollectionProperties.ContainsKey(propertyName)
                    && ObjectsAddedToCollectionProperties[propertyName].Contains(value))
                {
                    ObjectsAddedToCollectionProperties[propertyName].Remove(value);
                    if (ObjectsAddedToCollectionProperties[propertyName].Count == 0)
                    {
                        ObjectsAddedToCollectionProperties.Remove(propertyName);
                    }
                    return;
                }

                if (!ObjectsRemovedFromCollectionProperties.ContainsKey(propertyName))
                {
                    ObjectsRemovedFromCollectionProperties[propertyName] = new ObjectList();
                    ObjectsRemovedFromCollectionProperties[propertyName].Add(value);
                }
                else
                {
                    if (!ObjectsRemovedFromCollectionProperties[propertyName].Contains(value))
                    {
                        ObjectsRemovedFromCollectionProperties[propertyName].Add(value);
                    }
                }
            }
        }
        #endregion

        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Called when [property changed].
        /// </summary>
        /// <param name="info">The info.</param>
        public virtual void OnPropertyChanged(string info)
        {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if (handler != null)
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(info));
            }
        }
    }
    #endregion

    #region TrackableCollection class
    public class TrackableCollection<T> : ObservableCollection<T>
    {

        /// <summary>
        /// Name of property
        /// </summary>
        private string propertyNameField;

        /// <summary>
        /// Occurs when [trackable collection changed].
        /// </summary>
        public virtual event NotifyTrackableCollectionChangedEventHandler TrackableCollectionChanged;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackableCollection&lt;T&gt;"/> class.
        /// </summary>
        /// <param name="propertyName">Name of the property.</param>
        public TrackableCollection(string propertyName)
        {
            propertyNameField = propertyName;
            base.CollectionChanged += TrackableCollection_CollectionChanged;
        }

        /// <summary>
        /// Handles the CollectionChanged event of the TrackableCollection control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        void TrackableCollection_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (this.TrackableCollectionChanged != null)
            {
                this.TrackableCollectionChanged(sender, e, this.propertyNameField);
            }
        }


    }
    #endregion

    #region PropertyValueStatesDictionary
    public class PropertyValueStatesDictionary : Dictionary<string, PropertyValueState>
    {
    }
    #endregion

    #region ObjectsRemovedFromCollectionProperties
    public class ObjectsRemovedFromCollectionProperties : Dictionary<string, ObjectList>
    {
    }
    #endregion

    #region ObjectsAddedToCollectionProperties
    public class ObjectsAddedToCollectionProperties : Dictionary<string, ObjectList>
    {
    }
    #endregion

    #region ObjectsOriginalFromCollectionProperties
    public class ObjectsOriginalFromCollectionProperties : Dictionary<string, ObjectList>
    {
    }
    #endregion

    /// <summary>
    /// Actor pépé class include firstname and lastname (ûàéçè).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class Actor : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string firstnameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string lastnameField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool principalActorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool principalActorFieldSpecified;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nationalityField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private ObjectChangeTracker changeTrackerField;

        public Actor()
        {
            this.nationalityField = "US";
        }

        /// <summary>
        /// Gets or sets the firstname of the actor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string firstname
        {
            get
            {
                return this.firstnameField;
            }
            set
            {
                if ((this.firstnameField != null))
                {
                    if ((firstnameField.Equals(value) != true))
                    {
                        this.firstnameField = value;
                        this.OnPropertyChanged("firstname", value);
                    }
                }
                else
                {
                    this.firstnameField = value;
                    this.OnPropertyChanged("firstname", value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the lastname of the actor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string lastname
        {
            get
            {
                return this.lastnameField;
            }
            set
            {
                if ((this.lastnameField != null))
                {
                    if ((lastnameField.Equals(value) != true))
                    {
                        this.lastnameField = value;
                        this.OnPropertyChanged("lastname", value);
                    }
                }
                else
                {
                    this.lastnameField = value;
                    this.OnPropertyChanged("lastname", value);
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool PrincipalActor
        {
            get
            {
                return this.principalActorField;
            }
            set
            {
                if ((principalActorField.Equals(value) != true))
                {
                    this.principalActorField = value;
                    this.OnPropertyChanged("PrincipalActor", value);
                }
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrincipalActorSpecified
        {
            get
            {
                return this.principalActorFieldSpecified;
            }
            set
            {
                if ((principalActorFieldSpecified.Equals(value) != true))
                {
                    this.principalActorFieldSpecified = value;
                    this.OnPropertyChanged("PrincipalActorSpecified", value);
                }
            }
        }

        /// <summary>
        /// nationality of actor
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("US")]
        public string nationality
        {
            get
            {
                return this.nationalityField;
            }
            set
            {
                if ((this.nationalityField != null))
                {
                    if ((nationalityField.Equals(value) != true))
                    {
                        this.nationalityField = value;
                        this.OnPropertyChanged("nationality", value);
                    }
                }
                else
                {
                    this.nationalityField = value;
                    this.OnPropertyChanged("nationality", value);
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Actor));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if ((this.changeTrackerField == null))
                {
                    this.changeTrackerField = new ObjectChangeTracker(this);
                }
                return changeTrackerField;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName, object value)
        {
            this.ChangeTracker.RecordCurrentValue(propertyName, value);
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Actor object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Actor object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Actor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Actor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Actor);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Actor obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Actor Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Actor)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Actor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Actor object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Actor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Actor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Actor);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Actor obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Actor obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Actor LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Actor LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Actor object
        /// </summary>
        public virtual Actor Clone()
        {
            return ((Actor)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class DvdCollection : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<dvd> dvdsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private ObjectChangeTracker changeTrackerField;

        /// <summary>
        /// DvdCollection class constructor
        /// </summary>
        public DvdCollection()
        {
            this.dvdsField = new List<dvd>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Dvds", Order = 0)]
        public List<dvd> Dvds
        {
            get
            {
                return this.dvdsField;
            }
            set
            {
                if ((this.dvdsField != null))
                {
                    if ((dvdsField.Equals(value) != true))
                    {
                        this.dvdsField = value;
                        this.OnPropertyChanged("Dvds", value);
                    }
                }
                else
                {
                    this.dvdsField = value;
                    this.OnPropertyChanged("Dvds", value);
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DvdCollection));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if ((this.changeTrackerField == null))
                {
                    this.changeTrackerField = new ObjectChangeTracker(this);
                }
                return changeTrackerField;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName, object value)
        {
            this.ChangeTracker.RecordCurrentValue(propertyName, value);
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DvdCollection object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DvdCollection object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DvdCollection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DvdCollection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DvdCollection);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DvdCollection obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static DvdCollection Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DvdCollection)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current DvdCollection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DvdCollection object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DvdCollection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DvdCollection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DvdCollection);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DvdCollection obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DvdCollection obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DvdCollection LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static DvdCollection LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this DvdCollection object
        /// </summary>
        public virtual DvdCollection Clone()
        {
            return ((DvdCollection)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class dvd : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string yearField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<System.DateTime> publishField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string titleField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Styles styleField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Actor> actorField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private int publishYearField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private dvdCover coverField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private ObjectChangeTracker changeTrackerField;

        public dvd()
        {
            this.coverField = new dvdCover();
            this.actorField = new List<Actor>();
            this.titleField = "DefaultTitle";
            this.styleField = Styles.Action;
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 0)]
        public string Year
        {
            get
            {
                return this.yearField;
            }
            set
            {
                if ((this.yearField != null))
                {
                    if ((yearField.Equals(value) != true))
                    {
                        this.yearField = value;
                        this.OnPropertyChanged("Year", value);
                    }
                }
                else
                {
                    this.yearField = value;
                    this.OnPropertyChanged("Year", value);
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", IsNullable = true, Order = 1)]
        public System.Nullable<System.DateTime> Publish
        {
            get
            {
                return this.publishField;
            }
            set
            {
                if ((this.publishField != null))
                {
                    if ((publishField.Equals(value) != true))
                    {
                        this.publishField = value;
                        this.OnPropertyChanged("Publish", value);
                    }
                }
                else
                {
                    this.publishField = value;
                    this.OnPropertyChanged("Publish", value);
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 2)]
        public string Title
        {
            get
            {
                return this.titleField;
            }
            set
            {
                if ((this.titleField != null))
                {
                    if ((titleField.Equals(value) != true))
                    {
                        this.titleField = value;
                        this.OnPropertyChanged("Title", value);
                    }
                }
                else
                {
                    this.titleField = value;
                    this.OnPropertyChanged("Title", value);
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public Styles Style
        {
            get
            {
                return this.styleField;
            }
            set
            {
                if ((styleField.Equals(value) != true))
                {
                    this.styleField = value;
                    this.OnPropertyChanged("Style", value);
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Actor", Order = 4)]
        public List<Actor> Actor
        {
            get
            {
                return this.actorField;
            }
            set
            {
                if ((this.actorField != null))
                {
                    if ((actorField.Equals(value) != true))
                    {
                        this.actorField = value;
                        this.OnPropertyChanged("Actor", value);
                    }
                }
                else
                {
                    this.actorField = value;
                    this.OnPropertyChanged("Actor", value);
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public int PublishYear
        {
            get
            {
                return this.publishYearField;
            }
            set
            {
                if ((publishYearField.Equals(value) != true))
                {
                    this.publishYearField = value;
                    this.OnPropertyChanged("PublishYear", value);
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public dvdCover Cover
        {
            get
            {
                return this.coverField;
            }
            set
            {
                if ((this.coverField != null))
                {
                    if ((coverField.Equals(value) != true))
                    {
                        this.coverField = value;
                        this.OnPropertyChanged("Cover", value);
                    }
                }
                else
                {
                    this.coverField = value;
                    this.OnPropertyChanged("Cover", value);
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(dvd));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if ((this.changeTrackerField == null))
                {
                    this.changeTrackerField = new ObjectChangeTracker(this);
                }
                return changeTrackerField;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Test whether Publish should be serialized
        /// </summary>
        public virtual bool ShouldSerializePublish()
        {
            return Publish.HasValue;
        }

        public virtual void OnPropertyChanged(string propertyName, object value)
        {
            this.ChangeTracker.RecordCurrentValue(propertyName, value);
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current dvd object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an dvd object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output dvd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out dvd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(dvd);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out dvd obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static dvd Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((dvd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current dvd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an dvd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output dvd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out dvd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(dvd);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out dvd obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out dvd obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static dvd LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static dvd LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this dvd object
        /// </summary>
        public virtual dvd Clone()
        {
            return ((dvd)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    public enum Styles
    {

        /// <remarks/>
        Action,

        /// <remarks/>
        Fiction,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class dvdCover : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string systemeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private ObjectChangeTracker changeTrackerField;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Systeme
        {
            get
            {
                return this.systemeField;
            }
            set
            {
                if ((this.systemeField != null))
                {
                    if ((systemeField.Equals(value) != true))
                    {
                        this.systemeField = value;
                        this.OnPropertyChanged("Systeme", value);
                    }
                }
                else
                {
                    this.systemeField = value;
                    this.OnPropertyChanged("Systeme", value);
                }
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                if ((this.valueField != null))
                {
                    if ((valueField.Equals(value) != true))
                    {
                        this.valueField = value;
                        this.OnPropertyChanged("Value", value);
                    }
                }
                else
                {
                    this.valueField = value;
                    this.OnPropertyChanged("Value", value);
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(dvdCover));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if ((this.changeTrackerField == null))
                {
                    this.changeTrackerField = new ObjectChangeTracker(this);
                }
                return changeTrackerField;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName, object value)
        {
            this.ChangeTracker.RecordCurrentValue(propertyName, value);
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current dvdCover object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an dvdCover object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output dvdCover object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out dvdCover obj, out System.Exception exception)
        {
            exception = null;
            obj = default(dvdCover);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out dvdCover obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static dvdCover Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((dvdCover)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current dvdCover object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an dvdCover object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output dvdCover object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out dvdCover obj, out System.Exception exception)
        {
            exception = null;
            obj = default(dvdCover);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out dvdCover obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out dvdCover obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static dvdCover LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static dvdCover LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this dvdCover object
        /// </summary>
        public virtual dvdCover Clone()
        {
            return ((dvdCover)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class Actors : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Actor> actorField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private ObjectChangeTracker changeTrackerField;

        /// <summary>
        /// Actors class constructor
        /// </summary>
        public Actors()
        {
            this.actorField = new List<Actor>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Actor", Order = 0)]
        public List<Actor> Actor
        {
            get
            {
                return this.actorField;
            }
            set
            {
                if ((this.actorField != null))
                {
                    if ((actorField.Equals(value) != true))
                    {
                        this.actorField = value;
                        this.OnPropertyChanged("Actor", value);
                    }
                }
                else
                {
                    this.actorField = value;
                    this.OnPropertyChanged("Actor", value);
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Actors));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if ((this.changeTrackerField == null))
                {
                    this.changeTrackerField = new ObjectChangeTracker(this);
                }
                return changeTrackerField;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName, object value)
        {
            this.ChangeTracker.RecordCurrentValue(propertyName, value);
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Actors object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Actors object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Actors object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Actors obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Actors);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Actors obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Actors Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Actors)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Actors object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Actors object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Actors object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Actors obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Actors);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Actors obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Actors obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Actors LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Actors LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this Actors object
        /// </summary>
        public virtual Actors Clone()
        {
            return ((Actors)(this.MemberwiseClone()));
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class mycttype : System.ComponentModel.INotifyPropertyChanged
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private double valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        private ObjectChangeTracker changeTrackerField;

        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                if ((valueField.Equals(value) != true))
                {
                    this.valueField = value;
                    this.OnPropertyChanged("Value", value);
                }
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(mycttype));
                }
                return serializer;
            }
        }

        [XmlIgnore()]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if ((this.changeTrackerField == null))
                {
                    this.changeTrackerField = new ObjectChangeTracker(this);
                }
                return changeTrackerField;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public virtual void OnPropertyChanged(string propertyName, object value)
        {
            this.ChangeTracker.RecordCurrentValue(propertyName, value);
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current mycttype object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an mycttype object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output mycttype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out mycttype obj, out System.Exception exception)
        {
            exception = null;
            obj = default(mycttype);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out mycttype obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static mycttype Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((mycttype)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current mycttype object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an mycttype object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output mycttype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out mycttype obj, out System.Exception exception)
        {
            exception = null;
            obj = default(mycttype);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out mycttype obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out mycttype obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static mycttype LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static mycttype LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion

        #region Clone method
        /// <summary>
        /// Create a clone of this mycttype object
        /// </summary>
        public virtual mycttype Clone()
        {
            return ((mycttype)(this.MemberwiseClone()));
        }
        #endregion
    }
}
