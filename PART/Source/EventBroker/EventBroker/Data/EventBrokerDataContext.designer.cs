#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CprBroker.EventBroker.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PartEventBroker")]
	public partial class EventBrokerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSubscriptionType(SubscriptionType instance);
    partial void UpdateSubscriptionType(SubscriptionType instance);
    partial void DeleteSubscriptionType(SubscriptionType instance);
    partial void InsertBirthdateSubscription(BirthdateSubscription instance);
    partial void UpdateBirthdateSubscription(BirthdateSubscription instance);
    partial void DeleteBirthdateSubscription(BirthdateSubscription instance);
    partial void InsertChannel(Channel instance);
    partial void UpdateChannel(Channel instance);
    partial void DeleteChannel(Channel instance);
    partial void InsertChannelType(ChannelType instance);
    partial void UpdateChannelType(ChannelType instance);
    partial void DeleteChannelType(ChannelType instance);
    partial void InsertDataSubscription(DataSubscription instance);
    partial void UpdateDataSubscription(DataSubscription instance);
    partial void DeleteDataSubscription(DataSubscription instance);
    partial void InsertSubscription(Subscription instance);
    partial void UpdateSubscription(Subscription instance);
    partial void DeleteSubscription(Subscription instance);
    partial void InsertSubscriptionPerson(SubscriptionPerson instance);
    partial void UpdateSubscriptionPerson(SubscriptionPerson instance);
    partial void DeleteSubscriptionPerson(SubscriptionPerson instance);
    partial void InsertDataChangeEvent(DataChangeEvent instance);
    partial void UpdateDataChangeEvent(DataChangeEvent instance);
    partial void DeleteDataChangeEvent(DataChangeEvent instance);
    partial void InsertPersonBirthdate(PersonBirthdate instance);
    partial void UpdatePersonBirthdate(PersonBirthdate instance);
    partial void DeletePersonBirthdate(PersonBirthdate instance);
    partial void InsertBirthdateEventNotification(BirthdateEventNotification instance);
    partial void UpdateBirthdateEventNotification(BirthdateEventNotification instance);
    partial void DeleteBirthdateEventNotification(BirthdateEventNotification instance);
    partial void InsertSubscriptionCriteriaMatch(SubscriptionCriteriaMatch instance);
    partial void UpdateSubscriptionCriteriaMatch(SubscriptionCriteriaMatch instance);
    partial void DeleteSubscriptionCriteriaMatch(SubscriptionCriteriaMatch instance);
    partial void InsertEventNotification(EventNotification instance);
    partial void UpdateEventNotification(EventNotification instance);
    partial void DeleteEventNotification(EventNotification instance);
    #endregion
		
		public EventBrokerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventBrokerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventBrokerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventBrokerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SubscriptionType> SubscriptionTypes
		{
			get
			{
				return this.GetTable<SubscriptionType>();
			}
		}
		
		public System.Data.Linq.Table<BirthdateSubscription> BirthdateSubscriptions
		{
			get
			{
				return this.GetTable<BirthdateSubscription>();
			}
		}
		
		public System.Data.Linq.Table<Channel> Channels
		{
			get
			{
				return this.GetTable<Channel>();
			}
		}
		
		public System.Data.Linq.Table<ChannelType> ChannelTypes
		{
			get
			{
				return this.GetTable<ChannelType>();
			}
		}
		
		public System.Data.Linq.Table<DataSubscription> DataSubscriptions
		{
			get
			{
				return this.GetTable<DataSubscription>();
			}
		}
		
		public System.Data.Linq.Table<Subscription> Subscriptions
		{
			get
			{
				return this.GetTable<Subscription>();
			}
		}
		
		public System.Data.Linq.Table<SubscriptionPerson> SubscriptionPersons
		{
			get
			{
				return this.GetTable<SubscriptionPerson>();
			}
		}
		
		public System.Data.Linq.Table<DataChangeEvent> DataChangeEvents
		{
			get
			{
				return this.GetTable<DataChangeEvent>();
			}
		}
		
		public System.Data.Linq.Table<PersonBirthdate> PersonBirthdates
		{
			get
			{
				return this.GetTable<PersonBirthdate>();
			}
		}
		
		public System.Data.Linq.Table<BirthdateEventNotification> BirthdateEventNotifications
		{
			get
			{
				return this.GetTable<BirthdateEventNotification>();
			}
		}
		
		public System.Data.Linq.Table<SubscriptionCriteriaMatch> SubscriptionCriteriaMatches
		{
			get
			{
				return this.GetTable<SubscriptionCriteriaMatch>();
			}
		}
		
		public System.Data.Linq.Table<EventNotification> EventNotifications
		{
			get
			{
				return this.GetTable<EventNotification>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EnqueueBirthdateEventNotifications")]
		public int EnqueueBirthdateEventNotifications([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubscriptionId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> subscriptionId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Today", DbType="DateTime")] System.Nullable<System.DateTime> today)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), subscriptionId, today);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EnqueueDataChangeEventNotifications")]
		public int EnqueueDataChangeEventNotifications([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Now", DbType="DateTime")] System.Nullable<System.DateTime> now, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LatestReceivedOrder", DbType="Int")] System.Nullable<int> latestReceivedOrder, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubscriptionTypeId", DbType="Int")] System.Nullable<int> subscriptionTypeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), now, latestReceivedOrder, subscriptionTypeId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdatePersonLists")]
		public int UpdatePersonLists([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Now", DbType="DateTime")] System.Nullable<System.DateTime> now, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LatestReceivedOrder", DbType="Int")] System.Nullable<int> latestReceivedOrder, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubscriptionTypeId", DbType="Int")] System.Nullable<int> subscriptionTypeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), now, latestReceivedOrder, subscriptionTypeId);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubscriptionType")]
	public partial class SubscriptionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubscriptionTypeId;
		
		private string _TypeName;
		
		private EntitySet<Subscription> _Subscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionTypeIdChanging(int value);
    partial void OnSubscriptionTypeIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public SubscriptionType()
		{
			this._Subscriptions = new EntitySet<Subscription>(new Action<Subscription>(this.attach_Subscriptions), new Action<Subscription>(this.detach_Subscriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubscriptionTypeId
		{
			get
			{
				return this._SubscriptionTypeId;
			}
			set
			{
				if ((this._SubscriptionTypeId != value))
				{
					this.OnSubscriptionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionTypeId = value;
					this.SendPropertyChanged("SubscriptionTypeId");
					this.OnSubscriptionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubscriptionType_Subscription", Storage="_Subscriptions", ThisKey="SubscriptionTypeId", OtherKey="SubscriptionTypeId")]
		public EntitySet<Subscription> Subscriptions
		{
			get
			{
				return this._Subscriptions;
			}
			set
			{
				this._Subscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.SubscriptionType = this;
		}
		
		private void detach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.SubscriptionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BirthdateSubscription")]
	public partial class BirthdateSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionId;
		
		private System.Nullable<int> _AgeYears;
		
		private int _PriorDays;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnAgeYearsChanging(System.Nullable<int> value);
    partial void OnAgeYearsChanged();
    partial void OnPriorDaysChanging(int value);
    partial void OnPriorDaysChanged();
    #endregion
		
		public BirthdateSubscription()
		{
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeYears", DbType="Int")]
		public System.Nullable<int> AgeYears
		{
			get
			{
				return this._AgeYears;
			}
			set
			{
				if ((this._AgeYears != value))
				{
					this.OnAgeYearsChanging(value);
					this.SendPropertyChanging();
					this._AgeYears = value;
					this.SendPropertyChanged("AgeYears");
					this.OnAgeYearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorDays", DbType="Int NOT NULL")]
		public int PriorDays
		{
			get
			{
				return this._PriorDays;
			}
			set
			{
				if ((this._PriorDays != value))
				{
					this.OnPriorDaysChanging(value);
					this.SendPropertyChanging();
					this._PriorDays = value;
					this.SendPropertyChanged("PriorDays");
					this.OnPriorDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_BirthdateSubscription", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.BirthdateSubscription = null;
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.BirthdateSubscription = this;
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Channel")]
	public partial class Channel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ChannelId;
		
		private int _ChannelTypeId;
		
		private System.Guid _SubscriptionId;
		
		private string _Url;
		
		private EntityRef<ChannelType> _ChannelType;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelIdChanging(System.Guid value);
    partial void OnChannelIdChanged();
    partial void OnChannelTypeIdChanging(int value);
    partial void OnChannelTypeIdChanged();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Channel()
		{
			this._ChannelType = default(EntityRef<ChannelType>);
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelTypeId", DbType="Int NOT NULL")]
		public int ChannelTypeId
		{
			get
			{
				return this._ChannelTypeId;
			}
			set
			{
				if ((this._ChannelTypeId != value))
				{
					if (this._ChannelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelTypeId = value;
					this.SendPropertyChanged("ChannelTypeId");
					this.OnChannelTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChannelType_Channel", Storage="_ChannelType", ThisKey="ChannelTypeId", OtherKey="ChannelTypeId", IsForeignKey=true)]
		public ChannelType ChannelType
		{
			get
			{
				return this._ChannelType.Entity;
			}
			set
			{
				ChannelType previousValue = this._ChannelType.Entity;
				if (((previousValue != value) 
							|| (this._ChannelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChannelType.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._ChannelType.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._ChannelTypeId = value.ChannelTypeId;
					}
					else
					{
						this._ChannelTypeId = default(int);
					}
					this.SendPropertyChanged("ChannelType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_Channel", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChannelType")]
	public partial class ChannelType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChannelTypeId;
		
		private string _Name;
		
		private EntitySet<Channel> _Channels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelTypeIdChanging(int value);
    partial void OnChannelTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ChannelType()
		{
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChannelTypeId
		{
			get
			{
				return this._ChannelTypeId;
			}
			set
			{
				if ((this._ChannelTypeId != value))
				{
					this.OnChannelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelTypeId = value;
					this.SendPropertyChanged("ChannelTypeId");
					this.OnChannelTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChannelType_Channel", Storage="_Channels", ThisKey="ChannelTypeId", OtherKey="ChannelTypeId")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.ChannelType = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.ChannelType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataSubscription")]
	public partial class DataSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionId;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    #endregion
		
		public DataSubscription()
		{
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_DataSubscription", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.DataSubscription = null;
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.DataSubscription = this;
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subscription")]
	public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionId;
		
		private int _SubscriptionTypeId;
		
		private System.Guid _ApplicationId;
		
		private bool _IsForAllPersons;
		
		private System.Xml.Linq.XElement _Criteria;
		
		private System.Nullable<System.Guid> _LastCheckedUUID;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Deactivated;
		
		private EntityRef<BirthdateSubscription> _BirthdateSubscription;
		
		private EntitySet<Channel> _Channels;
		
		private EntityRef<DataSubscription> _DataSubscription;
		
		private EntitySet<SubscriptionPerson> _SubscriptionPersons;
		
		private EntitySet<SubscriptionCriteriaMatch> _SubscriptionCriteriaMatches;
		
		private EntitySet<EventNotification> _EventNotifications;
		
		private EntityRef<SubscriptionType> _SubscriptionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnSubscriptionTypeIdChanging(int value);
    partial void OnSubscriptionTypeIdChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnIsForAllPersonsChanging(bool value);
    partial void OnIsForAllPersonsChanged();
    partial void OnCriteriaChanging(System.Xml.Linq.XElement value);
    partial void OnCriteriaChanged();
    partial void OnLastCheckedUUIDChanging(System.Nullable<System.Guid> value);
    partial void OnLastCheckedUUIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnDeactivatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDeactivatedChanged();
    #endregion
		
		public Subscription()
		{
			this._BirthdateSubscription = default(EntityRef<BirthdateSubscription>);
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			this._DataSubscription = default(EntityRef<DataSubscription>);
			this._SubscriptionPersons = new EntitySet<SubscriptionPerson>(new Action<SubscriptionPerson>(this.attach_SubscriptionPersons), new Action<SubscriptionPerson>(this.detach_SubscriptionPersons));
			this._SubscriptionCriteriaMatches = new EntitySet<SubscriptionCriteriaMatch>(new Action<SubscriptionCriteriaMatch>(this.attach_SubscriptionCriteriaMatches), new Action<SubscriptionCriteriaMatch>(this.detach_SubscriptionCriteriaMatches));
			this._EventNotifications = new EntitySet<EventNotification>(new Action<EventNotification>(this.attach_EventNotifications), new Action<EventNotification>(this.detach_EventNotifications));
			this._SubscriptionType = default(EntityRef<SubscriptionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionTypeId", DbType="Int NOT NULL")]
		public int SubscriptionTypeId
		{
			get
			{
				return this._SubscriptionTypeId;
			}
			set
			{
				if ((this._SubscriptionTypeId != value))
				{
					if (this._SubscriptionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionTypeId = value;
					this.SendPropertyChanged("SubscriptionTypeId");
					this.OnSubscriptionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForAllPersons", DbType="Bit NOT NULL")]
		public bool IsForAllPersons
		{
			get
			{
				return this._IsForAllPersons;
			}
			set
			{
				if ((this._IsForAllPersons != value))
				{
					this.OnIsForAllPersonsChanging(value);
					this.SendPropertyChanging();
					this._IsForAllPersons = value;
					this.SendPropertyChanged("IsForAllPersons");
					this.OnIsForAllPersonsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Criteria", DbType="Xml", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Criteria
		{
			get
			{
				return this._Criteria;
			}
			set
			{
				if ((this._Criteria != value))
				{
					this.OnCriteriaChanging(value);
					this.SendPropertyChanging();
					this._Criteria = value;
					this.SendPropertyChanged("Criteria");
					this.OnCriteriaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCheckedUUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastCheckedUUID
		{
			get
			{
				return this._LastCheckedUUID;
			}
			set
			{
				if ((this._LastCheckedUUID != value))
				{
					this.OnLastCheckedUUIDChanging(value);
					this.SendPropertyChanging();
					this._LastCheckedUUID = value;
					this.SendPropertyChanged("LastCheckedUUID");
					this.OnLastCheckedUUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deactivated", DbType="DateTime")]
		public System.Nullable<System.DateTime> Deactivated
		{
			get
			{
				return this._Deactivated;
			}
			set
			{
				if ((this._Deactivated != value))
				{
					this.OnDeactivatedChanging(value);
					this.SendPropertyChanging();
					this._Deactivated = value;
					this.SendPropertyChanged("Deactivated");
					this.OnDeactivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_BirthdateSubscription", Storage="_BirthdateSubscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsUnique=true, IsForeignKey=false)]
		public BirthdateSubscription BirthdateSubscription
		{
			get
			{
				return this._BirthdateSubscription.Entity;
			}
			set
			{
				BirthdateSubscription previousValue = this._BirthdateSubscription.Entity;
				if (((previousValue != value) 
							|| (this._BirthdateSubscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BirthdateSubscription.Entity = null;
						previousValue.Subscription = null;
					}
					this._BirthdateSubscription.Entity = value;
					if ((value != null))
					{
						value.Subscription = this;
					}
					this.SendPropertyChanged("BirthdateSubscription");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_Channel", Storage="_Channels", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_DataSubscription", Storage="_DataSubscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsUnique=true, IsForeignKey=false)]
		public DataSubscription DataSubscription
		{
			get
			{
				return this._DataSubscription.Entity;
			}
			set
			{
				DataSubscription previousValue = this._DataSubscription.Entity;
				if (((previousValue != value) 
							|| (this._DataSubscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataSubscription.Entity = null;
						previousValue.Subscription = null;
					}
					this._DataSubscription.Entity = value;
					if ((value != null))
					{
						value.Subscription = this;
					}
					this.SendPropertyChanged("DataSubscription");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_SubscriptionPerson", Storage="_SubscriptionPersons", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<SubscriptionPerson> SubscriptionPersons
		{
			get
			{
				return this._SubscriptionPersons;
			}
			set
			{
				this._SubscriptionPersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_SubscriptionCriteriaMatch", Storage="_SubscriptionCriteriaMatches", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<SubscriptionCriteriaMatch> SubscriptionCriteriaMatches
		{
			get
			{
				return this._SubscriptionCriteriaMatches;
			}
			set
			{
				this._SubscriptionCriteriaMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_EventNotification", Storage="_EventNotifications", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<EventNotification> EventNotifications
		{
			get
			{
				return this._EventNotifications;
			}
			set
			{
				this._EventNotifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubscriptionType_Subscription", Storage="_SubscriptionType", ThisKey="SubscriptionTypeId", OtherKey="SubscriptionTypeId", IsForeignKey=true)]
		public SubscriptionType SubscriptionType
		{
			get
			{
				return this._SubscriptionType.Entity;
			}
			set
			{
				SubscriptionType previousValue = this._SubscriptionType.Entity;
				if (((previousValue != value) 
							|| (this._SubscriptionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubscriptionType.Entity = null;
						previousValue.Subscriptions.Remove(this);
					}
					this._SubscriptionType.Entity = value;
					if ((value != null))
					{
						value.Subscriptions.Add(this);
						this._SubscriptionTypeId = value.SubscriptionTypeId;
					}
					else
					{
						this._SubscriptionTypeId = default(int);
					}
					this.SendPropertyChanged("SubscriptionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
		
		private void attach_SubscriptionPersons(SubscriptionPerson entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_SubscriptionPersons(SubscriptionPerson entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
		
		private void attach_SubscriptionCriteriaMatches(SubscriptionCriteriaMatch entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_SubscriptionCriteriaMatches(SubscriptionCriteriaMatch entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
		
		private void attach_EventNotifications(EventNotification entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_EventNotifications(EventNotification entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubscriptionPerson")]
	public partial class SubscriptionPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionPersonId;
		
		private System.Nullable<System.Guid> _SubscriptionId;
		
		private System.Nullable<System.Guid> _PersonUuid;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Removed;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionPersonIdChanging(System.Guid value);
    partial void OnSubscriptionPersonIdChanged();
    partial void OnSubscriptionIdChanging(System.Nullable<System.Guid> value);
    partial void OnSubscriptionIdChanged();
    partial void OnPersonUuidChanging(System.Nullable<System.Guid> value);
    partial void OnPersonUuidChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnRemovedChanging(System.Nullable<System.DateTime> value);
    partial void OnRemovedChanged();
    #endregion
		
		public SubscriptionPerson()
		{
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionPersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionPersonId
		{
			get
			{
				return this._SubscriptionPersonId;
			}
			set
			{
				if ((this._SubscriptionPersonId != value))
				{
					this.OnSubscriptionPersonIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionPersonId = value;
					this.SendPropertyChanged("SubscriptionPersonId");
					this.OnSubscriptionPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonUuid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PersonUuid
		{
			get
			{
				return this._PersonUuid;
			}
			set
			{
				if ((this._PersonUuid != value))
				{
					this.OnPersonUuidChanging(value);
					this.SendPropertyChanging();
					this._PersonUuid = value;
					this.SendPropertyChanged("PersonUuid");
					this.OnPersonUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Removed", DbType="DateTime NULL")]
		public System.Nullable<System.DateTime> Removed
		{
			get
			{
				return this._Removed;
			}
			set
			{
				if ((this._Removed != value))
				{
					this.OnRemovedChanging(value);
					this.SendPropertyChanging();
					this._Removed = value;
					this.SendPropertyChanged("Removed");
					this.OnRemovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_SubscriptionPerson", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.SubscriptionPersons.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.SubscriptionPersons.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataChangeEvent")]
	public partial class DataChangeEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DataChangeEventId;
		
		private System.Guid _PersonUuid;
		
		private System.Guid _PersonRegistrationId;
		
		private System.DateTime _DueDate;
		
		private System.DateTime _ReceivedDate;
		
		private int _ReceivedOrder;
		
		private EntitySet<SubscriptionCriteriaMatch> _TempSubscriptionPersons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataChangeEventIdChanging(System.Guid value);
    partial void OnDataChangeEventIdChanged();
    partial void OnPersonUuidChanging(System.Guid value);
    partial void OnPersonUuidChanged();
    partial void OnPersonRegistrationIdChanging(System.Guid value);
    partial void OnPersonRegistrationIdChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnReceivedDateChanging(System.DateTime value);
    partial void OnReceivedDateChanged();
    partial void OnReceivedOrderChanging(int value);
    partial void OnReceivedOrderChanged();
    #endregion
		
		public DataChangeEvent()
		{
			this._TempSubscriptionPersons = new EntitySet<SubscriptionCriteriaMatch>(new Action<SubscriptionCriteriaMatch>(this.attach_TempSubscriptionPersons), new Action<SubscriptionCriteriaMatch>(this.detach_TempSubscriptionPersons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataChangeEventId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DataChangeEventId
		{
			get
			{
				return this._DataChangeEventId;
			}
			set
			{
				if ((this._DataChangeEventId != value))
				{
					this.OnDataChangeEventIdChanging(value);
					this.SendPropertyChanging();
					this._DataChangeEventId = value;
					this.SendPropertyChanged("DataChangeEventId");
					this.OnDataChangeEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonUuid
		{
			get
			{
				return this._PersonUuid;
			}
			set
			{
				if ((this._PersonUuid != value))
				{
					this.OnPersonUuidChanging(value);
					this.SendPropertyChanging();
					this._PersonUuid = value;
					this.SendPropertyChanged("PersonUuid");
					this.OnPersonUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonRegistrationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonRegistrationId
		{
			get
			{
				return this._PersonRegistrationId;
			}
			set
			{
				if ((this._PersonRegistrationId != value))
				{
					this.OnPersonRegistrationIdChanging(value);
					this.SendPropertyChanging();
					this._PersonRegistrationId = value;
					this.SendPropertyChanged("PersonRegistrationId");
					this.OnPersonRegistrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivedOrder", DbType="Int NOT NULL", IsDbGenerated=true)]
		public int ReceivedOrder
		{
			get
			{
				return this._ReceivedOrder;
			}
			set
			{
				if ((this._ReceivedOrder != value))
				{
					this.OnReceivedOrderChanging(value);
					this.SendPropertyChanging();
					this._ReceivedOrder = value;
					this.SendPropertyChanged("ReceivedOrder");
					this.OnReceivedOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataChangeEvent_SubscriptionCriteriaMatch", Storage="_TempSubscriptionPersons", ThisKey="DataChangeEventId", OtherKey="DataChangeEventId")]
		public EntitySet<SubscriptionCriteriaMatch> SubscriptionCriteriaMatches
		{
			get
			{
				return this._TempSubscriptionPersons;
			}
			set
			{
				this._TempSubscriptionPersons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TempSubscriptionPersons(SubscriptionCriteriaMatch entity)
		{
			this.SendPropertyChanging();
			entity.DataChangeEvent = this;
		}
		
		private void detach_TempSubscriptionPersons(SubscriptionCriteriaMatch entity)
		{
			this.SendPropertyChanging();
			entity.DataChangeEvent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonBirthdate")]
	public partial class PersonBirthdate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonUuid;
		
		private System.DateTime _Birthdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonUuidChanging(System.Guid value);
    partial void OnPersonUuidChanged();
    partial void OnBirthdateChanging(System.DateTime value);
    partial void OnBirthdateChanged();
    #endregion
		
		public PersonBirthdate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonUuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonUuid
		{
			get
			{
				return this._PersonUuid;
			}
			set
			{
				if ((this._PersonUuid != value))
				{
					this.OnPersonUuidChanging(value);
					this.SendPropertyChanging();
					this._PersonUuid = value;
					this.SendPropertyChanged("PersonUuid");
					this.OnPersonUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="DateTime NOT NULL")]
		public System.DateTime Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BirthdateEventNotification")]
	public partial class BirthdateEventNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EventNotificationId;
		
		private int _Age;
		
		private EntityRef<EventNotification> _EventNotification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventNotificationIdChanging(System.Guid value);
    partial void OnEventNotificationIdChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    #endregion
		
		public BirthdateEventNotification()
		{
			this._EventNotification = default(EntityRef<EventNotification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventNotificationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EventNotificationId
		{
			get
			{
				return this._EventNotificationId;
			}
			set
			{
				if ((this._EventNotificationId != value))
				{
					if (this._EventNotification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._EventNotificationId = value;
					this.SendPropertyChanged("EventNotificationId");
					this.OnEventNotificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventNotification_BirthdateEventNotification", Storage="_EventNotification", ThisKey="EventNotificationId", OtherKey="EventNotificationId", IsForeignKey=true)]
		public EventNotification EventNotification
		{
			get
			{
				return this._EventNotification.Entity;
			}
			set
			{
				EventNotification previousValue = this._EventNotification.Entity;
				if (((previousValue != value) 
							|| (this._EventNotification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventNotification.Entity = null;
						previousValue.BirthdateEventNotification = null;
					}
					this._EventNotification.Entity = value;
					if ((value != null))
					{
						value.BirthdateEventNotification = this;
						this._EventNotificationId = value.EventNotificationId;
					}
					else
					{
						this._EventNotificationId = default(System.Guid);
					}
					this.SendPropertyChanged("EventNotification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubscriptionCriteriaMatch")]
	public partial class SubscriptionCriteriaMatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TempSubscriptionPersonId;
		
		private System.Guid _SubscriptionId;
		
		private System.Guid _DataChangeEventId;
		
		private EntityRef<DataChangeEvent> _DataChangeEvent;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionCriteriaMatchIdChanging(System.Guid value);
    partial void OnSubscriptionCriteriaMatchIdChanged();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnDataChangeEventIdChanging(System.Guid value);
    partial void OnDataChangeEventIdChanged();
    #endregion
		
		public SubscriptionCriteriaMatch()
		{
			this._DataChangeEvent = default(EntityRef<DataChangeEvent>);
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempSubscriptionPersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionCriteriaMatchId
		{
			get
			{
				return this._TempSubscriptionPersonId;
			}
			set
			{
				if ((this._TempSubscriptionPersonId != value))
				{
					this.OnSubscriptionCriteriaMatchIdChanging(value);
					this.SendPropertyChanging();
					this._TempSubscriptionPersonId = value;
					this.SendPropertyChanged("SubscriptionCriteriaMatchId");
					this.OnSubscriptionCriteriaMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataChangeEventId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DataChangeEventId
		{
			get
			{
				return this._DataChangeEventId;
			}
			set
			{
				if ((this._DataChangeEventId != value))
				{
					if (this._DataChangeEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataChangeEventIdChanging(value);
					this.SendPropertyChanging();
					this._DataChangeEventId = value;
					this.SendPropertyChanged("DataChangeEventId");
					this.OnDataChangeEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataChangeEvent_SubscriptionCriteriaMatch", Storage="_DataChangeEvent", ThisKey="DataChangeEventId", OtherKey="DataChangeEventId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DataChangeEvent DataChangeEvent
		{
			get
			{
				return this._DataChangeEvent.Entity;
			}
			set
			{
				DataChangeEvent previousValue = this._DataChangeEvent.Entity;
				if (((previousValue != value) 
							|| (this._DataChangeEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataChangeEvent.Entity = null;
						previousValue.SubscriptionCriteriaMatches.Remove(this);
					}
					this._DataChangeEvent.Entity = value;
					if ((value != null))
					{
						value.SubscriptionCriteriaMatches.Add(this);
						this._DataChangeEventId = value.DataChangeEventId;
					}
					else
					{
						this._DataChangeEventId = default(System.Guid);
					}
					this.SendPropertyChanged("DataChangeEvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_SubscriptionCriteriaMatch", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.SubscriptionCriteriaMatches.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.SubscriptionCriteriaMatches.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventNotification")]
	public partial class EventNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EventNotificationId;
		
		private System.Guid _SubscriptionId;
		
		private System.Guid _PersonUuid;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<bool> _IsLastNotification;
		
		private System.Nullable<System.DateTime> _NotificationDate;
		
		private System.Nullable<bool> _Succeeded;
		
		private EntityRef<BirthdateEventNotification> _BirthdateEventNotification;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventNotificationIdChanging(System.Guid value);
    partial void OnEventNotificationIdChanged();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnPersonUuidChanging(System.Guid value);
    partial void OnPersonUuidChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnIsLastNotificationChanging(System.Nullable<bool> value);
    partial void OnIsLastNotificationChanged();
    partial void OnNotificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNotificationDateChanged();
    partial void OnSucceededChanging(System.Nullable<bool> value);
    partial void OnSucceededChanged();
    #endregion
		
		public EventNotification()
		{
			this._BirthdateEventNotification = default(EntityRef<BirthdateEventNotification>);
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventNotificationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EventNotificationId
		{
			get
			{
				return this._EventNotificationId;
			}
			set
			{
				if ((this._EventNotificationId != value))
				{
					this.OnEventNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._EventNotificationId = value;
					this.SendPropertyChanged("EventNotificationId");
					this.OnEventNotificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonUuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonUuid
		{
			get
			{
				return this._PersonUuid;
			}
			set
			{
				if ((this._PersonUuid != value))
				{
					this.OnPersonUuidChanging(value);
					this.SendPropertyChanging();
					this._PersonUuid = value;
					this.SendPropertyChanged("PersonUuid");
					this.OnPersonUuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLastNotification", DbType="Bit")]
		public System.Nullable<bool> IsLastNotification
		{
			get
			{
				return this._IsLastNotification;
			}
			set
			{
				if ((this._IsLastNotification != value))
				{
					this.OnIsLastNotificationChanging(value);
					this.SendPropertyChanging();
					this._IsLastNotification = value;
					this.SendPropertyChanged("IsLastNotification");
					this.OnIsLastNotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> NotificationDate
		{
			get
			{
				return this._NotificationDate;
			}
			set
			{
				if ((this._NotificationDate != value))
				{
					this.OnNotificationDateChanging(value);
					this.SendPropertyChanging();
					this._NotificationDate = value;
					this.SendPropertyChanged("NotificationDate");
					this.OnNotificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Succeeded", DbType="Bit")]
		public System.Nullable<bool> Succeeded
		{
			get
			{
				return this._Succeeded;
			}
			set
			{
				if ((this._Succeeded != value))
				{
					this.OnSucceededChanging(value);
					this.SendPropertyChanging();
					this._Succeeded = value;
					this.SendPropertyChanged("Succeeded");
					this.OnSucceededChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventNotification_BirthdateEventNotification", Storage="_BirthdateEventNotification", ThisKey="EventNotificationId", OtherKey="EventNotificationId", IsUnique=true, IsForeignKey=false)]
		public BirthdateEventNotification BirthdateEventNotification
		{
			get
			{
				return this._BirthdateEventNotification.Entity;
			}
			set
			{
				BirthdateEventNotification previousValue = this._BirthdateEventNotification.Entity;
				if (((previousValue != value) 
							|| (this._BirthdateEventNotification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BirthdateEventNotification.Entity = null;
						previousValue.EventNotification = null;
					}
					this._BirthdateEventNotification.Entity = value;
					if ((value != null))
					{
						value.EventNotification = this;
					}
					this.SendPropertyChanged("BirthdateEventNotification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscription_EventNotification", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.EventNotifications.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.EventNotifications.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
