#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CprBroker.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CPRBroker")]
	public partial class CPRBrokerDALDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRelationshipType(RelationshipType instance);
    partial void UpdateRelationshipType(RelationshipType instance);
    partial void DeleteRelationshipType(RelationshipType instance);
    partial void InsertMaritalStatusType(MaritalStatusType instance);
    partial void UpdateMaritalStatusType(MaritalStatusType instance);
    partial void DeleteMaritalStatusType(MaritalStatusType instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertAddressStatus(AddressStatus instance);
    partial void UpdateAddressStatus(AddressStatus instance);
    partial void DeleteAddressStatus(AddressStatus instance);
    partial void InsertDetailLevel(DetailLevel instance);
    partial void UpdateDetailLevel(DetailLevel instance);
    partial void DeleteDetailLevel(DetailLevel instance);
    partial void InsertChildRelationship(ChildRelationship instance);
    partial void UpdateChildRelationship(ChildRelationship instance);
    partial void DeleteChildRelationship(ChildRelationship instance);
    partial void InsertMunicipality(Municipality instance);
    partial void UpdateMunicipality(Municipality instance);
    partial void DeleteMunicipality(Municipality instance);
    partial void InsertCustodyRelationship(CustodyRelationship instance);
    partial void UpdateCustodyRelationship(CustodyRelationship instance);
    partial void DeleteCustodyRelationship(CustodyRelationship instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonStatusType(PersonStatusType instance);
    partial void UpdatePersonStatusType(PersonStatusType instance);
    partial void DeletePersonStatusType(PersonStatusType instance);
    partial void InsertTimedRelationship(TimedRelationship instance);
    partial void UpdateTimedRelationship(TimedRelationship instance);
    partial void DeleteTimedRelationship(TimedRelationship instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertMaritalRelationship(MaritalRelationship instance);
    partial void UpdateMaritalRelationship(MaritalRelationship instance);
    partial void DeleteMaritalRelationship(MaritalRelationship instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertOperationType(OperationType instance);
    partial void UpdateOperationType(OperationType instance);
    partial void DeleteOperationType(OperationType instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    #endregion
		
		public CPRBrokerDALDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPRBrokerDALDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPRBrokerDALDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPRBrokerDALDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RelationshipType> RelationshipTypes
		{
			get
			{
				return this.GetTable<RelationshipType>();
			}
		}
		
		public System.Data.Linq.Table<MaritalStatusType> MaritalStatusTypes
		{
			get
			{
				return this.GetTable<MaritalStatusType>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<AddressStatus> AddressStatus
		{
			get
			{
				return this.GetTable<AddressStatus>();
			}
		}
		
		public System.Data.Linq.Table<DetailLevel> DetailLevels
		{
			get
			{
				return this.GetTable<DetailLevel>();
			}
		}
		
		public System.Data.Linq.Table<ChildRelationship> ChildRelationships
		{
			get
			{
				return this.GetTable<ChildRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Municipality> Municipalities
		{
			get
			{
				return this.GetTable<Municipality>();
			}
		}
		
		public System.Data.Linq.Table<CustodyRelationship> CustodyRelationships
		{
			get
			{
				return this.GetTable<CustodyRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonStatusType> PersonStatusTypes
		{
			get
			{
				return this.GetTable<PersonStatusType>();
			}
		}
		
		public System.Data.Linq.Table<TimedRelationship> TimedRelationships
		{
			get
			{
				return this.GetTable<TimedRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<MaritalRelationship> MaritalRelationships
		{
			get
			{
				return this.GetTable<MaritalRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<OperationType> OperationTypes
		{
			get
			{
				return this.GetTable<OperationType>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
	}
	
	[Table(Name="dbo.RelationshipType")]
	public partial class RelationshipType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationshipTypeId;
		
		private string _ForwardName;
		
		private string _BackwardName;
		
		private EntitySet<Relationship> _Relationships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipTypeIdChanging(int value);
    partial void OnRelationshipTypeIdChanged();
    partial void OnForwardNameChanging(string value);
    partial void OnForwardNameChanged();
    partial void OnBackwardNameChanging(string value);
    partial void OnBackwardNameChanged();
    #endregion
		
		public RelationshipType()
		{
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			OnCreated();
		}
		
		[Column(Storage="_RelationshipTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RelationshipTypeId
		{
			get
			{
				return this._RelationshipTypeId;
			}
			set
			{
				if ((this._RelationshipTypeId != value))
				{
					this.OnRelationshipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeId = value;
					this.SendPropertyChanged("RelationshipTypeId");
					this.OnRelationshipTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ForwardName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ForwardName
		{
			get
			{
				return this._ForwardName;
			}
			set
			{
				if ((this._ForwardName != value))
				{
					this.OnForwardNameChanging(value);
					this.SendPropertyChanging();
					this._ForwardName = value;
					this.SendPropertyChanged("ForwardName");
					this.OnForwardNameChanged();
				}
			}
		}
		
		[Column(Storage="_BackwardName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BackwardName
		{
			get
			{
				return this._BackwardName;
			}
			set
			{
				if ((this._BackwardName != value))
				{
					this.OnBackwardNameChanging(value);
					this.SendPropertyChanging();
					this._BackwardName = value;
					this.SendPropertyChanged("BackwardName");
					this.OnBackwardNameChanged();
				}
			}
		}
		
		[Association(Name="RelationshipType_Relationship", Storage="_Relationships", ThisKey="RelationshipTypeId", OtherKey="RelationshipTypeId")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = null;
		}
	}
	
	[Table(Name="dbo.MaritalStatusType")]
	public partial class MaritalStatusType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaritalStatusTypeId;
		
		private string _MaritalStatusName;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<MaritalRelationship> _MaritalRelationships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaritalStatusTypeIdChanging(int value);
    partial void OnMaritalStatusTypeIdChanged();
    partial void OnMaritalStatusNameChanging(string value);
    partial void OnMaritalStatusNameChanged();
    #endregion
		
		public MaritalStatusType()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._MaritalRelationships = new EntitySet<MaritalRelationship>(new Action<MaritalRelationship>(this.attach_MaritalRelationships), new Action<MaritalRelationship>(this.detach_MaritalRelationships));
			OnCreated();
		}
		
		[Column(Storage="_MaritalStatusTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaritalStatusTypeId
		{
			get
			{
				return this._MaritalStatusTypeId;
			}
			set
			{
				if ((this._MaritalStatusTypeId != value))
				{
					this.OnMaritalStatusTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusTypeId = value;
					this.SendPropertyChanged("MaritalStatusTypeId");
					this.OnMaritalStatusTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_MaritalStatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaritalStatusName
		{
			get
			{
				return this._MaritalStatusName;
			}
			set
			{
				if ((this._MaritalStatusName != value))
				{
					this.OnMaritalStatusNameChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusName = value;
					this.SendPropertyChanged("MaritalStatusName");
					this.OnMaritalStatusNameChanged();
				}
			}
		}
		
		[Association(Name="MaritalStatusType_Person", Storage="_Persons", ThisKey="MaritalStatusTypeId", OtherKey="MaritalStatusTypeId")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[Association(Name="MaritalStatusType_MaritalRelationship", Storage="_MaritalRelationships", ThisKey="MaritalStatusTypeId", OtherKey="MaritalStatusId")]
		public EntitySet<MaritalRelationship> MaritalRelationships
		{
			get
			{
				return this._MaritalRelationships;
			}
			set
			{
				this._MaritalRelationships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatusType = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatusType = null;
		}
		
		private void attach_MaritalRelationships(MaritalRelationship entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatusType = this;
		}
		
		private void detach_MaritalRelationships(MaritalRelationship entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatusType = null;
		}
	}
	
	[Table(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenderId;
		
		private string _GenderName;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIdChanging(int value);
    partial void OnGenderIdChanged();
    partial void OnGenderNameChanging(string value);
    partial void OnGenderNameChanged();
    #endregion
		
		public Gender()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[Column(Storage="_GenderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[Column(Storage="_GenderName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GenderName
		{
			get
			{
				return this._GenderName;
			}
			set
			{
				if ((this._GenderName != value))
				{
					this.OnGenderNameChanging(value);
					this.SendPropertyChanging();
					this._GenderName = value;
					this.SendPropertyChanged("GenderName");
					this.OnGenderNameChanged();
				}
			}
		}
		
		[Association(Name="Gender_Person", Storage="_Persons", ThisKey="GenderId", OtherKey="GenderId")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[Table(Name="dbo.AddressType")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressTypeId;
		
		private string _AddressTypeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressTypeIdChanging(int value);
    partial void OnAddressTypeIdChanged();
    partial void OnAddressTypeNameChanging(string value);
    partial void OnAddressTypeNameChanged();
    #endregion
		
		public AddressType()
		{
			OnCreated();
		}
		
		[Column(Storage="_AddressTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressTypeId
		{
			get
			{
				return this._AddressTypeId;
			}
			set
			{
				if ((this._AddressTypeId != value))
				{
					this.OnAddressTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeId = value;
					this.SendPropertyChanged("AddressTypeId");
					this.OnAddressTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AddressTypeName
		{
			get
			{
				return this._AddressTypeName;
			}
			set
			{
				if ((this._AddressTypeName != value))
				{
					this.OnAddressTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeName = value;
					this.SendPropertyChanged("AddressTypeName");
					this.OnAddressTypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AddressStatus")]
	public partial class AddressStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressStatusId;
		
		private string _AddressStatusName;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressStatusIdChanging(int value);
    partial void OnAddressStatusIdChanged();
    partial void OnAddressStatusNameChanging(string value);
    partial void OnAddressStatusNameChanged();
    #endregion
		
		public AddressStatus()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_AddressStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressStatusId
		{
			get
			{
				return this._AddressStatusId;
			}
			set
			{
				if ((this._AddressStatusId != value))
				{
					this.OnAddressStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AddressStatusId = value;
					this.SendPropertyChanged("AddressStatusId");
					this.OnAddressStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressStatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AddressStatusName
		{
			get
			{
				return this._AddressStatusName;
			}
			set
			{
				if ((this._AddressStatusName != value))
				{
					this.OnAddressStatusNameChanging(value);
					this.SendPropertyChanging();
					this._AddressStatusName = value;
					this.SendPropertyChanged("AddressStatusName");
					this.OnAddressStatusNameChanged();
				}
			}
		}
		
		[Association(Name="AddressStatus_Address", Storage="_Addresses", ThisKey="AddressStatusId", OtherKey="AddressStatusId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressStatus = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressStatus = null;
		}
	}
	
	[Table(Name="dbo.DetailLevel")]
	public partial class DetailLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailLevelId;
		
		private string _Name;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailLevelIdChanging(int value);
    partial void OnDetailLevelIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DetailLevel()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[Column(Storage="_DetailLevelId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DetailLevelId
		{
			get
			{
				return this._DetailLevelId;
			}
			set
			{
				if ((this._DetailLevelId != value))
				{
					this.OnDetailLevelIdChanging(value);
					this.SendPropertyChanging();
					this._DetailLevelId = value;
					this.SendPropertyChanged("DetailLevelId");
					this.OnDetailLevelIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="DetailLevel_Person", Storage="_Persons", ThisKey="DetailLevelId", OtherKey="DetailLevelId")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.DetailLevel = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.DetailLevel = null;
		}
	}
	
	[Table(Name="dbo.ChildRelationship")]
	public partial class ChildRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private EntityRef<Relationship> _Relationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    #endregion
		
		public ChildRelationship()
		{
			this._Relationship = default(EntityRef<Relationship>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Association(Name="Relationship_ChildRelationship", Storage="_Relationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.ChildRelationship = null;
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.ChildRelationship = this;
						this._RelationshipId = value.RelationshipId;
					}
					else
					{
						this._RelationshipId = default(System.Guid);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Municipality")]
	public partial class Municipality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MunicipalityCode;
		
		private string _MunicipalityName;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMunicipalityCodeChanging(string value);
    partial void OnMunicipalityCodeChanged();
    partial void OnMunicipalityNameChanging(string value);
    partial void OnMunicipalityNameChanged();
    #endregion
		
		public Municipality()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_MunicipalityCode", DbType="VarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MunicipalityCode
		{
			get
			{
				return this._MunicipalityCode;
			}
			set
			{
				if ((this._MunicipalityCode != value))
				{
					this.OnMunicipalityCodeChanging(value);
					this.SendPropertyChanging();
					this._MunicipalityCode = value;
					this.SendPropertyChanged("MunicipalityCode");
					this.OnMunicipalityCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MunicipalityName", DbType="NVarChar(24) NOT NULL", CanBeNull=false)]
		public string MunicipalityName
		{
			get
			{
				return this._MunicipalityName;
			}
			set
			{
				if ((this._MunicipalityName != value))
				{
					this.OnMunicipalityNameChanging(value);
					this.SendPropertyChanging();
					this._MunicipalityName = value;
					this.SendPropertyChanged("MunicipalityName");
					this.OnMunicipalityNameChanged();
				}
			}
		}
		
		[Association(Name="Municipality_Address", Storage="_Addresses", ThisKey="MunicipalityCode", OtherKey="MunicipalityCode")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Municipality = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Municipality = null;
		}
	}
	
	[Table(Name="dbo.CustodyRelationship")]
	public partial class CustodyRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private EntityRef<TimedRelationship> _TimedRelationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    #endregion
		
		public CustodyRelationship()
		{
			this._TimedRelationship = default(EntityRef<TimedRelationship>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._TimedRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Association(Name="TimedRelationship_CustodyRelationship", Storage="_TimedRelationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsForeignKey=true)]
		public TimedRelationship TimedRelationship
		{
			get
			{
				return this._TimedRelationship.Entity;
			}
			set
			{
				TimedRelationship previousValue = this._TimedRelationship.Entity;
				if (((previousValue != value) 
							|| (this._TimedRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimedRelationship.Entity = null;
						previousValue.CustodyRelationship = null;
					}
					this._TimedRelationship.Entity = value;
					if ((value != null))
					{
						value.CustodyRelationship = this;
						this._RelationshipId = value.RelationshipId;
					}
					else
					{
						this._RelationshipId = default(System.Guid);
					}
					this.SendPropertyChanged("TimedRelationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonId;
		
		private System.Nullable<int> _DetailLevelId;
		
		private string _NationalityCountryCode;
		
		private string _PersonNumber;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _NameForAddressing;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<bool> _BirthDateUncertaintyIndicator;
		
		private System.Nullable<System.DateTime> _DeathDate;
		
		private System.Nullable<bool> _DeathDateUncertaintyIndicator;
		
		private System.Nullable<int> _MaritalStatusTypeId;
		
		private string _PersonStatusTypeCode;
		
		private System.Nullable<System.DateTime> _PersonStatusDate;
		
		private System.Nullable<int> _GenderId;
		
		private System.Nullable<bool> _PersonProtectionIndicator;
		
		private System.Nullable<System.DateTime> _PersonProtectionIndicatorStartDate;
		
		private System.Nullable<System.DateTime> _PersonProtectionIndicatorEndDate;
		
		private System.DateTime _ModifiedDate;
		
		private bool _IsTestPerson;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<Relationship> _Relationships1;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<DetailLevel> _DetailLevel;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<MaritalStatusType> _MaritalStatusType;
		
		private EntityRef<PersonStatusType> _PersonStatusType;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnDetailLevelIdChanging(System.Nullable<int> value);
    partial void OnDetailLevelIdChanged();
    partial void OnNationalityCountryAlpha2CodeChanging(string value);
    partial void OnNationalityCountryAlpha2CodeChanged();
    partial void OnPersonNumberChanging(string value);
    partial void OnPersonNumberChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnNameForAddressingChanging(string value);
    partial void OnNameForAddressingChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnBirthDateUncertaintyIndicatorChanging(System.Nullable<bool> value);
    partial void OnBirthDateUncertaintyIndicatorChanged();
    partial void OnDeathDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeathDateChanged();
    partial void OnDeathDateUncertaintyIndicatorChanging(System.Nullable<bool> value);
    partial void OnDeathDateUncertaintyIndicatorChanged();
    partial void OnMaritalStatusTypeIdChanging(System.Nullable<int> value);
    partial void OnMaritalStatusTypeIdChanged();
    partial void OnPersonStatusTypeCodeChanging(string value);
    partial void OnPersonStatusTypeCodeChanged();
    partial void OnPersonStatusDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPersonStatusDateChanged();
    partial void OnGenderIdChanging(System.Nullable<int> value);
    partial void OnGenderIdChanged();
    partial void OnPersonProtectionIndicatorChanging(System.Nullable<bool> value);
    partial void OnPersonProtectionIndicatorChanged();
    partial void OnPersonProtectionIndicatorStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPersonProtectionIndicatorStartDateChanged();
    partial void OnPersonProtectionIndicatorEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPersonProtectionIndicatorEndDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnIsTestPersonChanging(bool value);
    partial void OnIsTestPersonChanged();
    #endregion
		
		public Person()
		{
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._Relationships1 = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships1), new Action<Relationship>(this.detach_Relationships1));
			this._Address = default(EntityRef<Address>);
			this._DetailLevel = default(EntityRef<DetailLevel>);
			this._Gender = default(EntityRef<Gender>);
			this._MaritalStatusType = default(EntityRef<MaritalStatusType>);
			this._PersonStatusType = default(EntityRef<PersonStatusType>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_DetailLevelId", DbType="Int")]
		public System.Nullable<int> DetailLevelId
		{
			get
			{
				return this._DetailLevelId;
			}
			set
			{
				if ((this._DetailLevelId != value))
				{
					if (this._DetailLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDetailLevelIdChanging(value);
					this.SendPropertyChanging();
					this._DetailLevelId = value;
					this.SendPropertyChanged("DetailLevelId");
					this.OnDetailLevelIdChanged();
				}
			}
		}
		
		[Column(Storage="_NationalityCountryCode", DbType="VarChar(2)")]
		public string NationalityCountryAlpha2Code
		{
			get
			{
				return this._NationalityCountryCode;
			}
			set
			{
				if ((this._NationalityCountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNationalityCountryAlpha2CodeChanging(value);
					this.SendPropertyChanging();
					this._NationalityCountryCode = value;
					this.SendPropertyChanged("NationalityCountryAlpha2Code");
					this.OnNationalityCountryAlpha2CodeChanged();
				}
			}
		}
		
		[Column(Storage="_PersonNumber", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string PersonNumber
		{
			get
			{
				return this._PersonNumber;
			}
			set
			{
				if ((this._PersonNumber != value))
				{
					this.OnPersonNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonNumber = value;
					this.SendPropertyChanged("PersonNumber");
					this.OnPersonNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(34)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="NVarChar(34)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(34)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_NameForAddressing", DbType="NVarChar(34)")]
		public string NameForAddressing
		{
			get
			{
				return this._NameForAddressing;
			}
			set
			{
				if ((this._NameForAddressing != value))
				{
					this.OnNameForAddressingChanging(value);
					this.SendPropertyChanging();
					this._NameForAddressing = value;
					this.SendPropertyChanged("NameForAddressing");
					this.OnNameForAddressingChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDateUncertaintyIndicator", DbType="Bit")]
		public System.Nullable<bool> BirthDateUncertaintyIndicator
		{
			get
			{
				return this._BirthDateUncertaintyIndicator;
			}
			set
			{
				if ((this._BirthDateUncertaintyIndicator != value))
				{
					this.OnBirthDateUncertaintyIndicatorChanging(value);
					this.SendPropertyChanging();
					this._BirthDateUncertaintyIndicator = value;
					this.SendPropertyChanged("BirthDateUncertaintyIndicator");
					this.OnBirthDateUncertaintyIndicatorChanged();
				}
			}
		}
		
		[Column(Storage="_DeathDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeathDate
		{
			get
			{
				return this._DeathDate;
			}
			set
			{
				if ((this._DeathDate != value))
				{
					this.OnDeathDateChanging(value);
					this.SendPropertyChanging();
					this._DeathDate = value;
					this.SendPropertyChanged("DeathDate");
					this.OnDeathDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeathDateUncertaintyIndicator", DbType="Bit")]
		public System.Nullable<bool> DeathDateUncertaintyIndicator
		{
			get
			{
				return this._DeathDateUncertaintyIndicator;
			}
			set
			{
				if ((this._DeathDateUncertaintyIndicator != value))
				{
					this.OnDeathDateUncertaintyIndicatorChanging(value);
					this.SendPropertyChanging();
					this._DeathDateUncertaintyIndicator = value;
					this.SendPropertyChanged("DeathDateUncertaintyIndicator");
					this.OnDeathDateUncertaintyIndicatorChanged();
				}
			}
		}
		
		[Column(Storage="_MaritalStatusTypeId", DbType="Int")]
		public System.Nullable<int> MaritalStatusTypeId
		{
			get
			{
				return this._MaritalStatusTypeId;
			}
			set
			{
				if ((this._MaritalStatusTypeId != value))
				{
					if (this._MaritalStatusType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaritalStatusTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusTypeId = value;
					this.SendPropertyChanged("MaritalStatusTypeId");
					this.OnMaritalStatusTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonStatusTypeCode", DbType="Char(2)")]
		public string PersonStatusTypeCode
		{
			get
			{
				return this._PersonStatusTypeCode;
			}
			set
			{
				if ((this._PersonStatusTypeCode != value))
				{
					if (this._PersonStatusType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonStatusTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._PersonStatusTypeCode = value;
					this.SendPropertyChanged("PersonStatusTypeCode");
					this.OnPersonStatusTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PersonStatusDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PersonStatusDate
		{
			get
			{
				return this._PersonStatusDate;
			}
			set
			{
				if ((this._PersonStatusDate != value))
				{
					this.OnPersonStatusDateChanging(value);
					this.SendPropertyChanging();
					this._PersonStatusDate = value;
					this.SendPropertyChanged("PersonStatusDate");
					this.OnPersonStatusDateChanged();
				}
			}
		}
		
		[Column(Storage="_GenderId", DbType="Int")]
		public System.Nullable<int> GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonProtectionIndicator", DbType="Bit")]
		public System.Nullable<bool> PersonProtectionIndicator
		{
			get
			{
				return this._PersonProtectionIndicator;
			}
			set
			{
				if ((this._PersonProtectionIndicator != value))
				{
					this.OnPersonProtectionIndicatorChanging(value);
					this.SendPropertyChanging();
					this._PersonProtectionIndicator = value;
					this.SendPropertyChanged("PersonProtectionIndicator");
					this.OnPersonProtectionIndicatorChanged();
				}
			}
		}
		
		[Column(Storage="_PersonProtectionIndicatorStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PersonProtectionIndicatorStartDate
		{
			get
			{
				return this._PersonProtectionIndicatorStartDate;
			}
			set
			{
				if ((this._PersonProtectionIndicatorStartDate != value))
				{
					this.OnPersonProtectionIndicatorStartDateChanging(value);
					this.SendPropertyChanging();
					this._PersonProtectionIndicatorStartDate = value;
					this.SendPropertyChanged("PersonProtectionIndicatorStartDate");
					this.OnPersonProtectionIndicatorStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_PersonProtectionIndicatorEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PersonProtectionIndicatorEndDate
		{
			get
			{
				return this._PersonProtectionIndicatorEndDate;
			}
			set
			{
				if ((this._PersonProtectionIndicatorEndDate != value))
				{
					this.OnPersonProtectionIndicatorEndDateChanging(value);
					this.SendPropertyChanging();
					this._PersonProtectionIndicatorEndDate = value;
					this.SendPropertyChanged("PersonProtectionIndicatorEndDate");
					this.OnPersonProtectionIndicatorEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsTestPerson", DbType="Bit NOT NULL")]
		public bool IsTestPerson
		{
			get
			{
				return this._IsTestPerson;
			}
			set
			{
				if ((this._IsTestPerson != value))
				{
					this.OnIsTestPersonChanging(value);
					this.SendPropertyChanging();
					this._IsTestPerson = value;
					this.SendPropertyChanged("IsTestPerson");
					this.OnIsTestPersonChanged();
				}
			}
		}
		
		[Association(Name="Person_Relationship", Storage="_Relationships", ThisKey="PersonId", OtherKey="PersonId")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[Association(Name="Person_Relationship1", Storage="_Relationships1", ThisKey="PersonId", OtherKey="RelatedPersonId")]
		public EntitySet<Relationship> Relationships1
		{
			get
			{
				return this._Relationships1;
			}
			set
			{
				this._Relationships1.Assign(value);
			}
		}
		
		[Association(Name="Person_Address", Storage="_Address", ThisKey="PersonId", OtherKey="PersonId", IsUnique=true, IsForeignKey=false)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Person = null;
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="DetailLevel_Person", Storage="_DetailLevel", ThisKey="DetailLevelId", OtherKey="DetailLevelId", IsForeignKey=true)]
		public DetailLevel DetailLevel
		{
			get
			{
				return this._DetailLevel.Entity;
			}
			set
			{
				DetailLevel previousValue = this._DetailLevel.Entity;
				if (((previousValue != value) 
							|| (this._DetailLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DetailLevel.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._DetailLevel.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._DetailLevelId = value.DetailLevelId;
					}
					else
					{
						this._DetailLevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DetailLevel");
				}
			}
		}
		
		[Association(Name="Gender_Person", Storage="_Gender", ThisKey="GenderId", OtherKey="GenderId", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._GenderId = value.GenderId;
					}
					else
					{
						this._GenderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[Association(Name="MaritalStatusType_Person", Storage="_MaritalStatusType", ThisKey="MaritalStatusTypeId", OtherKey="MaritalStatusTypeId", IsForeignKey=true)]
		public MaritalStatusType MaritalStatusType
		{
			get
			{
				return this._MaritalStatusType.Entity;
			}
			set
			{
				MaritalStatusType previousValue = this._MaritalStatusType.Entity;
				if (((previousValue != value) 
							|| (this._MaritalStatusType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalStatusType.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._MaritalStatusType.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._MaritalStatusTypeId = value.MaritalStatusTypeId;
					}
					else
					{
						this._MaritalStatusTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MaritalStatusType");
				}
			}
		}
		
		[Association(Name="PersonStatusType_Person", Storage="_PersonStatusType", ThisKey="PersonStatusTypeCode", OtherKey="PersonStatusTypeCode", IsForeignKey=true)]
		public PersonStatusType PersonStatusType
		{
			get
			{
				return this._PersonStatusType.Entity;
			}
			set
			{
				PersonStatusType previousValue = this._PersonStatusType.Entity;
				if (((previousValue != value) 
							|| (this._PersonStatusType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonStatusType.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._PersonStatusType.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._PersonStatusTypeCode = value.PersonStatusTypeCode;
					}
					else
					{
						this._PersonStatusTypeCode = default(string);
					}
					this.SendPropertyChanged("PersonStatusType");
				}
			}
		}
		
		[Association(Name="Country_Person", Storage="_Country", ThisKey="NationalityCountryAlpha2Code", OtherKey="Alpha2Code", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._NationalityCountryCode = value.Alpha2Code;
					}
					else
					{
						this._NationalityCountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Relationships1(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelatedPerson = this;
		}
		
		private void detach_Relationships1(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelatedPerson = null;
		}
	}
	
	[Table(Name="dbo.PersonStatusType")]
	public partial class PersonStatusType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PersonStatusTypeCode;
		
		private string _PersonStatusName;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonStatusTypeCodeChanging(string value);
    partial void OnPersonStatusTypeCodeChanged();
    partial void OnPersonStatusNameChanging(string value);
    partial void OnPersonStatusNameChanged();
    #endregion
		
		public PersonStatusType()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[Column(Storage="_PersonStatusTypeCode", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PersonStatusTypeCode
		{
			get
			{
				return this._PersonStatusTypeCode;
			}
			set
			{
				if ((this._PersonStatusTypeCode != value))
				{
					this.OnPersonStatusTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._PersonStatusTypeCode = value;
					this.SendPropertyChanged("PersonStatusTypeCode");
					this.OnPersonStatusTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PersonStatusName", DbType="NVarChar(90) NOT NULL", CanBeNull=false)]
		public string PersonStatusName
		{
			get
			{
				return this._PersonStatusName;
			}
			set
			{
				if ((this._PersonStatusName != value))
				{
					this.OnPersonStatusNameChanging(value);
					this.SendPropertyChanging();
					this._PersonStatusName = value;
					this.SendPropertyChanged("PersonStatusName");
					this.OnPersonStatusNameChanged();
				}
			}
		}
		
		[Association(Name="PersonStatusType_Person", Storage="_Persons", ThisKey="PersonStatusTypeCode", OtherKey="PersonStatusTypeCode")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonStatusType = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonStatusType = null;
		}
	}
	
	[Table(Name="dbo.TimedRelationship")]
	public partial class TimedRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntityRef<CustodyRelationship> _CustodyRelationship;
		
		private EntityRef<MaritalRelationship> _MaritalRelationship1;
		
		private EntityRef<Relationship> _Relationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public TimedRelationship()
		{
			this._CustodyRelationship = default(EntityRef<CustodyRelationship>);
			this._MaritalRelationship1 = default(EntityRef<MaritalRelationship>);
			this._Relationship = default(EntityRef<Relationship>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="TimedRelationship_CustodyRelationship", Storage="_CustodyRelationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsUnique=true, IsForeignKey=false)]
		public CustodyRelationship CustodyRelationship
		{
			get
			{
				return this._CustodyRelationship.Entity;
			}
			set
			{
				CustodyRelationship previousValue = this._CustodyRelationship.Entity;
				if (((previousValue != value) 
							|| (this._CustodyRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustodyRelationship.Entity = null;
						previousValue.TimedRelationship = null;
					}
					this._CustodyRelationship.Entity = value;
					if ((value != null))
					{
						value.TimedRelationship = this;
					}
					this.SendPropertyChanged("CustodyRelationship");
				}
			}
		}
		
		[Association(Name="TimedRelationship_MaritalRelationship", Storage="_MaritalRelationship1", ThisKey="RelationshipId", OtherKey="RelationshipId", IsUnique=true, IsForeignKey=false)]
		public MaritalRelationship MaritalRelationship
		{
			get
			{
				return this._MaritalRelationship1.Entity;
			}
			set
			{
				MaritalRelationship previousValue = this._MaritalRelationship1.Entity;
				if (((previousValue != value) 
							|| (this._MaritalRelationship1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalRelationship1.Entity = null;
						previousValue.TimedRelationship = null;
					}
					this._MaritalRelationship1.Entity = value;
					if ((value != null))
					{
						value.TimedRelationship = this;
					}
					this.SendPropertyChanged("MaritalRelationship");
				}
			}
		}
		
		[Association(Name="Relationship_TimedRelationship", Storage="_Relationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.TimedRelationship = null;
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.TimedRelationship = this;
						this._RelationshipId = value.RelationshipId;
					}
					else
					{
						this._RelationshipId = default(System.Guid);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Relationship")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private System.Guid _PersonId;
		
		private System.Guid _RelatedPersonId;
		
		private int _RelationshipTypeId;
		
		private System.DateTime _RegistrationDate;
		
		private EntityRef<ChildRelationship> _ChildRelationship;
		
		private EntityRef<TimedRelationship> _TimedRelationship;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Person> _RelatedPerson;
		
		private EntityRef<RelationshipType> _RelationshipType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnRelatedPersonIdChanging(System.Guid value);
    partial void OnRelatedPersonIdChanged();
    partial void OnRelationshipTypeIdChanging(int value);
    partial void OnRelationshipTypeIdChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    #endregion
		
		public Relationship()
		{
			this._ChildRelationship = default(EntityRef<ChildRelationship>);
			this._TimedRelationship = default(EntityRef<TimedRelationship>);
			this._Person = default(EntityRef<Person>);
			this._RelatedPerson = default(EntityRef<Person>);
			this._RelationshipType = default(EntityRef<RelationshipType>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_RelatedPersonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RelatedPersonId
		{
			get
			{
				return this._RelatedPersonId;
			}
			set
			{
				if ((this._RelatedPersonId != value))
				{
					if (this._RelatedPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelatedPersonIdChanging(value);
					this.SendPropertyChanging();
					this._RelatedPersonId = value;
					this.SendPropertyChanged("RelatedPersonId");
					this.OnRelatedPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_RelationshipTypeId", DbType="Int NOT NULL")]
		public int RelationshipTypeId
		{
			get
			{
				return this._RelationshipTypeId;
			}
			set
			{
				if ((this._RelationshipTypeId != value))
				{
					if (this._RelationshipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeId = value;
					this.SendPropertyChanged("RelationshipTypeId");
					this.OnRelationshipTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[Association(Name="Relationship_ChildRelationship", Storage="_ChildRelationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsUnique=true, IsForeignKey=false)]
		public ChildRelationship ChildRelationship
		{
			get
			{
				return this._ChildRelationship.Entity;
			}
			set
			{
				ChildRelationship previousValue = this._ChildRelationship.Entity;
				if (((previousValue != value) 
							|| (this._ChildRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildRelationship.Entity = null;
						previousValue.Relationship = null;
					}
					this._ChildRelationship.Entity = value;
					if ((value != null))
					{
						value.Relationship = this;
					}
					this.SendPropertyChanged("ChildRelationship");
				}
			}
		}
		
		[Association(Name="Relationship_TimedRelationship", Storage="_TimedRelationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsUnique=true, IsForeignKey=false)]
		public TimedRelationship TimedRelationship
		{
			get
			{
				return this._TimedRelationship.Entity;
			}
			set
			{
				TimedRelationship previousValue = this._TimedRelationship.Entity;
				if (((previousValue != value) 
							|| (this._TimedRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimedRelationship.Entity = null;
						previousValue.Relationship = null;
					}
					this._TimedRelationship.Entity = value;
					if ((value != null))
					{
						value.Relationship = this;
					}
					this.SendPropertyChanged("TimedRelationship");
				}
			}
		}
		
		[Association(Name="Person_Relationship", Storage="_Person", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="Person_Relationship1", Storage="_RelatedPerson", ThisKey="RelatedPersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person RelatedPerson
		{
			get
			{
				return this._RelatedPerson.Entity;
			}
			set
			{
				Person previousValue = this._RelatedPerson.Entity;
				if (((previousValue != value) 
							|| (this._RelatedPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelatedPerson.Entity = null;
						previousValue.Relationships1.Remove(this);
					}
					this._RelatedPerson.Entity = value;
					if ((value != null))
					{
						value.Relationships1.Add(this);
						this._RelatedPersonId = value.PersonId;
					}
					else
					{
						this._RelatedPersonId = default(System.Guid);
					}
					this.SendPropertyChanged("RelatedPerson");
				}
			}
		}
		
		[Association(Name="RelationshipType_Relationship", Storage="_RelationshipType", ThisKey="RelationshipTypeId", OtherKey="RelationshipTypeId", IsForeignKey=true)]
		public RelationshipType RelationshipType
		{
			get
			{
				return this._RelationshipType.Entity;
			}
			set
			{
				RelationshipType previousValue = this._RelationshipType.Entity;
				if (((previousValue != value) 
							|| (this._RelationshipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelationshipType.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._RelationshipType.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._RelationshipTypeId = value.RelationshipTypeId;
					}
					else
					{
						this._RelationshipTypeId = default(int);
					}
					this.SendPropertyChanged("RelationshipType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MaritalRelationship")]
	public partial class MaritalRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private System.Nullable<int> _MaritalStatusId;
		
		private EntityRef<TimedRelationship> _TimedRelationship1;
		
		private EntityRef<MaritalStatusType> _MaritalStatusType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    partial void OnMaritalStatusIdChanging(System.Nullable<int> value);
    partial void OnMaritalStatusIdChanged();
    #endregion
		
		public MaritalRelationship()
		{
			this._TimedRelationship1 = default(EntityRef<TimedRelationship>);
			this._MaritalStatusType = default(EntityRef<MaritalStatusType>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._TimedRelationship1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Column(Storage="_MaritalStatusId", DbType="Int")]
		public System.Nullable<int> MaritalStatusId
		{
			get
			{
				return this._MaritalStatusId;
			}
			set
			{
				if ((this._MaritalStatusId != value))
				{
					if (this._MaritalStatusType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaritalStatusIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusId = value;
					this.SendPropertyChanged("MaritalStatusId");
					this.OnMaritalStatusIdChanged();
				}
			}
		}
		
		[Association(Name="TimedRelationship_MaritalRelationship", Storage="_TimedRelationship1", ThisKey="RelationshipId", OtherKey="RelationshipId", IsForeignKey=true)]
		public TimedRelationship TimedRelationship
		{
			get
			{
				return this._TimedRelationship1.Entity;
			}
			set
			{
				TimedRelationship previousValue = this._TimedRelationship1.Entity;
				if (((previousValue != value) 
							|| (this._TimedRelationship1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimedRelationship1.Entity = null;
						previousValue.MaritalRelationship = null;
					}
					this._TimedRelationship1.Entity = value;
					if ((value != null))
					{
						value.MaritalRelationship = this;
						this._RelationshipId = value.RelationshipId;
					}
					else
					{
						this._RelationshipId = default(System.Guid);
					}
					this.SendPropertyChanged("TimedRelationship");
				}
			}
		}
		
		[Association(Name="MaritalStatusType_MaritalRelationship", Storage="_MaritalStatusType", ThisKey="MaritalStatusId", OtherKey="MaritalStatusTypeId", IsForeignKey=true)]
		public MaritalStatusType MaritalStatusType
		{
			get
			{
				return this._MaritalStatusType.Entity;
			}
			set
			{
				MaritalStatusType previousValue = this._MaritalStatusType.Entity;
				if (((previousValue != value) 
							|| (this._MaritalStatusType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalStatusType.Entity = null;
						previousValue.MaritalRelationships.Remove(this);
					}
					this._MaritalStatusType.Entity = value;
					if ((value != null))
					{
						value.MaritalRelationships.Add(this);
						this._MaritalStatusId = value.MaritalStatusTypeId;
					}
					else
					{
						this._MaritalStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MaritalStatusType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonId;
		
		private System.Nullable<int> _AddressStatusId;
		
		private string _CountryCode;
		
		private string _MunicipalityCode;
		
		private string _StreetCode;
		
		private string _StreetName;
		
		private string _StreetNameForAddressing;
		
		private string _StreetBuildingIdentifier;
		
		private string _FloorIdentifier;
		
		private string _SuiteIdentifier;
		
		private string _MailDeliverSubLocationIdentifier;
		
		private string _DistrictSubDivisionIdentifier;
		
		private string _PostBoxIdentifier;
		
		private string _PostCode;
		
		private string _PostDistrictName;
		
		private string _CareOfName;
		
		private string _Line1;
		
		private string _Line2;
		
		private string _Line3;
		
		private string _Line4;
		
		private string _Line5;
		
		private string _Line6;
		
		private string _LocationDescription;
		
		private EntityRef<AddressStatus> _AddressStatus;
		
		private EntityRef<Municipality> _Municipality;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnAddressStatusIdChanging(System.Nullable<int> value);
    partial void OnAddressStatusIdChanged();
    partial void OnCountryAlpha2CodeChanging(string value);
    partial void OnCountryAlpha2CodeChanged();
    partial void OnMunicipalityCodeChanging(string value);
    partial void OnMunicipalityCodeChanged();
    partial void OnStreetCodeChanging(string value);
    partial void OnStreetCodeChanged();
    partial void OnStreetNameChanging(string value);
    partial void OnStreetNameChanged();
    partial void OnStreetNameForAddressingChanging(string value);
    partial void OnStreetNameForAddressingChanged();
    partial void OnStreetBuildingIdentifierChanging(string value);
    partial void OnStreetBuildingIdentifierChanged();
    partial void OnFloorIdentifierChanging(string value);
    partial void OnFloorIdentifierChanged();
    partial void OnSuiteIdentifierChanging(string value);
    partial void OnSuiteIdentifierChanged();
    partial void OnMailDeliverSubLocationIdentifierChanging(string value);
    partial void OnMailDeliverSubLocationIdentifierChanged();
    partial void OnDistrictSubDivisionIdentifierChanging(string value);
    partial void OnDistrictSubDivisionIdentifierChanged();
    partial void OnPostBoxIdentifierChanging(string value);
    partial void OnPostBoxIdentifierChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    partial void OnPostDistrictNameChanging(string value);
    partial void OnPostDistrictNameChanged();
    partial void OnCareOfNameChanging(string value);
    partial void OnCareOfNameChanged();
    partial void OnLine1Changing(string value);
    partial void OnLine1Changed();
    partial void OnLine2Changing(string value);
    partial void OnLine2Changed();
    partial void OnLine3Changing(string value);
    partial void OnLine3Changed();
    partial void OnLine4Changing(string value);
    partial void OnLine4Changed();
    partial void OnLine5Changing(string value);
    partial void OnLine5Changed();
    partial void OnLine6Changing(string value);
    partial void OnLine6Changed();
    partial void OnLocationDescriptionChanging(string value);
    partial void OnLocationDescriptionChanged();
    #endregion
		
		public Address()
		{
			this._AddressStatus = default(EntityRef<AddressStatus>);
			this._Municipality = default(EntityRef<Municipality>);
			this._Person = default(EntityRef<Person>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressStatusId", DbType="Int")]
		public System.Nullable<int> AddressStatusId
		{
			get
			{
				return this._AddressStatusId;
			}
			set
			{
				if ((this._AddressStatusId != value))
				{
					if (this._AddressStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AddressStatusId = value;
					this.SendPropertyChanged("AddressStatusId");
					this.OnAddressStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="VarChar(2)")]
		public string CountryAlpha2Code
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryAlpha2CodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryAlpha2Code");
					this.OnCountryAlpha2CodeChanged();
				}
			}
		}
		
		[Column(Storage="_MunicipalityCode", DbType="VarChar(4)")]
		public string MunicipalityCode
		{
			get
			{
				return this._MunicipalityCode;
			}
			set
			{
				if ((this._MunicipalityCode != value))
				{
					if (this._Municipality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMunicipalityCodeChanging(value);
					this.SendPropertyChanging();
					this._MunicipalityCode = value;
					this.SendPropertyChanged("MunicipalityCode");
					this.OnMunicipalityCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StreetCode", DbType="VarChar(4)")]
		public string StreetCode
		{
			get
			{
				return this._StreetCode;
			}
			set
			{
				if ((this._StreetCode != value))
				{
					this.OnStreetCodeChanging(value);
					this.SendPropertyChanging();
					this._StreetCode = value;
					this.SendPropertyChanged("StreetCode");
					this.OnStreetCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StreetName", DbType="NVarChar(50)")]
		public string StreetName
		{
			get
			{
				return this._StreetName;
			}
			set
			{
				if ((this._StreetName != value))
				{
					this.OnStreetNameChanging(value);
					this.SendPropertyChanging();
					this._StreetName = value;
					this.SendPropertyChanged("StreetName");
					this.OnStreetNameChanged();
				}
			}
		}
		
		[Column(Storage="_StreetNameForAddressing", DbType="NVarChar(20)")]
		public string StreetNameForAddressing
		{
			get
			{
				return this._StreetNameForAddressing;
			}
			set
			{
				if ((this._StreetNameForAddressing != value))
				{
					this.OnStreetNameForAddressingChanging(value);
					this.SendPropertyChanging();
					this._StreetNameForAddressing = value;
					this.SendPropertyChanged("StreetNameForAddressing");
					this.OnStreetNameForAddressingChanged();
				}
			}
		}
		
		[Column(Storage="_StreetBuildingIdentifier", DbType="VarChar(4)")]
		public string StreetBuildingIdentifier
		{
			get
			{
				return this._StreetBuildingIdentifier;
			}
			set
			{
				if ((this._StreetBuildingIdentifier != value))
				{
					this.OnStreetBuildingIdentifierChanging(value);
					this.SendPropertyChanging();
					this._StreetBuildingIdentifier = value;
					this.SendPropertyChanged("StreetBuildingIdentifier");
					this.OnStreetBuildingIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_FloorIdentifier", DbType="VarChar(2)")]
		public string FloorIdentifier
		{
			get
			{
				return this._FloorIdentifier;
			}
			set
			{
				if ((this._FloorIdentifier != value))
				{
					this.OnFloorIdentifierChanging(value);
					this.SendPropertyChanging();
					this._FloorIdentifier = value;
					this.SendPropertyChanged("FloorIdentifier");
					this.OnFloorIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_SuiteIdentifier", DbType="NVarChar(4)")]
		public string SuiteIdentifier
		{
			get
			{
				return this._SuiteIdentifier;
			}
			set
			{
				if ((this._SuiteIdentifier != value))
				{
					this.OnSuiteIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SuiteIdentifier = value;
					this.SendPropertyChanged("SuiteIdentifier");
					this.OnSuiteIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_MailDeliverSubLocationIdentifier", DbType="NVarChar(34)")]
		public string MailDeliverSubLocationIdentifier
		{
			get
			{
				return this._MailDeliverSubLocationIdentifier;
			}
			set
			{
				if ((this._MailDeliverSubLocationIdentifier != value))
				{
					this.OnMailDeliverSubLocationIdentifierChanging(value);
					this.SendPropertyChanging();
					this._MailDeliverSubLocationIdentifier = value;
					this.SendPropertyChanged("MailDeliverSubLocationIdentifier");
					this.OnMailDeliverSubLocationIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_DistrictSubDivisionIdentifier", DbType="NVarChar(34)")]
		public string DistrictSubDivisionIdentifier
		{
			get
			{
				return this._DistrictSubDivisionIdentifier;
			}
			set
			{
				if ((this._DistrictSubDivisionIdentifier != value))
				{
					this.OnDistrictSubDivisionIdentifierChanging(value);
					this.SendPropertyChanging();
					this._DistrictSubDivisionIdentifier = value;
					this.SendPropertyChanged("DistrictSubDivisionIdentifier");
					this.OnDistrictSubDivisionIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_PostBoxIdentifier", DbType="NVarChar(4)")]
		public string PostBoxIdentifier
		{
			get
			{
				return this._PostBoxIdentifier;
			}
			set
			{
				if ((this._PostBoxIdentifier != value))
				{
					this.OnPostBoxIdentifierChanging(value);
					this.SendPropertyChanging();
					this._PostBoxIdentifier = value;
					this.SendPropertyChanged("PostBoxIdentifier");
					this.OnPostBoxIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_PostCode", DbType="VarChar(10)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PostDistrictName", DbType="NVarChar(20)")]
		public string PostDistrictName
		{
			get
			{
				return this._PostDistrictName;
			}
			set
			{
				if ((this._PostDistrictName != value))
				{
					this.OnPostDistrictNameChanging(value);
					this.SendPropertyChanging();
					this._PostDistrictName = value;
					this.SendPropertyChanged("PostDistrictName");
					this.OnPostDistrictNameChanged();
				}
			}
		}
		
		[Column(Storage="_CareOfName", DbType="NVarChar(50)")]
		public string CareOfName
		{
			get
			{
				return this._CareOfName;
			}
			set
			{
				if ((this._CareOfName != value))
				{
					this.OnCareOfNameChanging(value);
					this.SendPropertyChanging();
					this._CareOfName = value;
					this.SendPropertyChanged("CareOfName");
					this.OnCareOfNameChanged();
				}
			}
		}
		
		[Column(Storage="_Line1", DbType="NVarChar(50)")]
		public string Line1
		{
			get
			{
				return this._Line1;
			}
			set
			{
				if ((this._Line1 != value))
				{
					this.OnLine1Changing(value);
					this.SendPropertyChanging();
					this._Line1 = value;
					this.SendPropertyChanged("Line1");
					this.OnLine1Changed();
				}
			}
		}
		
		[Column(Storage="_Line2", DbType="NVarChar(50)")]
		public string Line2
		{
			get
			{
				return this._Line2;
			}
			set
			{
				if ((this._Line2 != value))
				{
					this.OnLine2Changing(value);
					this.SendPropertyChanging();
					this._Line2 = value;
					this.SendPropertyChanged("Line2");
					this.OnLine2Changed();
				}
			}
		}
		
		[Column(Storage="_Line3", DbType="NVarChar(50)")]
		public string Line3
		{
			get
			{
				return this._Line3;
			}
			set
			{
				if ((this._Line3 != value))
				{
					this.OnLine3Changing(value);
					this.SendPropertyChanging();
					this._Line3 = value;
					this.SendPropertyChanged("Line3");
					this.OnLine3Changed();
				}
			}
		}
		
		[Column(Storage="_Line4", DbType="NVarChar(50)")]
		public string Line4
		{
			get
			{
				return this._Line4;
			}
			set
			{
				if ((this._Line4 != value))
				{
					this.OnLine4Changing(value);
					this.SendPropertyChanging();
					this._Line4 = value;
					this.SendPropertyChanged("Line4");
					this.OnLine4Changed();
				}
			}
		}
		
		[Column(Storage="_Line5", DbType="NVarChar(50)")]
		public string Line5
		{
			get
			{
				return this._Line5;
			}
			set
			{
				if ((this._Line5 != value))
				{
					this.OnLine5Changing(value);
					this.SendPropertyChanging();
					this._Line5 = value;
					this.SendPropertyChanged("Line5");
					this.OnLine5Changed();
				}
			}
		}
		
		[Column(Storage="_Line6", DbType="NVarChar(50)")]
		public string Line6
		{
			get
			{
				return this._Line6;
			}
			set
			{
				if ((this._Line6 != value))
				{
					this.OnLine6Changing(value);
					this.SendPropertyChanging();
					this._Line6 = value;
					this.SendPropertyChanged("Line6");
					this.OnLine6Changed();
				}
			}
		}
		
		[Column(Storage="_LocationDescription", DbType="NVarChar(50)")]
		public string LocationDescription
		{
			get
			{
				return this._LocationDescription;
			}
			set
			{
				if ((this._LocationDescription != value))
				{
					this.OnLocationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LocationDescription = value;
					this.SendPropertyChanged("LocationDescription");
					this.OnLocationDescriptionChanged();
				}
			}
		}
		
		[Association(Name="AddressStatus_Address", Storage="_AddressStatus", ThisKey="AddressStatusId", OtherKey="AddressStatusId", IsForeignKey=true)]
		public AddressStatus AddressStatus
		{
			get
			{
				return this._AddressStatus.Entity;
			}
			set
			{
				AddressStatus previousValue = this._AddressStatus.Entity;
				if (((previousValue != value) 
							|| (this._AddressStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressStatus.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._AddressStatus.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._AddressStatusId = value.AddressStatusId;
					}
					else
					{
						this._AddressStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AddressStatus");
				}
			}
		}
		
		[Association(Name="Municipality_Address", Storage="_Municipality", ThisKey="MunicipalityCode", OtherKey="MunicipalityCode", IsForeignKey=true)]
		public Municipality Municipality
		{
			get
			{
				return this._Municipality.Entity;
			}
			set
			{
				Municipality previousValue = this._Municipality.Entity;
				if (((previousValue != value) 
							|| (this._Municipality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Municipality.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Municipality.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._MunicipalityCode = value.MunicipalityCode;
					}
					else
					{
						this._MunicipalityCode = default(string);
					}
					this.SendPropertyChanged("Municipality");
				}
			}
		}
		
		[Association(Name="Person_Address", Storage="_Person", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Address = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Address = this;
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="Country_Address", Storage="_Country", ThisKey="CountryAlpha2Code", OtherKey="Alpha2Code", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CountryCode = value.Alpha2Code;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OperationType")]
	public partial class OperationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperationTypeId;
		
		private string _OperationName;
		
		private string _SourceTableName;
		
		private string _OldTableName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperationTypeIdChanging(int value);
    partial void OnOperationTypeIdChanged();
    partial void OnOperationNameChanging(string value);
    partial void OnOperationNameChanged();
    partial void OnSourceTableNameChanging(string value);
    partial void OnSourceTableNameChanged();
    partial void OnOldTableNameChanging(string value);
    partial void OnOldTableNameChanged();
    #endregion
		
		public OperationType()
		{
			OnCreated();
		}
		
		[Column(Storage="_OperationTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OperationTypeId
		{
			get
			{
				return this._OperationTypeId;
			}
			set
			{
				if ((this._OperationTypeId != value))
				{
					this.OnOperationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeId = value;
					this.SendPropertyChanged("OperationTypeId");
					this.OnOperationTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_OperationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OperationName
		{
			get
			{
				return this._OperationName;
			}
			set
			{
				if ((this._OperationName != value))
				{
					this.OnOperationNameChanging(value);
					this.SendPropertyChanging();
					this._OperationName = value;
					this.SendPropertyChanged("OperationName");
					this.OnOperationNameChanged();
				}
			}
		}
		
		[Column(Storage="_SourceTableName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SourceTableName
		{
			get
			{
				return this._SourceTableName;
			}
			set
			{
				if ((this._SourceTableName != value))
				{
					this.OnSourceTableNameChanging(value);
					this.SendPropertyChanging();
					this._SourceTableName = value;
					this.SendPropertyChanged("SourceTableName");
					this.OnSourceTableNameChanged();
				}
			}
		}
		
		[Column(Storage="_OldTableName", DbType="VarChar(50)")]
		public string OldTableName
		{
			get
			{
				return this._OldTableName;
			}
			set
			{
				if ((this._OldTableName != value))
				{
					this.OnOldTableNameChanging(value);
					this.SendPropertyChanging();
					this._OldTableName = value;
					this.SendPropertyChanged("OldTableName");
					this.OnOldTableNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Alpha2Code;
		
		private string _Alpha3Code;
		
		private int _NumericCode;
		
		private string _CountryName;
		
		private string _Description;
		
		private string _DanishCountryName;
		
		private string _DanishCountryName2;
		
		private System.Nullable<int> _KmdCode;
		
		private System.Nullable<int> _KmdCode2;
		
		private System.Nullable<int> _KmdCode3;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlpha2CodeChanging(string value);
    partial void OnAlpha2CodeChanged();
    partial void OnAlpha3CodeChanging(string value);
    partial void OnAlpha3CodeChanged();
    partial void OnNumericCodeChanging(int value);
    partial void OnNumericCodeChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDanishCountryNameChanging(string value);
    partial void OnDanishCountryNameChanged();
    partial void OnDanishCountryName2Changing(string value);
    partial void OnDanishCountryName2Changed();
    partial void OnKmdCodeChanging(System.Nullable<int> value);
    partial void OnKmdCodeChanged();
    partial void OnKmdCode2Changing(System.Nullable<int> value);
    partial void OnKmdCode2Changed();
    partial void OnKmdCode3Changing(System.Nullable<int> value);
    partial void OnKmdCode3Changed();
    #endregion
		
		public Country()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_Alpha2Code", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Alpha2Code
		{
			get
			{
				return this._Alpha2Code;
			}
			set
			{
				if ((this._Alpha2Code != value))
				{
					this.OnAlpha2CodeChanging(value);
					this.SendPropertyChanging();
					this._Alpha2Code = value;
					this.SendPropertyChanged("Alpha2Code");
					this.OnAlpha2CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Alpha3Code", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Alpha3Code
		{
			get
			{
				return this._Alpha3Code;
			}
			set
			{
				if ((this._Alpha3Code != value))
				{
					this.OnAlpha3CodeChanging(value);
					this.SendPropertyChanging();
					this._Alpha3Code = value;
					this.SendPropertyChanged("Alpha3Code");
					this.OnAlpha3CodeChanged();
				}
			}
		}
		
		[Column(Storage="_NumericCode", DbType="Int NOT NULL")]
		public int NumericCode
		{
			get
			{
				return this._NumericCode;
			}
			set
			{
				if ((this._NumericCode != value))
				{
					this.OnNumericCodeChanging(value);
					this.SendPropertyChanging();
					this._NumericCode = value;
					this.SendPropertyChanged("NumericCode");
					this.OnNumericCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DanishCountryName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string DanishCountryName
		{
			get
			{
				return this._DanishCountryName;
			}
			set
			{
				if ((this._DanishCountryName != value))
				{
					this.OnDanishCountryNameChanging(value);
					this.SendPropertyChanging();
					this._DanishCountryName = value;
					this.SendPropertyChanged("DanishCountryName");
					this.OnDanishCountryNameChanged();
				}
			}
		}
		
		[Column(Storage="_DanishCountryName2", DbType="NVarChar(50)")]
		public string DanishCountryName2
		{
			get
			{
				return this._DanishCountryName2;
			}
			set
			{
				if ((this._DanishCountryName2 != value))
				{
					this.OnDanishCountryName2Changing(value);
					this.SendPropertyChanging();
					this._DanishCountryName2 = value;
					this.SendPropertyChanged("DanishCountryName2");
					this.OnDanishCountryName2Changed();
				}
			}
		}
		
		[Column(Storage="_KmdCode", DbType="Int")]
		public System.Nullable<int> KmdCode
		{
			get
			{
				return this._KmdCode;
			}
			set
			{
				if ((this._KmdCode != value))
				{
					this.OnKmdCodeChanging(value);
					this.SendPropertyChanging();
					this._KmdCode = value;
					this.SendPropertyChanged("KmdCode");
					this.OnKmdCodeChanged();
				}
			}
		}
		
		[Column(Storage="_KmdCode2", DbType="Int")]
		public System.Nullable<int> KmdCode2
		{
			get
			{
				return this._KmdCode2;
			}
			set
			{
				if ((this._KmdCode2 != value))
				{
					this.OnKmdCode2Changing(value);
					this.SendPropertyChanging();
					this._KmdCode2 = value;
					this.SendPropertyChanged("KmdCode2");
					this.OnKmdCode2Changed();
				}
			}
		}
		
		[Column(Storage="_KmdCode3", DbType="Int")]
		public System.Nullable<int> KmdCode3
		{
			get
			{
				return this._KmdCode3;
			}
			set
			{
				if ((this._KmdCode3 != value))
				{
					this.OnKmdCode3Changing(value);
					this.SendPropertyChanging();
					this._KmdCode3 = value;
					this.SendPropertyChanged("KmdCode3");
					this.OnKmdCode3Changed();
				}
			}
		}
		
		[Association(Name="Country_Person", Storage="_Persons", ThisKey="Alpha2Code", OtherKey="NationalityCountryAlpha2Code")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[Association(Name="Country_Address", Storage="_Addresses", ThisKey="Alpha2Code", OtherKey="CountryAlpha2Code")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
}
#pragma warning restore 1591
