#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CPRBroker.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CPRBroker")]
	public partial class CPRBrokerDALDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRelationshipType(RelationshipType instance);
    partial void UpdateRelationshipType(RelationshipType instance);
    partial void DeleteRelationshipType(RelationshipType instance);
    partial void InsertMaritalStatusType(MaritalStatusType instance);
    partial void UpdateMaritalStatusType(MaritalStatusType instance);
    partial void DeleteMaritalStatusType(MaritalStatusType instance);
    partial void InsertLogType(LogType instance);
    partial void UpdateLogType(LogType instance);
    partial void DeleteLogType(LogType instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertAddressStatus(AddressStatus instance);
    partial void UpdateAddressStatus(AddressStatus instance);
    partial void DeleteAddressStatus(AddressStatus instance);
    partial void InsertBirthdateSubscription(BirthdateSubscription instance);
    partial void UpdateBirthdateSubscription(BirthdateSubscription instance);
    partial void DeleteBirthdateSubscription(BirthdateSubscription instance);
    partial void InsertDataSubscription(DataSubscription instance);
    partial void UpdateDataSubscription(DataSubscription instance);
    partial void DeleteDataSubscription(DataSubscription instance);
    partial void InsertSubscriptionField(SubscriptionField instance);
    partial void UpdateSubscriptionField(SubscriptionField instance);
    partial void DeleteSubscriptionField(SubscriptionField instance);
    partial void InsertSubscriptionPerson(SubscriptionPerson instance);
    partial void UpdateSubscriptionPerson(SubscriptionPerson instance);
    partial void DeleteSubscriptionPerson(SubscriptionPerson instance);
    partial void InsertSubscriptionType(SubscriptionType instance);
    partial void UpdateSubscriptionType(SubscriptionType instance);
    partial void DeleteSubscriptionType(SubscriptionType instance);
    partial void InsertDataProviderType(DataProviderType instance);
    partial void UpdateDataProviderType(DataProviderType instance);
    partial void DeleteDataProviderType(DataProviderType instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertChannel(Channel instance);
    partial void UpdateChannel(Channel instance);
    partial void DeleteChannel(Channel instance);
    partial void InsertGpacChannel(GpacChannel instance);
    partial void UpdateGpacChannel(GpacChannel instance);
    partial void DeleteGpacChannel(GpacChannel instance);
    partial void InsertSubscription(Subscription instance);
    partial void UpdateSubscription(Subscription instance);
    partial void DeleteSubscription(Subscription instance);
    partial void InsertDataProvider(DataProvider instance);
    partial void UpdateDataProvider(DataProvider instance);
    partial void DeleteDataProvider(DataProvider instance);
    partial void InsertDetailLevel(DetailLevel instance);
    partial void UpdateDetailLevel(DetailLevel instance);
    partial void DeleteDetailLevel(DetailLevel instance);
    partial void InsertChildRelationship(ChildRelationship instance);
    partial void UpdateChildRelationship(ChildRelationship instance);
    partial void DeleteChildRelationship(ChildRelationship instance);
    partial void InsertLogEntry(LogEntry instance);
    partial void UpdateLogEntry(LogEntry instance);
    partial void DeleteLogEntry(LogEntry instance);
    partial void InsertMunicipality(Municipality instance);
    partial void UpdateMunicipality(Municipality instance);
    partial void DeleteMunicipality(Municipality instance);
    partial void InsertCustodyRelationship(CustodyRelationship instance);
    partial void UpdateCustodyRelationship(CustodyRelationship instance);
    partial void DeleteCustodyRelationship(CustodyRelationship instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonStatusType(PersonStatusType instance);
    partial void UpdatePersonStatusType(PersonStatusType instance);
    partial void DeletePersonStatusType(PersonStatusType instance);
    partial void InsertTimedRelationship(TimedRelationship instance);
    partial void UpdateTimedRelationship(TimedRelationship instance);
    partial void DeleteTimedRelationship(TimedRelationship instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertMaritalRelationship(MaritalRelationship instance);
    partial void UpdateMaritalRelationship(MaritalRelationship instance);
    partial void DeleteMaritalRelationship(MaritalRelationship instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertOperationType(OperationType instance);
    partial void UpdateOperationType(OperationType instance);
    partial void DeleteOperationType(OperationType instance);
    partial void InsertBirthdateNotification(BirthdateNotification instance);
    partial void UpdateBirthdateNotification(BirthdateNotification instance);
    partial void DeleteBirthdateNotification(BirthdateNotification instance);
    partial void InsertNotificationPerson(NotificationPerson instance);
    partial void UpdateNotificationPerson(NotificationPerson instance);
    partial void DeleteNotificationPerson(NotificationPerson instance);
    partial void InsertBirthdateNotificationPerson(BirthdateNotificationPerson instance);
    partial void UpdateBirthdateNotificationPerson(BirthdateNotificationPerson instance);
    partial void DeleteBirthdateNotificationPerson(BirthdateNotificationPerson instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertChannelType(ChannelType instance);
    partial void UpdateChannelType(ChannelType instance);
    partial void DeleteChannelType(ChannelType instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    #endregion
		
		public CPRBrokerDALDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPRBrokerDALDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPRBrokerDALDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CPRBrokerDALDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RelationshipType> RelationshipTypes
		{
			get
			{
				return this.GetTable<RelationshipType>();
			}
		}
		
		public System.Data.Linq.Table<MaritalStatusType> MaritalStatusTypes
		{
			get
			{
				return this.GetTable<MaritalStatusType>();
			}
		}
		
		public System.Data.Linq.Table<LogType> LogTypes
		{
			get
			{
				return this.GetTable<LogType>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<AddressStatus> AddressStatus
		{
			get
			{
				return this.GetTable<AddressStatus>();
			}
		}
		
		public System.Data.Linq.Table<BirthdateSubscription> BirthdateSubscriptions
		{
			get
			{
				return this.GetTable<BirthdateSubscription>();
			}
		}
		
		public System.Data.Linq.Table<DataSubscription> DataSubscriptions
		{
			get
			{
				return this.GetTable<DataSubscription>();
			}
		}
		
		public System.Data.Linq.Table<SubscriptionField> SubscriptionFields
		{
			get
			{
				return this.GetTable<SubscriptionField>();
			}
		}
		
		public System.Data.Linq.Table<SubscriptionPerson> SubscriptionPersons
		{
			get
			{
				return this.GetTable<SubscriptionPerson>();
			}
		}
		
		public System.Data.Linq.Table<SubscriptionType> SubscriptionTypes
		{
			get
			{
				return this.GetTable<SubscriptionType>();
			}
		}
		
		public System.Data.Linq.Table<DataProviderType> DataProviderTypes
		{
			get
			{
				return this.GetTable<DataProviderType>();
			}
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<Channel> Channels
		{
			get
			{
				return this.GetTable<Channel>();
			}
		}
		
		public System.Data.Linq.Table<GpacChannel> GpacChannels
		{
			get
			{
				return this.GetTable<GpacChannel>();
			}
		}
		
		public System.Data.Linq.Table<Subscription> Subscriptions
		{
			get
			{
				return this.GetTable<Subscription>();
			}
		}
		
		public System.Data.Linq.Table<DataProvider> DataProviders
		{
			get
			{
				return this.GetTable<DataProvider>();
			}
		}
		
		public System.Data.Linq.Table<DetailLevel> DetailLevels
		{
			get
			{
				return this.GetTable<DetailLevel>();
			}
		}
		
		public System.Data.Linq.Table<ChildRelationship> ChildRelationships
		{
			get
			{
				return this.GetTable<ChildRelationship>();
			}
		}
		
		public System.Data.Linq.Table<LogEntry> LogEntries
		{
			get
			{
				return this.GetTable<LogEntry>();
			}
		}
		
		public System.Data.Linq.Table<Municipality> Municipalities
		{
			get
			{
				return this.GetTable<Municipality>();
			}
		}
		
		public System.Data.Linq.Table<CustodyRelationship> CustodyRelationships
		{
			get
			{
				return this.GetTable<CustodyRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonStatusType> PersonStatusTypes
		{
			get
			{
				return this.GetTable<PersonStatusType>();
			}
		}
		
		public System.Data.Linq.Table<TimedRelationship> TimedRelationships
		{
			get
			{
				return this.GetTable<TimedRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<MaritalRelationship> MaritalRelationships
		{
			get
			{
				return this.GetTable<MaritalRelationship>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<OperationType> OperationTypes
		{
			get
			{
				return this.GetTable<OperationType>();
			}
		}
		
		public System.Data.Linq.Table<BirthdateNotification> BirthdateNotifications
		{
			get
			{
				return this.GetTable<BirthdateNotification>();
			}
		}
		
		public System.Data.Linq.Table<NotificationPerson> NotificationPersons
		{
			get
			{
				return this.GetTable<NotificationPerson>();
			}
		}
		
		public System.Data.Linq.Table<BirthdateNotificationPerson> BirthdateNotificationPersons
		{
			get
			{
				return this.GetTable<BirthdateNotificationPerson>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<ChannelType> ChannelTypes
		{
			get
			{
				return this.GetTable<ChannelType>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		[Function(Name="dbo.GetDueNotifications")]
		public ISingleResult<Subscription> GetDueNotifications([Parameter(Name="Now", DbType="DateTime")] System.Nullable<System.DateTime> now, [Parameter(Name="LastTime", DbType="DateTime")] System.Nullable<System.DateTime> lastTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), now, lastTime);
			return ((ISingleResult<Subscription>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.InsertBirthdateNotificationData")]
		public ISingleResult<Notification> InsertBirthdateNotificationData([Parameter(Name="SubscriptionId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> subscriptionId, [Parameter(Name="Today", DbType="DateTime")] System.Nullable<System.DateTime> today)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), subscriptionId, today);
			return ((ISingleResult<Notification>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.InsertChangeNotificationData")]
		public ISingleResult<Notification> InsertChangeNotificationData([Parameter(Name="SubscriptionId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> subscriptionId, [Parameter(Name="Today", DbType="DateTime")] System.Nullable<System.DateTime> today, [Parameter(Name="LastTime", DbType="DateTime")] System.Nullable<System.DateTime> lastTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), subscriptionId, today, lastTime);
			return ((ISingleResult<Notification>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.RelationshipType")]
	public partial class RelationshipType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationshipTypeId;
		
		private string _ForwardName;
		
		private string _BackwardName;
		
		private EntitySet<Relationship> _Relationships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipTypeIdChanging(int value);
    partial void OnRelationshipTypeIdChanged();
    partial void OnForwardNameChanging(string value);
    partial void OnForwardNameChanged();
    partial void OnBackwardNameChanging(string value);
    partial void OnBackwardNameChanged();
    #endregion
		
		public RelationshipType()
		{
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			OnCreated();
		}
		
		[Column(Storage="_RelationshipTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RelationshipTypeId
		{
			get
			{
				return this._RelationshipTypeId;
			}
			set
			{
				if ((this._RelationshipTypeId != value))
				{
					this.OnRelationshipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeId = value;
					this.SendPropertyChanged("RelationshipTypeId");
					this.OnRelationshipTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ForwardName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ForwardName
		{
			get
			{
				return this._ForwardName;
			}
			set
			{
				if ((this._ForwardName != value))
				{
					this.OnForwardNameChanging(value);
					this.SendPropertyChanging();
					this._ForwardName = value;
					this.SendPropertyChanged("ForwardName");
					this.OnForwardNameChanged();
				}
			}
		}
		
		[Column(Storage="_BackwardName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BackwardName
		{
			get
			{
				return this._BackwardName;
			}
			set
			{
				if ((this._BackwardName != value))
				{
					this.OnBackwardNameChanging(value);
					this.SendPropertyChanging();
					this._BackwardName = value;
					this.SendPropertyChanged("BackwardName");
					this.OnBackwardNameChanged();
				}
			}
		}
		
		[Association(Name="RelationshipType_Relationship", Storage="_Relationships", ThisKey="RelationshipTypeId", OtherKey="RelationshipTypeId")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelationshipType = null;
		}
	}
	
	[Table(Name="dbo.MaritalStatusType")]
	public partial class MaritalStatusType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaritalStatusTypeId;
		
		private string _MaritalStatusName;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<MaritalRelationship> _MaritalRelationships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaritalStatusTypeIdChanging(int value);
    partial void OnMaritalStatusTypeIdChanged();
    partial void OnMaritalStatusNameChanging(string value);
    partial void OnMaritalStatusNameChanged();
    #endregion
		
		public MaritalStatusType()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._MaritalRelationships = new EntitySet<MaritalRelationship>(new Action<MaritalRelationship>(this.attach_MaritalRelationships), new Action<MaritalRelationship>(this.detach_MaritalRelationships));
			OnCreated();
		}
		
		[Column(Storage="_MaritalStatusTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaritalStatusTypeId
		{
			get
			{
				return this._MaritalStatusTypeId;
			}
			set
			{
				if ((this._MaritalStatusTypeId != value))
				{
					this.OnMaritalStatusTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusTypeId = value;
					this.SendPropertyChanged("MaritalStatusTypeId");
					this.OnMaritalStatusTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_MaritalStatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaritalStatusName
		{
			get
			{
				return this._MaritalStatusName;
			}
			set
			{
				if ((this._MaritalStatusName != value))
				{
					this.OnMaritalStatusNameChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusName = value;
					this.SendPropertyChanged("MaritalStatusName");
					this.OnMaritalStatusNameChanged();
				}
			}
		}
		
		[Association(Name="MaritalStatusType_Person", Storage="_Persons", ThisKey="MaritalStatusTypeId", OtherKey="MaritalStatusTypeId")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[Association(Name="MaritalStatusType_MaritalRelationship", Storage="_MaritalRelationships", ThisKey="MaritalStatusTypeId", OtherKey="MaritalStatusId")]
		public EntitySet<MaritalRelationship> MaritalRelationships
		{
			get
			{
				return this._MaritalRelationships;
			}
			set
			{
				this._MaritalRelationships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatusType = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatusType = null;
		}
		
		private void attach_MaritalRelationships(MaritalRelationship entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatusType = this;
		}
		
		private void detach_MaritalRelationships(MaritalRelationship entity)
		{
			this.SendPropertyChanging();
			entity.MaritalStatusType = null;
		}
	}
	
	[Table(Name="dbo.LogType")]
	public partial class LogType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogTypeId;
		
		private string _Name;
		
		private EntitySet<LogEntry> _LogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogTypeIdChanging(int value);
    partial void OnLogTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public LogType()
		{
			this._LogEntries = new EntitySet<LogEntry>(new Action<LogEntry>(this.attach_LogEntries), new Action<LogEntry>(this.detach_LogEntries));
			OnCreated();
		}
		
		[Column(Storage="_LogTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LogTypeId
		{
			get
			{
				return this._LogTypeId;
			}
			set
			{
				if ((this._LogTypeId != value))
				{
					this.OnLogTypeIdChanging(value);
					this.SendPropertyChanging();
					this._LogTypeId = value;
					this.SendPropertyChanged("LogTypeId");
					this.OnLogTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="LogType_LogEntry", Storage="_LogEntries", ThisKey="LogTypeId", OtherKey="LogTypeId")]
		public EntitySet<LogEntry> LogEntries
		{
			get
			{
				return this._LogEntries;
			}
			set
			{
				this._LogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.LogType = this;
		}
		
		private void detach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.LogType = null;
		}
	}
	
	[Table(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenderId;
		
		private string _GenderName;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIdChanging(int value);
    partial void OnGenderIdChanged();
    partial void OnGenderNameChanging(string value);
    partial void OnGenderNameChanged();
    #endregion
		
		public Gender()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[Column(Storage="_GenderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[Column(Storage="_GenderName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GenderName
		{
			get
			{
				return this._GenderName;
			}
			set
			{
				if ((this._GenderName != value))
				{
					this.OnGenderNameChanging(value);
					this.SendPropertyChanging();
					this._GenderName = value;
					this.SendPropertyChanged("GenderName");
					this.OnGenderNameChanged();
				}
			}
		}
		
		[Association(Name="Gender_Person", Storage="_Persons", ThisKey="GenderId", OtherKey="GenderId")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[Table(Name="dbo.AddressType")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressTypeId;
		
		private string _AddressTypeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressTypeIdChanging(int value);
    partial void OnAddressTypeIdChanged();
    partial void OnAddressTypeNameChanging(string value);
    partial void OnAddressTypeNameChanged();
    #endregion
		
		public AddressType()
		{
			OnCreated();
		}
		
		[Column(Storage="_AddressTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressTypeId
		{
			get
			{
				return this._AddressTypeId;
			}
			set
			{
				if ((this._AddressTypeId != value))
				{
					this.OnAddressTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeId = value;
					this.SendPropertyChanged("AddressTypeId");
					this.OnAddressTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AddressTypeName
		{
			get
			{
				return this._AddressTypeName;
			}
			set
			{
				if ((this._AddressTypeName != value))
				{
					this.OnAddressTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeName = value;
					this.SendPropertyChanged("AddressTypeName");
					this.OnAddressTypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AddressStatus")]
	public partial class AddressStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressStatusId;
		
		private string _AddressStatusName;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressStatusIdChanging(int value);
    partial void OnAddressStatusIdChanged();
    partial void OnAddressStatusNameChanging(string value);
    partial void OnAddressStatusNameChanged();
    #endregion
		
		public AddressStatus()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_AddressStatusId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressStatusId
		{
			get
			{
				return this._AddressStatusId;
			}
			set
			{
				if ((this._AddressStatusId != value))
				{
					this.OnAddressStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AddressStatusId = value;
					this.SendPropertyChanged("AddressStatusId");
					this.OnAddressStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressStatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AddressStatusName
		{
			get
			{
				return this._AddressStatusName;
			}
			set
			{
				if ((this._AddressStatusName != value))
				{
					this.OnAddressStatusNameChanging(value);
					this.SendPropertyChanging();
					this._AddressStatusName = value;
					this.SendPropertyChanged("AddressStatusName");
					this.OnAddressStatusNameChanged();
				}
			}
		}
		
		[Association(Name="AddressStatus_Address", Storage="_Addresses", ThisKey="AddressStatusId", OtherKey="AddressStatusId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressStatus = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressStatus = null;
		}
	}
	
	[Table(Name="dbo.BirthdateSubscription")]
	public partial class BirthdateSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionId;
		
		private System.Nullable<int> _AgeYears;
		
		private int _PriorDays;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnAgeYearsChanging(System.Nullable<int> value);
    partial void OnAgeYearsChanged();
    partial void OnPriorDaysChanging(int value);
    partial void OnPriorDaysChanged();
    #endregion
		
		public BirthdateSubscription()
		{
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_AgeYears", DbType="Int")]
		public System.Nullable<int> AgeYears
		{
			get
			{
				return this._AgeYears;
			}
			set
			{
				if ((this._AgeYears != value))
				{
					this.OnAgeYearsChanging(value);
					this.SendPropertyChanging();
					this._AgeYears = value;
					this.SendPropertyChanged("AgeYears");
					this.OnAgeYearsChanged();
				}
			}
		}
		
		[Column(Storage="_PriorDays", DbType="Int NOT NULL")]
		public int PriorDays
		{
			get
			{
				return this._PriorDays;
			}
			set
			{
				if ((this._PriorDays != value))
				{
					this.OnPriorDaysChanging(value);
					this.SendPropertyChanging();
					this._PriorDays = value;
					this.SendPropertyChanged("PriorDays");
					this.OnPriorDaysChanged();
				}
			}
		}
		
		[Association(Name="Subscription_BirthdateSubscription", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true)]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.BirthdateSubscription = null;
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.BirthdateSubscription = this;
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DataSubscription")]
	public partial class DataSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionId;
		
		private EntitySet<SubscriptionField> _SubscriptionFields;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    #endregion
		
		public DataSubscription()
		{
			this._SubscriptionFields = new EntitySet<SubscriptionField>(new Action<SubscriptionField>(this.attach_SubscriptionFields), new Action<SubscriptionField>(this.detach_SubscriptionFields));
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Association(Name="DataSubscription_SubscriptionField", Storage="_SubscriptionFields", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<SubscriptionField> SubscriptionFields
		{
			get
			{
				return this._SubscriptionFields;
			}
			set
			{
				this._SubscriptionFields.Assign(value);
			}
		}
		
		[Association(Name="Subscription_DataSubscription", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true)]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.DataSubscription = null;
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.DataSubscription = this;
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubscriptionFields(SubscriptionField entity)
		{
			this.SendPropertyChanging();
			entity.DataSubscription = this;
		}
		
		private void detach_SubscriptionFields(SubscriptionField entity)
		{
			this.SendPropertyChanging();
			entity.DataSubscription = null;
		}
	}
	
	[Table(Name="dbo.SubscriptionField")]
	public partial class SubscriptionField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionFieldId;
		
		private System.Nullable<System.Guid> _SubscriptionId;
		
		private System.Nullable<int> _FieldId;
		
		private EntityRef<DataSubscription> _DataSubscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionFieldIdChanging(System.Guid value);
    partial void OnSubscriptionFieldIdChanged();
    partial void OnSubscriptionIdChanging(System.Nullable<System.Guid> value);
    partial void OnSubscriptionIdChanged();
    partial void OnFieldIdChanging(System.Nullable<int> value);
    partial void OnFieldIdChanged();
    #endregion
		
		public SubscriptionField()
		{
			this._DataSubscription = default(EntityRef<DataSubscription>);
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionFieldId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionFieldId
		{
			get
			{
				return this._SubscriptionFieldId;
			}
			set
			{
				if ((this._SubscriptionFieldId != value))
				{
					this.OnSubscriptionFieldIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionFieldId = value;
					this.SendPropertyChanged("SubscriptionFieldId");
					this.OnSubscriptionFieldIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._DataSubscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_FieldId", DbType="Int")]
		public System.Nullable<int> FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[Association(Name="DataSubscription_SubscriptionField", Storage="_DataSubscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true)]
		public DataSubscription DataSubscription
		{
			get
			{
				return this._DataSubscription.Entity;
			}
			set
			{
				DataSubscription previousValue = this._DataSubscription.Entity;
				if (((previousValue != value) 
							|| (this._DataSubscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataSubscription.Entity = null;
						previousValue.SubscriptionFields.Remove(this);
					}
					this._DataSubscription.Entity = value;
					if ((value != null))
					{
						value.SubscriptionFields.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DataSubscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SubscriptionPerson")]
	public partial class SubscriptionPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionPersonId;
		
		private System.Nullable<System.Guid> _SubscriptionId;
		
		private System.Nullable<System.Guid> _PersonId;
		
		private EntityRef<Subscription> _Subscription;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionPersonIdChanging(System.Guid value);
    partial void OnSubscriptionPersonIdChanged();
    partial void OnSubscriptionIdChanging(System.Nullable<System.Guid> value);
    partial void OnSubscriptionIdChanged();
    partial void OnPersonIdChanging(System.Nullable<System.Guid> value);
    partial void OnPersonIdChanged();
    #endregion
		
		public SubscriptionPerson()
		{
			this._Subscription = default(EntityRef<Subscription>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionPersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionPersonId
		{
			get
			{
				return this._SubscriptionPersonId;
			}
			set
			{
				if ((this._SubscriptionPersonId != value))
				{
					this.OnSubscriptionPersonIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionPersonId = value;
					this.SendPropertyChanged("SubscriptionPersonId");
					this.OnSubscriptionPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Association(Name="Subscription_SubscriptionPerson", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true)]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.SubscriptionPersons.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.SubscriptionPersons.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		[Association(Name="Person_SubscriptionPerson", Storage="_Person", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.SubscriptionPersons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.SubscriptionPersons.Add(this);
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SubscriptionType")]
	public partial class SubscriptionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubscriptionTypeId;
		
		private string _TypeName;
		
		private EntitySet<Subscription> _Subscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionTypeIdChanging(int value);
    partial void OnSubscriptionTypeIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public SubscriptionType()
		{
			this._Subscriptions = new EntitySet<Subscription>(new Action<Subscription>(this.attach_Subscriptions), new Action<Subscription>(this.detach_Subscriptions));
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubscriptionTypeId
		{
			get
			{
				return this._SubscriptionTypeId;
			}
			set
			{
				if ((this._SubscriptionTypeId != value))
				{
					this.OnSubscriptionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionTypeId = value;
					this.SendPropertyChanged("SubscriptionTypeId");
					this.OnSubscriptionTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Association(Name="SubscriptionType_Subscription", Storage="_Subscriptions", ThisKey="SubscriptionTypeId", OtherKey="SubscriptionTypeId")]
		public EntitySet<Subscription> Subscriptions
		{
			get
			{
				return this._Subscriptions;
			}
			set
			{
				this._Subscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.SubscriptionType = this;
		}
		
		private void detach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.SubscriptionType = null;
		}
	}
	
	[Table(Name="dbo.DataProviderType")]
	public partial class DataProviderType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataProviderTypeId;
		
		private string _Name;
		
		private bool _Enabled;
		
		private string _TypeName;
		
		private bool _IsExternal;
		
		private EntitySet<DataProvider> _DataProviders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataProviderTypeIdChanging(int value);
    partial void OnDataProviderTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnIsExternalChanging(bool value);
    partial void OnIsExternalChanged();
    #endregion
		
		public DataProviderType()
		{
			this._DataProviders = new EntitySet<DataProvider>(new Action<DataProvider>(this.attach_DataProviders), new Action<DataProvider>(this.detach_DataProviders));
			OnCreated();
		}
		
		[Column(Storage="_DataProviderTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataProviderTypeId
		{
			get
			{
				return this._DataProviderTypeId;
			}
			set
			{
				if ((this._DataProviderTypeId != value))
				{
					this.OnDataProviderTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DataProviderTypeId = value;
					this.SendPropertyChanged("DataProviderTypeId");
					this.OnDataProviderTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsExternal", DbType="Bit NOT NULL")]
		public bool IsExternal
		{
			get
			{
				return this._IsExternal;
			}
			set
			{
				if ((this._IsExternal != value))
				{
					this.OnIsExternalChanging(value);
					this.SendPropertyChanging();
					this._IsExternal = value;
					this.SendPropertyChanged("IsExternal");
					this.OnIsExternalChanged();
				}
			}
		}
		
		[Association(Name="DataProviderType_DataProvider", Storage="_DataProviders", ThisKey="DataProviderTypeId", OtherKey="DataProviderTypeId")]
		public EntitySet<DataProvider> DataProviders
		{
			get
			{
				return this._DataProviders;
			}
			set
			{
				this._DataProviders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataProviders(DataProvider entity)
		{
			this.SendPropertyChanging();
			entity.DataProviderType = this;
		}
		
		private void detach_DataProviders(DataProvider entity)
		{
			this.SendPropertyChanging();
			entity.DataProviderType = null;
		}
	}
	
	[Table(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private string _Name;
		
		private string _Token;
		
		private System.DateTime _RegistrationDate;
		
		private bool _IsApproved;
		
		private System.Nullable<System.DateTime> _ApprovedDate;
		
		private EntitySet<Subscription> _Subscriptions;
		
		private EntitySet<LogEntry> _LogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTokenChanging(string value);
    partial void OnTokenChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnApprovedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedDateChanged();
    #endregion
		
		public Application()
		{
			this._Subscriptions = new EntitySet<Subscription>(new Action<Subscription>(this.attach_Subscriptions), new Action<Subscription>(this.detach_Subscriptions));
			this._LogEntries = new EntitySet<LogEntry>(new Action<LogEntry>(this.attach_LogEntries), new Action<LogEntry>(this.detach_LogEntries));
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Token", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_ApprovedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApprovedDate
		{
			get
			{
				return this._ApprovedDate;
			}
			set
			{
				if ((this._ApprovedDate != value))
				{
					this.OnApprovedDateChanging(value);
					this.SendPropertyChanging();
					this._ApprovedDate = value;
					this.SendPropertyChanged("ApprovedDate");
					this.OnApprovedDateChanged();
				}
			}
		}
		
		[Association(Name="Application_Subscription", Storage="_Subscriptions", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<Subscription> Subscriptions
		{
			get
			{
				return this._Subscriptions;
			}
			set
			{
				this._Subscriptions.Assign(value);
			}
		}
		
		[Association(Name="Application_LogEntry", Storage="_LogEntries", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<LogEntry> LogEntries
		{
			get
			{
				return this._LogEntries;
			}
			set
			{
				this._LogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
		
		private void attach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_LogEntries(LogEntry entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
	}
	
	[Table(Name="dbo.Channel")]
	public partial class Channel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ChannelId;
		
		private int _ChannelTypeId;
		
		private System.Guid _SubscriptionId;
		
		private string _Url;
		
		private EntityRef<GpacChannel> _GpacChannel;
		
		private EntityRef<Subscription> _Subscription;
		
		private EntityRef<ChannelType> _ChannelType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelIdChanging(System.Guid value);
    partial void OnChannelIdChanged();
    partial void OnChannelTypeIdChanging(int value);
    partial void OnChannelTypeIdChanged();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Channel()
		{
			this._GpacChannel = default(EntityRef<GpacChannel>);
			this._Subscription = default(EntityRef<Subscription>);
			this._ChannelType = default(EntityRef<ChannelType>);
			OnCreated();
		}
		
		[Column(Storage="_ChannelId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelTypeId", DbType="Int NOT NULL")]
		public int ChannelTypeId
		{
			get
			{
				return this._ChannelTypeId;
			}
			set
			{
				if ((this._ChannelTypeId != value))
				{
					if (this._ChannelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelTypeId = value;
					this.SendPropertyChanged("ChannelTypeId");
					this.OnChannelTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Association(Name="Channel_GpacChannel", Storage="_GpacChannel", ThisKey="ChannelId", OtherKey="ChannelId", IsUnique=true, IsForeignKey=false)]
		public GpacChannel GpacChannel
		{
			get
			{
				return this._GpacChannel.Entity;
			}
			set
			{
				GpacChannel previousValue = this._GpacChannel.Entity;
				if (((previousValue != value) 
							|| (this._GpacChannel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GpacChannel.Entity = null;
						previousValue.Channel = null;
					}
					this._GpacChannel.Entity = value;
					if ((value != null))
					{
						value.Channel = this;
					}
					this.SendPropertyChanged("GpacChannel");
				}
			}
		}
		
		[Association(Name="Subscription_Channel", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true)]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		[Association(Name="ChannelType_Channel", Storage="_ChannelType", ThisKey="ChannelTypeId", OtherKey="ChannelTypeId", IsForeignKey=true)]
		public ChannelType ChannelType
		{
			get
			{
				return this._ChannelType.Entity;
			}
			set
			{
				ChannelType previousValue = this._ChannelType.Entity;
				if (((previousValue != value) 
							|| (this._ChannelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChannelType.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._ChannelType.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._ChannelTypeId = value.ChannelTypeId;
					}
					else
					{
						this._ChannelTypeId = default(int);
					}
					this.SendPropertyChanged("ChannelType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GpacChannel")]
	public partial class GpacChannel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ChannelId;
		
		private string _SourceUri;
		
		private int _ObjectType;
		
		private int _NotifyType;
		
		private EntityRef<Channel> _Channel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelIdChanging(System.Guid value);
    partial void OnChannelIdChanged();
    partial void OnSourceUriChanging(string value);
    partial void OnSourceUriChanged();
    partial void OnObjectTypeChanging(int value);
    partial void OnObjectTypeChanged();
    partial void OnNotifyTypeChanging(int value);
    partial void OnNotifyTypeChanged();
    #endregion
		
		public GpacChannel()
		{
			this._Channel = default(EntityRef<Channel>);
			OnCreated();
		}
		
		[Column(Storage="_ChannelId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					if (this._Channel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_SourceUri", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string SourceUri
		{
			get
			{
				return this._SourceUri;
			}
			set
			{
				if ((this._SourceUri != value))
				{
					this.OnSourceUriChanging(value);
					this.SendPropertyChanging();
					this._SourceUri = value;
					this.SendPropertyChanged("SourceUri");
					this.OnSourceUriChanged();
				}
			}
		}
		
		[Column(Storage="_ObjectType", DbType="Int NOT NULL")]
		public int ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				if ((this._ObjectType != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ObjectType = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyType", DbType="Int NOT NULL")]
		public int NotifyType
		{
			get
			{
				return this._NotifyType;
			}
			set
			{
				if ((this._NotifyType != value))
				{
					this.OnNotifyTypeChanging(value);
					this.SendPropertyChanging();
					this._NotifyType = value;
					this.SendPropertyChanged("NotifyType");
					this.OnNotifyTypeChanged();
				}
			}
		}
		
		[Association(Name="Channel_GpacChannel", Storage="_Channel", ThisKey="ChannelId", OtherKey="ChannelId", IsForeignKey=true)]
		public Channel Channel
		{
			get
			{
				return this._Channel.Entity;
			}
			set
			{
				Channel previousValue = this._Channel.Entity;
				if (((previousValue != value) 
							|| (this._Channel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Channel.Entity = null;
						previousValue.GpacChannel = null;
					}
					this._Channel.Entity = value;
					if ((value != null))
					{
						value.GpacChannel = this;
						this._ChannelId = value.ChannelId;
					}
					else
					{
						this._ChannelId = default(System.Guid);
					}
					this.SendPropertyChanged("Channel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Subscription")]
	public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionId;
		
		private int _SubscriptionTypeId;
		
		private System.Guid _ApplicationId;
		
		private bool _IsForAllPersons;
		
		private EntityRef<BirthdateSubscription> _BirthdateSubscription;
		
		private EntityRef<DataSubscription> _DataSubscription;
		
		private EntitySet<SubscriptionPerson> _SubscriptionPersons;
		
		private EntitySet<Channel> _Channels;
		
		private EntitySet<Notification> _Notifications;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<SubscriptionType> _SubscriptionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnSubscriptionTypeIdChanging(int value);
    partial void OnSubscriptionTypeIdChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnIsForAllPersonsChanging(bool value);
    partial void OnIsForAllPersonsChanged();
    #endregion
		
		public Subscription()
		{
			this._BirthdateSubscription = default(EntityRef<BirthdateSubscription>);
			this._DataSubscription = default(EntityRef<DataSubscription>);
			this._SubscriptionPersons = new EntitySet<SubscriptionPerson>(new Action<SubscriptionPerson>(this.attach_SubscriptionPersons), new Action<SubscriptionPerson>(this.detach_SubscriptionPersons));
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._Application = default(EntityRef<Application>);
			this._SubscriptionType = default(EntityRef<SubscriptionType>);
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionTypeId", DbType="Int NOT NULL")]
		public int SubscriptionTypeId
		{
			get
			{
				return this._SubscriptionTypeId;
			}
			set
			{
				if ((this._SubscriptionTypeId != value))
				{
					if (this._SubscriptionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionTypeId = value;
					this.SendPropertyChanged("SubscriptionTypeId");
					this.OnSubscriptionTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsForAllPersons", DbType="Bit NOT NULL")]
		public bool IsForAllPersons
		{
			get
			{
				return this._IsForAllPersons;
			}
			set
			{
				if ((this._IsForAllPersons != value))
				{
					this.OnIsForAllPersonsChanging(value);
					this.SendPropertyChanging();
					this._IsForAllPersons = value;
					this.SendPropertyChanged("IsForAllPersons");
					this.OnIsForAllPersonsChanged();
				}
			}
		}
		
		[Association(Name="Subscription_BirthdateSubscription", Storage="_BirthdateSubscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsUnique=true, IsForeignKey=false)]
		public BirthdateSubscription BirthdateSubscription
		{
			get
			{
				return this._BirthdateSubscription.Entity;
			}
			set
			{
				BirthdateSubscription previousValue = this._BirthdateSubscription.Entity;
				if (((previousValue != value) 
							|| (this._BirthdateSubscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BirthdateSubscription.Entity = null;
						previousValue.Subscription = null;
					}
					this._BirthdateSubscription.Entity = value;
					if ((value != null))
					{
						value.Subscription = this;
					}
					this.SendPropertyChanged("BirthdateSubscription");
				}
			}
		}
		
		[Association(Name="Subscription_DataSubscription", Storage="_DataSubscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsUnique=true, IsForeignKey=false)]
		public DataSubscription DataSubscription
		{
			get
			{
				return this._DataSubscription.Entity;
			}
			set
			{
				DataSubscription previousValue = this._DataSubscription.Entity;
				if (((previousValue != value) 
							|| (this._DataSubscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataSubscription.Entity = null;
						previousValue.Subscription = null;
					}
					this._DataSubscription.Entity = value;
					if ((value != null))
					{
						value.Subscription = this;
					}
					this.SendPropertyChanged("DataSubscription");
				}
			}
		}
		
		[Association(Name="Subscription_SubscriptionPerson", Storage="_SubscriptionPersons", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<SubscriptionPerson> SubscriptionPersons
		{
			get
			{
				return this._SubscriptionPersons;
			}
			set
			{
				this._SubscriptionPersons.Assign(value);
			}
		}
		
		[Association(Name="Subscription_Channel", Storage="_Channels", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		[Association(Name="Subscription_Notification", Storage="_Notifications", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[Association(Name="Application_Subscription", Storage="_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Subscriptions.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Subscriptions.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[Association(Name="SubscriptionType_Subscription", Storage="_SubscriptionType", ThisKey="SubscriptionTypeId", OtherKey="SubscriptionTypeId", IsForeignKey=true)]
		public SubscriptionType SubscriptionType
		{
			get
			{
				return this._SubscriptionType.Entity;
			}
			set
			{
				SubscriptionType previousValue = this._SubscriptionType.Entity;
				if (((previousValue != value) 
							|| (this._SubscriptionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubscriptionType.Entity = null;
						previousValue.Subscriptions.Remove(this);
					}
					this._SubscriptionType.Entity = value;
					if ((value != null))
					{
						value.Subscriptions.Add(this);
						this._SubscriptionTypeId = value.SubscriptionTypeId;
					}
					else
					{
						this._SubscriptionTypeId = default(int);
					}
					this.SendPropertyChanged("SubscriptionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubscriptionPersons(SubscriptionPerson entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_SubscriptionPersons(SubscriptionPerson entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
	}
	
	[Table(Name="dbo.DataProvider")]
	public partial class DataProvider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataProviderId;
		
		private int _DataProviderTypeId;
		
		private string _Address;
		
		private System.Nullable<int> _Port;
		
		private string _ConnectionString;
		
		private string _UserName;
		
		private string _Password;
		
		private EntityRef<DataProviderType> _DataProviderType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataProviderIdChanging(int value);
    partial void OnDataProviderIdChanged();
    partial void OnDataProviderTypeIdChanging(int value);
    partial void OnDataProviderTypeIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPortChanging(System.Nullable<int> value);
    partial void OnPortChanged();
    partial void OnConnectionStringChanging(string value);
    partial void OnConnectionStringChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public DataProvider()
		{
			this._DataProviderType = default(EntityRef<DataProviderType>);
			OnCreated();
		}
		
		[Column(Storage="_DataProviderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataProviderId
		{
			get
			{
				return this._DataProviderId;
			}
			set
			{
				if ((this._DataProviderId != value))
				{
					this.OnDataProviderIdChanging(value);
					this.SendPropertyChanging();
					this._DataProviderId = value;
					this.SendPropertyChanged("DataProviderId");
					this.OnDataProviderIdChanged();
				}
			}
		}
		
		[Column(Storage="_DataProviderTypeId", DbType="Int NOT NULL")]
		public int DataProviderTypeId
		{
			get
			{
				return this._DataProviderTypeId;
			}
			set
			{
				if ((this._DataProviderTypeId != value))
				{
					if (this._DataProviderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataProviderTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DataProviderTypeId = value;
					this.SendPropertyChanged("DataProviderTypeId");
					this.OnDataProviderTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Port", DbType="Int")]
		public System.Nullable<int> Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[Column(Storage="_ConnectionString", DbType="VarChar(250)")]
		public string ConnectionString
		{
			get
			{
				return this._ConnectionString;
			}
			set
			{
				if ((this._ConnectionString != value))
				{
					this.OnConnectionStringChanging(value);
					this.SendPropertyChanging();
					this._ConnectionString = value;
					this.SendPropertyChanged("ConnectionString");
					this.OnConnectionStringChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Association(Name="DataProviderType_DataProvider", Storage="_DataProviderType", ThisKey="DataProviderTypeId", OtherKey="DataProviderTypeId", IsForeignKey=true)]
		public DataProviderType DataProviderType
		{
			get
			{
				return this._DataProviderType.Entity;
			}
			set
			{
				DataProviderType previousValue = this._DataProviderType.Entity;
				if (((previousValue != value) 
							|| (this._DataProviderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataProviderType.Entity = null;
						previousValue.DataProviders.Remove(this);
					}
					this._DataProviderType.Entity = value;
					if ((value != null))
					{
						value.DataProviders.Add(this);
						this._DataProviderTypeId = value.DataProviderTypeId;
					}
					else
					{
						this._DataProviderTypeId = default(int);
					}
					this.SendPropertyChanged("DataProviderType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DetailLevel")]
	public partial class DetailLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailLevelId;
		
		private string _Name;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailLevelIdChanging(int value);
    partial void OnDetailLevelIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DetailLevel()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[Column(Storage="_DetailLevelId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DetailLevelId
		{
			get
			{
				return this._DetailLevelId;
			}
			set
			{
				if ((this._DetailLevelId != value))
				{
					this.OnDetailLevelIdChanging(value);
					this.SendPropertyChanging();
					this._DetailLevelId = value;
					this.SendPropertyChanged("DetailLevelId");
					this.OnDetailLevelIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="DetailLevel_Person", Storage="_Persons", ThisKey="DetailLevelId", OtherKey="DetailLevelId")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.DetailLevel = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.DetailLevel = null;
		}
	}
	
	[Table(Name="dbo.ChildRelationship")]
	public partial class ChildRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private EntityRef<Relationship> _Relationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    #endregion
		
		public ChildRelationship()
		{
			this._Relationship = default(EntityRef<Relationship>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Association(Name="Relationship_ChildRelationship", Storage="_Relationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.ChildRelationship = null;
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.ChildRelationship = this;
						this._RelationshipId = value.RelationshipId;
					}
					else
					{
						this._RelationshipId = default(System.Guid);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LogEntry")]
	public partial class LogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LogEntryId;
		
		private int _LogTypeId;
		
		private System.Nullable<System.Guid> _ApplicationId;
		
		private string _UserToken;
		
		private string _UserId;
		
		private string _MethodName;
		
		private string _Text;
		
		private string _DataObjectType;
		
		private string _DataObjectXml;
		
		private System.DateTime _LogDate;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<LogType> _LogType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogEntryIdChanging(System.Guid value);
    partial void OnLogEntryIdChanged();
    partial void OnLogTypeIdChanging(int value);
    partial void OnLogTypeIdChanged();
    partial void OnApplicationIdChanging(System.Nullable<System.Guid> value);
    partial void OnApplicationIdChanged();
    partial void OnUserTokenChanging(string value);
    partial void OnUserTokenChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnMethodNameChanging(string value);
    partial void OnMethodNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDataObjectTypeChanging(string value);
    partial void OnDataObjectTypeChanged();
    partial void OnDataObjectXmlChanging(string value);
    partial void OnDataObjectXmlChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    #endregion
		
		public LogEntry()
		{
			this._Application = default(EntityRef<Application>);
			this._LogType = default(EntityRef<LogType>);
			OnCreated();
		}
		
		[Column(Storage="_LogEntryId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LogEntryId
		{
			get
			{
				return this._LogEntryId;
			}
			set
			{
				if ((this._LogEntryId != value))
				{
					this.OnLogEntryIdChanging(value);
					this.SendPropertyChanging();
					this._LogEntryId = value;
					this.SendPropertyChanged("LogEntryId");
					this.OnLogEntryIdChanged();
				}
			}
		}
		
		[Column(Storage="_LogTypeId", DbType="Int NOT NULL")]
		public int LogTypeId
		{
			get
			{
				return this._LogTypeId;
			}
			set
			{
				if ((this._LogTypeId != value))
				{
					if (this._LogType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogTypeIdChanging(value);
					this.SendPropertyChanging();
					this._LogTypeId = value;
					this.SendPropertyChanged("LogTypeId");
					this.OnLogTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserToken", DbType="VarChar(250)")]
		public string UserToken
		{
			get
			{
				return this._UserToken;
			}
			set
			{
				if ((this._UserToken != value))
				{
					this.OnUserTokenChanging(value);
					this.SendPropertyChanging();
					this._UserToken = value;
					this.SendPropertyChanged("UserToken");
					this.OnUserTokenChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="VarChar(250)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_MethodName", DbType="VarChar(250)")]
		public string MethodName
		{
			get
			{
				return this._MethodName;
			}
			set
			{
				if ((this._MethodName != value))
				{
					this.OnMethodNameChanging(value);
					this.SendPropertyChanging();
					this._MethodName = value;
					this.SendPropertyChanged("MethodName");
					this.OnMethodNameChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_DataObjectType", DbType="VarChar(250)")]
		public string DataObjectType
		{
			get
			{
				return this._DataObjectType;
			}
			set
			{
				if ((this._DataObjectType != value))
				{
					this.OnDataObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._DataObjectType = value;
					this.SendPropertyChanged("DataObjectType");
					this.OnDataObjectTypeChanged();
				}
			}
		}
		
		[Column(Storage="_DataObjectXml", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string DataObjectXml
		{
			get
			{
				return this._DataObjectXml;
			}
			set
			{
				if ((this._DataObjectXml != value))
				{
					this.OnDataObjectXmlChanging(value);
					this.SendPropertyChanging();
					this._DataObjectXml = value;
					this.SendPropertyChanged("DataObjectXml");
					this.OnDataObjectXmlChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Association(Name="Application_LogEntry", Storage="_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.LogEntries.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.LogEntries.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[Association(Name="LogType_LogEntry", Storage="_LogType", ThisKey="LogTypeId", OtherKey="LogTypeId", IsForeignKey=true)]
		public LogType LogType
		{
			get
			{
				return this._LogType.Entity;
			}
			set
			{
				LogType previousValue = this._LogType.Entity;
				if (((previousValue != value) 
							|| (this._LogType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogType.Entity = null;
						previousValue.LogEntries.Remove(this);
					}
					this._LogType.Entity = value;
					if ((value != null))
					{
						value.LogEntries.Add(this);
						this._LogTypeId = value.LogTypeId;
					}
					else
					{
						this._LogTypeId = default(int);
					}
					this.SendPropertyChanged("LogType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Municipality")]
	public partial class Municipality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MunicipalityCode;
		
		private string _MunicipalityName;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMunicipalityCodeChanging(string value);
    partial void OnMunicipalityCodeChanged();
    partial void OnMunicipalityNameChanging(string value);
    partial void OnMunicipalityNameChanged();
    #endregion
		
		public Municipality()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_MunicipalityCode", DbType="VarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MunicipalityCode
		{
			get
			{
				return this._MunicipalityCode;
			}
			set
			{
				if ((this._MunicipalityCode != value))
				{
					this.OnMunicipalityCodeChanging(value);
					this.SendPropertyChanging();
					this._MunicipalityCode = value;
					this.SendPropertyChanged("MunicipalityCode");
					this.OnMunicipalityCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MunicipalityName", DbType="NVarChar(24) NOT NULL", CanBeNull=false)]
		public string MunicipalityName
		{
			get
			{
				return this._MunicipalityName;
			}
			set
			{
				if ((this._MunicipalityName != value))
				{
					this.OnMunicipalityNameChanging(value);
					this.SendPropertyChanging();
					this._MunicipalityName = value;
					this.SendPropertyChanged("MunicipalityName");
					this.OnMunicipalityNameChanged();
				}
			}
		}
		
		[Association(Name="Municipality_Address", Storage="_Addresses", ThisKey="MunicipalityCode", OtherKey="MunicipalityCode")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Municipality = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Municipality = null;
		}
	}
	
	[Table(Name="dbo.CustodyRelationship")]
	public partial class CustodyRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private EntityRef<TimedRelationship> _TimedRelationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    #endregion
		
		public CustodyRelationship()
		{
			this._TimedRelationship = default(EntityRef<TimedRelationship>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._TimedRelationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Association(Name="TimedRelationship_CustodyRelationship", Storage="_TimedRelationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsForeignKey=true)]
		public TimedRelationship TimedRelationship
		{
			get
			{
				return this._TimedRelationship.Entity;
			}
			set
			{
				TimedRelationship previousValue = this._TimedRelationship.Entity;
				if (((previousValue != value) 
							|| (this._TimedRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimedRelationship.Entity = null;
						previousValue.CustodyRelationship = null;
					}
					this._TimedRelationship.Entity = value;
					if ((value != null))
					{
						value.CustodyRelationship = this;
						this._RelationshipId = value.RelationshipId;
					}
					else
					{
						this._RelationshipId = default(System.Guid);
					}
					this.SendPropertyChanged("TimedRelationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonId;
		
		private System.Nullable<int> _DetailLevelId;
		
		private string _NationalityCountryCode;
		
		private string _PersonNumber;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _NameForAddressing;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<bool> _BirthDateUncertaintyIndicator;
		
		private System.Nullable<System.DateTime> _DeathDate;
		
		private System.Nullable<bool> _DeathDateUncertaintyIndicator;
		
		private System.Nullable<int> _MaritalStatusTypeId;
		
		private string _PersonStatusTypeCode;
		
		private System.Nullable<System.DateTime> _PersonStatusDate;
		
		private System.Nullable<int> _GenderId;
		
		private System.Nullable<bool> _PersonProtectionIndicator;
		
		private System.Nullable<System.DateTime> _PersonProtectionIndicatorStartDate;
		
		private System.Nullable<System.DateTime> _PersonProtectionIndicatorEndDate;
		
		private System.DateTime _ModifiedDate;
		
		private bool _IsTestPerson;
		
		private EntitySet<SubscriptionPerson> _SubscriptionPersons;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<Relationship> _Relationships1;
		
		private EntityRef<Address> _Address;
		
		private EntitySet<NotificationPerson> _NotificationPersons;
		
		private EntityRef<DetailLevel> _DetailLevel;
		
		private EntityRef<Gender> _Gender;
		
		private EntityRef<MaritalStatusType> _MaritalStatusType;
		
		private EntityRef<PersonStatusType> _PersonStatusType;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnDetailLevelIdChanging(System.Nullable<int> value);
    partial void OnDetailLevelIdChanged();
    partial void OnNationalityCountryAlpha2CodeChanging(string value);
    partial void OnNationalityCountryAlpha2CodeChanged();
    partial void OnPersonNumberChanging(string value);
    partial void OnPersonNumberChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnNameForAddressingChanging(string value);
    partial void OnNameForAddressingChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnBirthDateUncertaintyIndicatorChanging(System.Nullable<bool> value);
    partial void OnBirthDateUncertaintyIndicatorChanged();
    partial void OnDeathDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeathDateChanged();
    partial void OnDeathDateUncertaintyIndicatorChanging(System.Nullable<bool> value);
    partial void OnDeathDateUncertaintyIndicatorChanged();
    partial void OnMaritalStatusTypeIdChanging(System.Nullable<int> value);
    partial void OnMaritalStatusTypeIdChanged();
    partial void OnPersonStatusTypeCodeChanging(string value);
    partial void OnPersonStatusTypeCodeChanged();
    partial void OnPersonStatusDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPersonStatusDateChanged();
    partial void OnGenderIdChanging(System.Nullable<int> value);
    partial void OnGenderIdChanged();
    partial void OnPersonProtectionIndicatorChanging(System.Nullable<bool> value);
    partial void OnPersonProtectionIndicatorChanged();
    partial void OnPersonProtectionIndicatorStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPersonProtectionIndicatorStartDateChanged();
    partial void OnPersonProtectionIndicatorEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPersonProtectionIndicatorEndDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnIsTestPersonChanging(bool value);
    partial void OnIsTestPersonChanged();
    #endregion
		
		public Person()
		{
			this._SubscriptionPersons = new EntitySet<SubscriptionPerson>(new Action<SubscriptionPerson>(this.attach_SubscriptionPersons), new Action<SubscriptionPerson>(this.detach_SubscriptionPersons));
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._Relationships1 = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships1), new Action<Relationship>(this.detach_Relationships1));
			this._Address = default(EntityRef<Address>);
			this._NotificationPersons = new EntitySet<NotificationPerson>(new Action<NotificationPerson>(this.attach_NotificationPersons), new Action<NotificationPerson>(this.detach_NotificationPersons));
			this._DetailLevel = default(EntityRef<DetailLevel>);
			this._Gender = default(EntityRef<Gender>);
			this._MaritalStatusType = default(EntityRef<MaritalStatusType>);
			this._PersonStatusType = default(EntityRef<PersonStatusType>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_DetailLevelId", DbType="Int")]
		public System.Nullable<int> DetailLevelId
		{
			get
			{
				return this._DetailLevelId;
			}
			set
			{
				if ((this._DetailLevelId != value))
				{
					if (this._DetailLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDetailLevelIdChanging(value);
					this.SendPropertyChanging();
					this._DetailLevelId = value;
					this.SendPropertyChanged("DetailLevelId");
					this.OnDetailLevelIdChanged();
				}
			}
		}
		
		[Column(Storage="_NationalityCountryCode", DbType="VarChar(2)")]
		public string NationalityCountryAlpha2Code
		{
			get
			{
				return this._NationalityCountryCode;
			}
			set
			{
				if ((this._NationalityCountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNationalityCountryAlpha2CodeChanging(value);
					this.SendPropertyChanging();
					this._NationalityCountryCode = value;
					this.SendPropertyChanged("NationalityCountryAlpha2Code");
					this.OnNationalityCountryAlpha2CodeChanged();
				}
			}
		}
		
		[Column(Storage="_PersonNumber", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string PersonNumber
		{
			get
			{
				return this._PersonNumber;
			}
			set
			{
				if ((this._PersonNumber != value))
				{
					this.OnPersonNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonNumber = value;
					this.SendPropertyChanged("PersonNumber");
					this.OnPersonNumberChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(34)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="NVarChar(34)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(34)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_NameForAddressing", DbType="NVarChar(34)")]
		public string NameForAddressing
		{
			get
			{
				return this._NameForAddressing;
			}
			set
			{
				if ((this._NameForAddressing != value))
				{
					this.OnNameForAddressingChanging(value);
					this.SendPropertyChanging();
					this._NameForAddressing = value;
					this.SendPropertyChanged("NameForAddressing");
					this.OnNameForAddressingChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDateUncertaintyIndicator", DbType="Bit")]
		public System.Nullable<bool> BirthDateUncertaintyIndicator
		{
			get
			{
				return this._BirthDateUncertaintyIndicator;
			}
			set
			{
				if ((this._BirthDateUncertaintyIndicator != value))
				{
					this.OnBirthDateUncertaintyIndicatorChanging(value);
					this.SendPropertyChanging();
					this._BirthDateUncertaintyIndicator = value;
					this.SendPropertyChanged("BirthDateUncertaintyIndicator");
					this.OnBirthDateUncertaintyIndicatorChanged();
				}
			}
		}
		
		[Column(Storage="_DeathDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeathDate
		{
			get
			{
				return this._DeathDate;
			}
			set
			{
				if ((this._DeathDate != value))
				{
					this.OnDeathDateChanging(value);
					this.SendPropertyChanging();
					this._DeathDate = value;
					this.SendPropertyChanged("DeathDate");
					this.OnDeathDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeathDateUncertaintyIndicator", DbType="Bit")]
		public System.Nullable<bool> DeathDateUncertaintyIndicator
		{
			get
			{
				return this._DeathDateUncertaintyIndicator;
			}
			set
			{
				if ((this._DeathDateUncertaintyIndicator != value))
				{
					this.OnDeathDateUncertaintyIndicatorChanging(value);
					this.SendPropertyChanging();
					this._DeathDateUncertaintyIndicator = value;
					this.SendPropertyChanged("DeathDateUncertaintyIndicator");
					this.OnDeathDateUncertaintyIndicatorChanged();
				}
			}
		}
		
		[Column(Storage="_MaritalStatusTypeId", DbType="Int")]
		public System.Nullable<int> MaritalStatusTypeId
		{
			get
			{
				return this._MaritalStatusTypeId;
			}
			set
			{
				if ((this._MaritalStatusTypeId != value))
				{
					if (this._MaritalStatusType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaritalStatusTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusTypeId = value;
					this.SendPropertyChanged("MaritalStatusTypeId");
					this.OnMaritalStatusTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonStatusTypeCode", DbType="Char(2)")]
		public string PersonStatusTypeCode
		{
			get
			{
				return this._PersonStatusTypeCode;
			}
			set
			{
				if ((this._PersonStatusTypeCode != value))
				{
					if (this._PersonStatusType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonStatusTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._PersonStatusTypeCode = value;
					this.SendPropertyChanged("PersonStatusTypeCode");
					this.OnPersonStatusTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PersonStatusDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PersonStatusDate
		{
			get
			{
				return this._PersonStatusDate;
			}
			set
			{
				if ((this._PersonStatusDate != value))
				{
					this.OnPersonStatusDateChanging(value);
					this.SendPropertyChanging();
					this._PersonStatusDate = value;
					this.SendPropertyChanged("PersonStatusDate");
					this.OnPersonStatusDateChanged();
				}
			}
		}
		
		[Column(Storage="_GenderId", DbType="Int")]
		public System.Nullable<int> GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonProtectionIndicator", DbType="Bit")]
		public System.Nullable<bool> PersonProtectionIndicator
		{
			get
			{
				return this._PersonProtectionIndicator;
			}
			set
			{
				if ((this._PersonProtectionIndicator != value))
				{
					this.OnPersonProtectionIndicatorChanging(value);
					this.SendPropertyChanging();
					this._PersonProtectionIndicator = value;
					this.SendPropertyChanged("PersonProtectionIndicator");
					this.OnPersonProtectionIndicatorChanged();
				}
			}
		}
		
		[Column(Storage="_PersonProtectionIndicatorStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PersonProtectionIndicatorStartDate
		{
			get
			{
				return this._PersonProtectionIndicatorStartDate;
			}
			set
			{
				if ((this._PersonProtectionIndicatorStartDate != value))
				{
					this.OnPersonProtectionIndicatorStartDateChanging(value);
					this.SendPropertyChanging();
					this._PersonProtectionIndicatorStartDate = value;
					this.SendPropertyChanged("PersonProtectionIndicatorStartDate");
					this.OnPersonProtectionIndicatorStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_PersonProtectionIndicatorEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PersonProtectionIndicatorEndDate
		{
			get
			{
				return this._PersonProtectionIndicatorEndDate;
			}
			set
			{
				if ((this._PersonProtectionIndicatorEndDate != value))
				{
					this.OnPersonProtectionIndicatorEndDateChanging(value);
					this.SendPropertyChanging();
					this._PersonProtectionIndicatorEndDate = value;
					this.SendPropertyChanged("PersonProtectionIndicatorEndDate");
					this.OnPersonProtectionIndicatorEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsTestPerson", DbType="Bit NOT NULL")]
		public bool IsTestPerson
		{
			get
			{
				return this._IsTestPerson;
			}
			set
			{
				if ((this._IsTestPerson != value))
				{
					this.OnIsTestPersonChanging(value);
					this.SendPropertyChanging();
					this._IsTestPerson = value;
					this.SendPropertyChanged("IsTestPerson");
					this.OnIsTestPersonChanged();
				}
			}
		}
		
		[Association(Name="Person_SubscriptionPerson", Storage="_SubscriptionPersons", ThisKey="PersonId", OtherKey="PersonId")]
		public EntitySet<SubscriptionPerson> SubscriptionPersons
		{
			get
			{
				return this._SubscriptionPersons;
			}
			set
			{
				this._SubscriptionPersons.Assign(value);
			}
		}
		
		[Association(Name="Person_Relationship", Storage="_Relationships", ThisKey="PersonId", OtherKey="PersonId")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[Association(Name="Person_Relationship1", Storage="_Relationships1", ThisKey="PersonId", OtherKey="RelatedPersonId")]
		public EntitySet<Relationship> Relationships1
		{
			get
			{
				return this._Relationships1;
			}
			set
			{
				this._Relationships1.Assign(value);
			}
		}
		
		[Association(Name="Person_Address", Storage="_Address", ThisKey="PersonId", OtherKey="PersonId", IsUnique=true, IsForeignKey=false)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Person = null;
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="Person_NotificationPerson", Storage="_NotificationPersons", ThisKey="PersonId", OtherKey="PersonId")]
		public EntitySet<NotificationPerson> NotificationPersons
		{
			get
			{
				return this._NotificationPersons;
			}
			set
			{
				this._NotificationPersons.Assign(value);
			}
		}
		
		[Association(Name="DetailLevel_Person", Storage="_DetailLevel", ThisKey="DetailLevelId", OtherKey="DetailLevelId", IsForeignKey=true)]
		public DetailLevel DetailLevel
		{
			get
			{
				return this._DetailLevel.Entity;
			}
			set
			{
				DetailLevel previousValue = this._DetailLevel.Entity;
				if (((previousValue != value) 
							|| (this._DetailLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DetailLevel.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._DetailLevel.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._DetailLevelId = value.DetailLevelId;
					}
					else
					{
						this._DetailLevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DetailLevel");
				}
			}
		}
		
		[Association(Name="Gender_Person", Storage="_Gender", ThisKey="GenderId", OtherKey="GenderId", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._GenderId = value.GenderId;
					}
					else
					{
						this._GenderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		[Association(Name="MaritalStatusType_Person", Storage="_MaritalStatusType", ThisKey="MaritalStatusTypeId", OtherKey="MaritalStatusTypeId", IsForeignKey=true)]
		public MaritalStatusType MaritalStatusType
		{
			get
			{
				return this._MaritalStatusType.Entity;
			}
			set
			{
				MaritalStatusType previousValue = this._MaritalStatusType.Entity;
				if (((previousValue != value) 
							|| (this._MaritalStatusType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalStatusType.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._MaritalStatusType.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._MaritalStatusTypeId = value.MaritalStatusTypeId;
					}
					else
					{
						this._MaritalStatusTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MaritalStatusType");
				}
			}
		}
		
		[Association(Name="PersonStatusType_Person", Storage="_PersonStatusType", ThisKey="PersonStatusTypeCode", OtherKey="PersonStatusTypeCode", IsForeignKey=true)]
		public PersonStatusType PersonStatusType
		{
			get
			{
				return this._PersonStatusType.Entity;
			}
			set
			{
				PersonStatusType previousValue = this._PersonStatusType.Entity;
				if (((previousValue != value) 
							|| (this._PersonStatusType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonStatusType.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._PersonStatusType.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._PersonStatusTypeCode = value.PersonStatusTypeCode;
					}
					else
					{
						this._PersonStatusTypeCode = default(string);
					}
					this.SendPropertyChanged("PersonStatusType");
				}
			}
		}
		
		[Association(Name="Country_Person", Storage="_Country", ThisKey="NationalityCountryAlpha2Code", OtherKey="Alpha2Code", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._NationalityCountryCode = value.Alpha2Code;
					}
					else
					{
						this._NationalityCountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubscriptionPersons(SubscriptionPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_SubscriptionPersons(SubscriptionPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Relationships1(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelatedPerson = this;
		}
		
		private void detach_Relationships1(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.RelatedPerson = null;
		}
		
		private void attach_NotificationPersons(NotificationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_NotificationPersons(NotificationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[Table(Name="dbo.PersonStatusType")]
	public partial class PersonStatusType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PersonStatusTypeCode;
		
		private string _PersonStatusName;
		
		private EntitySet<Person> _Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonStatusTypeCodeChanging(string value);
    partial void OnPersonStatusTypeCodeChanged();
    partial void OnPersonStatusNameChanging(string value);
    partial void OnPersonStatusNameChanged();
    #endregion
		
		public PersonStatusType()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			OnCreated();
		}
		
		[Column(Storage="_PersonStatusTypeCode", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PersonStatusTypeCode
		{
			get
			{
				return this._PersonStatusTypeCode;
			}
			set
			{
				if ((this._PersonStatusTypeCode != value))
				{
					this.OnPersonStatusTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._PersonStatusTypeCode = value;
					this.SendPropertyChanged("PersonStatusTypeCode");
					this.OnPersonStatusTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PersonStatusName", DbType="NVarChar(90) NOT NULL", CanBeNull=false)]
		public string PersonStatusName
		{
			get
			{
				return this._PersonStatusName;
			}
			set
			{
				if ((this._PersonStatusName != value))
				{
					this.OnPersonStatusNameChanging(value);
					this.SendPropertyChanging();
					this._PersonStatusName = value;
					this.SendPropertyChanged("PersonStatusName");
					this.OnPersonStatusNameChanged();
				}
			}
		}
		
		[Association(Name="PersonStatusType_Person", Storage="_Persons", ThisKey="PersonStatusTypeCode", OtherKey="PersonStatusTypeCode")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonStatusType = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonStatusType = null;
		}
	}
	
	[Table(Name="dbo.TimedRelationship")]
	public partial class TimedRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntityRef<CustodyRelationship> _CustodyRelationship;
		
		private EntityRef<MaritalRelationship> _MaritalRelationship1;
		
		private EntityRef<Relationship> _Relationship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public TimedRelationship()
		{
			this._CustodyRelationship = default(EntityRef<CustodyRelationship>);
			this._MaritalRelationship1 = default(EntityRef<MaritalRelationship>);
			this._Relationship = default(EntityRef<Relationship>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="TimedRelationship_CustodyRelationship", Storage="_CustodyRelationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsUnique=true, IsForeignKey=false)]
		public CustodyRelationship CustodyRelationship
		{
			get
			{
				return this._CustodyRelationship.Entity;
			}
			set
			{
				CustodyRelationship previousValue = this._CustodyRelationship.Entity;
				if (((previousValue != value) 
							|| (this._CustodyRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustodyRelationship.Entity = null;
						previousValue.TimedRelationship = null;
					}
					this._CustodyRelationship.Entity = value;
					if ((value != null))
					{
						value.TimedRelationship = this;
					}
					this.SendPropertyChanged("CustodyRelationship");
				}
			}
		}
		
		[Association(Name="TimedRelationship_MaritalRelationship", Storage="_MaritalRelationship1", ThisKey="RelationshipId", OtherKey="RelationshipId", IsUnique=true, IsForeignKey=false)]
		public MaritalRelationship MaritalRelationship
		{
			get
			{
				return this._MaritalRelationship1.Entity;
			}
			set
			{
				MaritalRelationship previousValue = this._MaritalRelationship1.Entity;
				if (((previousValue != value) 
							|| (this._MaritalRelationship1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalRelationship1.Entity = null;
						previousValue.TimedRelationship = null;
					}
					this._MaritalRelationship1.Entity = value;
					if ((value != null))
					{
						value.TimedRelationship = this;
					}
					this.SendPropertyChanged("MaritalRelationship");
				}
			}
		}
		
		[Association(Name="Relationship_TimedRelationship", Storage="_Relationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.TimedRelationship = null;
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.TimedRelationship = this;
						this._RelationshipId = value.RelationshipId;
					}
					else
					{
						this._RelationshipId = default(System.Guid);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Relationship")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private System.Guid _PersonId;
		
		private System.Guid _RelatedPersonId;
		
		private int _RelationshipTypeId;
		
		private System.DateTime _RegistrationDate;
		
		private EntityRef<ChildRelationship> _ChildRelationship;
		
		private EntityRef<TimedRelationship> _TimedRelationship;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Person> _RelatedPerson;
		
		private EntityRef<RelationshipType> _RelationshipType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnRelatedPersonIdChanging(System.Guid value);
    partial void OnRelatedPersonIdChanged();
    partial void OnRelationshipTypeIdChanging(int value);
    partial void OnRelationshipTypeIdChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    #endregion
		
		public Relationship()
		{
			this._ChildRelationship = default(EntityRef<ChildRelationship>);
			this._TimedRelationship = default(EntityRef<TimedRelationship>);
			this._Person = default(EntityRef<Person>);
			this._RelatedPerson = default(EntityRef<Person>);
			this._RelationshipType = default(EntityRef<RelationshipType>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_RelatedPersonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RelatedPersonId
		{
			get
			{
				return this._RelatedPersonId;
			}
			set
			{
				if ((this._RelatedPersonId != value))
				{
					if (this._RelatedPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelatedPersonIdChanging(value);
					this.SendPropertyChanging();
					this._RelatedPersonId = value;
					this.SendPropertyChanged("RelatedPersonId");
					this.OnRelatedPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_RelationshipTypeId", DbType="Int NOT NULL")]
		public int RelationshipTypeId
		{
			get
			{
				return this._RelationshipTypeId;
			}
			set
			{
				if ((this._RelationshipTypeId != value))
				{
					if (this._RelationshipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipTypeIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipTypeId = value;
					this.SendPropertyChanged("RelationshipTypeId");
					this.OnRelationshipTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[Association(Name="Relationship_ChildRelationship", Storage="_ChildRelationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsUnique=true, IsForeignKey=false)]
		public ChildRelationship ChildRelationship
		{
			get
			{
				return this._ChildRelationship.Entity;
			}
			set
			{
				ChildRelationship previousValue = this._ChildRelationship.Entity;
				if (((previousValue != value) 
							|| (this._ChildRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildRelationship.Entity = null;
						previousValue.Relationship = null;
					}
					this._ChildRelationship.Entity = value;
					if ((value != null))
					{
						value.Relationship = this;
					}
					this.SendPropertyChanged("ChildRelationship");
				}
			}
		}
		
		[Association(Name="Relationship_TimedRelationship", Storage="_TimedRelationship", ThisKey="RelationshipId", OtherKey="RelationshipId", IsUnique=true, IsForeignKey=false)]
		public TimedRelationship TimedRelationship
		{
			get
			{
				return this._TimedRelationship.Entity;
			}
			set
			{
				TimedRelationship previousValue = this._TimedRelationship.Entity;
				if (((previousValue != value) 
							|| (this._TimedRelationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimedRelationship.Entity = null;
						previousValue.Relationship = null;
					}
					this._TimedRelationship.Entity = value;
					if ((value != null))
					{
						value.Relationship = this;
					}
					this.SendPropertyChanged("TimedRelationship");
				}
			}
		}
		
		[Association(Name="Person_Relationship", Storage="_Person", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="Person_Relationship1", Storage="_RelatedPerson", ThisKey="RelatedPersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person RelatedPerson
		{
			get
			{
				return this._RelatedPerson.Entity;
			}
			set
			{
				Person previousValue = this._RelatedPerson.Entity;
				if (((previousValue != value) 
							|| (this._RelatedPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelatedPerson.Entity = null;
						previousValue.Relationships1.Remove(this);
					}
					this._RelatedPerson.Entity = value;
					if ((value != null))
					{
						value.Relationships1.Add(this);
						this._RelatedPersonId = value.PersonId;
					}
					else
					{
						this._RelatedPersonId = default(System.Guid);
					}
					this.SendPropertyChanged("RelatedPerson");
				}
			}
		}
		
		[Association(Name="RelationshipType_Relationship", Storage="_RelationshipType", ThisKey="RelationshipTypeId", OtherKey="RelationshipTypeId", IsForeignKey=true)]
		public RelationshipType RelationshipType
		{
			get
			{
				return this._RelationshipType.Entity;
			}
			set
			{
				RelationshipType previousValue = this._RelationshipType.Entity;
				if (((previousValue != value) 
							|| (this._RelationshipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RelationshipType.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._RelationshipType.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._RelationshipTypeId = value.RelationshipTypeId;
					}
					else
					{
						this._RelationshipTypeId = default(int);
					}
					this.SendPropertyChanged("RelationshipType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MaritalRelationship")]
	public partial class MaritalRelationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationshipId;
		
		private System.Nullable<int> _MaritalStatusId;
		
		private EntityRef<TimedRelationship> _TimedRelationship1;
		
		private EntityRef<MaritalStatusType> _MaritalStatusType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIdChanging(System.Guid value);
    partial void OnRelationshipIdChanged();
    partial void OnMaritalStatusIdChanging(System.Nullable<int> value);
    partial void OnMaritalStatusIdChanged();
    #endregion
		
		public MaritalRelationship()
		{
			this._TimedRelationship1 = default(EntityRef<TimedRelationship>);
			this._MaritalStatusType = default(EntityRef<MaritalStatusType>);
			OnCreated();
		}
		
		[Column(Storage="_RelationshipId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationshipId
		{
			get
			{
				return this._RelationshipId;
			}
			set
			{
				if ((this._RelationshipId != value))
				{
					if (this._TimedRelationship1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationshipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationshipId = value;
					this.SendPropertyChanged("RelationshipId");
					this.OnRelationshipIdChanged();
				}
			}
		}
		
		[Column(Storage="_MaritalStatusId", DbType="Int")]
		public System.Nullable<int> MaritalStatusId
		{
			get
			{
				return this._MaritalStatusId;
			}
			set
			{
				if ((this._MaritalStatusId != value))
				{
					if (this._MaritalStatusType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaritalStatusIdChanging(value);
					this.SendPropertyChanging();
					this._MaritalStatusId = value;
					this.SendPropertyChanged("MaritalStatusId");
					this.OnMaritalStatusIdChanged();
				}
			}
		}
		
		[Association(Name="TimedRelationship_MaritalRelationship", Storage="_TimedRelationship1", ThisKey="RelationshipId", OtherKey="RelationshipId", IsForeignKey=true)]
		public TimedRelationship TimedRelationship
		{
			get
			{
				return this._TimedRelationship1.Entity;
			}
			set
			{
				TimedRelationship previousValue = this._TimedRelationship1.Entity;
				if (((previousValue != value) 
							|| (this._TimedRelationship1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimedRelationship1.Entity = null;
						previousValue.MaritalRelationship = null;
					}
					this._TimedRelationship1.Entity = value;
					if ((value != null))
					{
						value.MaritalRelationship = this;
						this._RelationshipId = value.RelationshipId;
					}
					else
					{
						this._RelationshipId = default(System.Guid);
					}
					this.SendPropertyChanged("TimedRelationship");
				}
			}
		}
		
		[Association(Name="MaritalStatusType_MaritalRelationship", Storage="_MaritalStatusType", ThisKey="MaritalStatusId", OtherKey="MaritalStatusTypeId", IsForeignKey=true)]
		public MaritalStatusType MaritalStatusType
		{
			get
			{
				return this._MaritalStatusType.Entity;
			}
			set
			{
				MaritalStatusType previousValue = this._MaritalStatusType.Entity;
				if (((previousValue != value) 
							|| (this._MaritalStatusType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaritalStatusType.Entity = null;
						previousValue.MaritalRelationships.Remove(this);
					}
					this._MaritalStatusType.Entity = value;
					if ((value != null))
					{
						value.MaritalRelationships.Add(this);
						this._MaritalStatusId = value.MaritalStatusTypeId;
					}
					else
					{
						this._MaritalStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MaritalStatusType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PersonId;
		
		private System.Nullable<int> _AddressStatusId;
		
		private string _CountryCode;
		
		private string _MunicipalityCode;
		
		private string _StreetCode;
		
		private string _StreetName;
		
		private string _StreetNameForAddressing;
		
		private string _StreetBuildingIdentifier;
		
		private string _FloorIdentifier;
		
		private string _SuiteIdentifier;
		
		private string _MailDeliverSubLocationIdentifier;
		
		private string _DistrictSubDivisionIdentifier;
		
		private string _PostBoxIdentifier;
		
		private string _PostCode;
		
		private string _PostDistrictName;
		
		private string _CareOfName;
		
		private string _Line1;
		
		private string _Line2;
		
		private string _Line3;
		
		private string _Line4;
		
		private string _Line5;
		
		private string _Line6;
		
		private string _LocationDescription;
		
		private EntityRef<AddressStatus> _AddressStatus;
		
		private EntityRef<Municipality> _Municipality;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnAddressStatusIdChanging(System.Nullable<int> value);
    partial void OnAddressStatusIdChanged();
    partial void OnCountryAlpha2CodeChanging(string value);
    partial void OnCountryAlpha2CodeChanged();
    partial void OnMunicipalityCodeChanging(string value);
    partial void OnMunicipalityCodeChanged();
    partial void OnStreetCodeChanging(string value);
    partial void OnStreetCodeChanged();
    partial void OnStreetNameChanging(string value);
    partial void OnStreetNameChanged();
    partial void OnStreetNameForAddressingChanging(string value);
    partial void OnStreetNameForAddressingChanged();
    partial void OnStreetBuildingIdentifierChanging(string value);
    partial void OnStreetBuildingIdentifierChanged();
    partial void OnFloorIdentifierChanging(string value);
    partial void OnFloorIdentifierChanged();
    partial void OnSuiteIdentifierChanging(string value);
    partial void OnSuiteIdentifierChanged();
    partial void OnMailDeliverSubLocationIdentifierChanging(string value);
    partial void OnMailDeliverSubLocationIdentifierChanged();
    partial void OnDistrictSubDivisionIdentifierChanging(string value);
    partial void OnDistrictSubDivisionIdentifierChanged();
    partial void OnPostBoxIdentifierChanging(string value);
    partial void OnPostBoxIdentifierChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    partial void OnPostDistrictNameChanging(string value);
    partial void OnPostDistrictNameChanged();
    partial void OnCareOfNameChanging(string value);
    partial void OnCareOfNameChanged();
    partial void OnLine1Changing(string value);
    partial void OnLine1Changed();
    partial void OnLine2Changing(string value);
    partial void OnLine2Changed();
    partial void OnLine3Changing(string value);
    partial void OnLine3Changed();
    partial void OnLine4Changing(string value);
    partial void OnLine4Changed();
    partial void OnLine5Changing(string value);
    partial void OnLine5Changed();
    partial void OnLine6Changing(string value);
    partial void OnLine6Changed();
    partial void OnLocationDescriptionChanging(string value);
    partial void OnLocationDescriptionChanged();
    #endregion
		
		public Address()
		{
			this._AddressStatus = default(EntityRef<AddressStatus>);
			this._Municipality = default(EntityRef<Municipality>);
			this._Person = default(EntityRef<Person>);
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressStatusId", DbType="Int")]
		public System.Nullable<int> AddressStatusId
		{
			get
			{
				return this._AddressStatusId;
			}
			set
			{
				if ((this._AddressStatusId != value))
				{
					if (this._AddressStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressStatusIdChanging(value);
					this.SendPropertyChanging();
					this._AddressStatusId = value;
					this.SendPropertyChanged("AddressStatusId");
					this.OnAddressStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="VarChar(2)")]
		public string CountryAlpha2Code
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryAlpha2CodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryAlpha2Code");
					this.OnCountryAlpha2CodeChanged();
				}
			}
		}
		
		[Column(Storage="_MunicipalityCode", DbType="VarChar(4)")]
		public string MunicipalityCode
		{
			get
			{
				return this._MunicipalityCode;
			}
			set
			{
				if ((this._MunicipalityCode != value))
				{
					if (this._Municipality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMunicipalityCodeChanging(value);
					this.SendPropertyChanging();
					this._MunicipalityCode = value;
					this.SendPropertyChanged("MunicipalityCode");
					this.OnMunicipalityCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StreetCode", DbType="VarChar(4)")]
		public string StreetCode
		{
			get
			{
				return this._StreetCode;
			}
			set
			{
				if ((this._StreetCode != value))
				{
					this.OnStreetCodeChanging(value);
					this.SendPropertyChanging();
					this._StreetCode = value;
					this.SendPropertyChanged("StreetCode");
					this.OnStreetCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StreetName", DbType="NVarChar(50)")]
		public string StreetName
		{
			get
			{
				return this._StreetName;
			}
			set
			{
				if ((this._StreetName != value))
				{
					this.OnStreetNameChanging(value);
					this.SendPropertyChanging();
					this._StreetName = value;
					this.SendPropertyChanged("StreetName");
					this.OnStreetNameChanged();
				}
			}
		}
		
		[Column(Storage="_StreetNameForAddressing", DbType="NVarChar(20)")]
		public string StreetNameForAddressing
		{
			get
			{
				return this._StreetNameForAddressing;
			}
			set
			{
				if ((this._StreetNameForAddressing != value))
				{
					this.OnStreetNameForAddressingChanging(value);
					this.SendPropertyChanging();
					this._StreetNameForAddressing = value;
					this.SendPropertyChanged("StreetNameForAddressing");
					this.OnStreetNameForAddressingChanged();
				}
			}
		}
		
		[Column(Storage="_StreetBuildingIdentifier", DbType="VarChar(4)")]
		public string StreetBuildingIdentifier
		{
			get
			{
				return this._StreetBuildingIdentifier;
			}
			set
			{
				if ((this._StreetBuildingIdentifier != value))
				{
					this.OnStreetBuildingIdentifierChanging(value);
					this.SendPropertyChanging();
					this._StreetBuildingIdentifier = value;
					this.SendPropertyChanged("StreetBuildingIdentifier");
					this.OnStreetBuildingIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_FloorIdentifier", DbType="VarChar(2)")]
		public string FloorIdentifier
		{
			get
			{
				return this._FloorIdentifier;
			}
			set
			{
				if ((this._FloorIdentifier != value))
				{
					this.OnFloorIdentifierChanging(value);
					this.SendPropertyChanging();
					this._FloorIdentifier = value;
					this.SendPropertyChanged("FloorIdentifier");
					this.OnFloorIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_SuiteIdentifier", DbType="NVarChar(4)")]
		public string SuiteIdentifier
		{
			get
			{
				return this._SuiteIdentifier;
			}
			set
			{
				if ((this._SuiteIdentifier != value))
				{
					this.OnSuiteIdentifierChanging(value);
					this.SendPropertyChanging();
					this._SuiteIdentifier = value;
					this.SendPropertyChanged("SuiteIdentifier");
					this.OnSuiteIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_MailDeliverSubLocationIdentifier", DbType="NVarChar(34)")]
		public string MailDeliverSubLocationIdentifier
		{
			get
			{
				return this._MailDeliverSubLocationIdentifier;
			}
			set
			{
				if ((this._MailDeliverSubLocationIdentifier != value))
				{
					this.OnMailDeliverSubLocationIdentifierChanging(value);
					this.SendPropertyChanging();
					this._MailDeliverSubLocationIdentifier = value;
					this.SendPropertyChanged("MailDeliverSubLocationIdentifier");
					this.OnMailDeliverSubLocationIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_DistrictSubDivisionIdentifier", DbType="NVarChar(34)")]
		public string DistrictSubDivisionIdentifier
		{
			get
			{
				return this._DistrictSubDivisionIdentifier;
			}
			set
			{
				if ((this._DistrictSubDivisionIdentifier != value))
				{
					this.OnDistrictSubDivisionIdentifierChanging(value);
					this.SendPropertyChanging();
					this._DistrictSubDivisionIdentifier = value;
					this.SendPropertyChanged("DistrictSubDivisionIdentifier");
					this.OnDistrictSubDivisionIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_PostBoxIdentifier", DbType="NVarChar(4)")]
		public string PostBoxIdentifier
		{
			get
			{
				return this._PostBoxIdentifier;
			}
			set
			{
				if ((this._PostBoxIdentifier != value))
				{
					this.OnPostBoxIdentifierChanging(value);
					this.SendPropertyChanging();
					this._PostBoxIdentifier = value;
					this.SendPropertyChanged("PostBoxIdentifier");
					this.OnPostBoxIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_PostCode", DbType="VarChar(10)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PostDistrictName", DbType="NVarChar(20)")]
		public string PostDistrictName
		{
			get
			{
				return this._PostDistrictName;
			}
			set
			{
				if ((this._PostDistrictName != value))
				{
					this.OnPostDistrictNameChanging(value);
					this.SendPropertyChanging();
					this._PostDistrictName = value;
					this.SendPropertyChanged("PostDistrictName");
					this.OnPostDistrictNameChanged();
				}
			}
		}
		
		[Column(Storage="_CareOfName", DbType="NVarChar(50)")]
		public string CareOfName
		{
			get
			{
				return this._CareOfName;
			}
			set
			{
				if ((this._CareOfName != value))
				{
					this.OnCareOfNameChanging(value);
					this.SendPropertyChanging();
					this._CareOfName = value;
					this.SendPropertyChanged("CareOfName");
					this.OnCareOfNameChanged();
				}
			}
		}
		
		[Column(Storage="_Line1", DbType="NVarChar(50)")]
		public string Line1
		{
			get
			{
				return this._Line1;
			}
			set
			{
				if ((this._Line1 != value))
				{
					this.OnLine1Changing(value);
					this.SendPropertyChanging();
					this._Line1 = value;
					this.SendPropertyChanged("Line1");
					this.OnLine1Changed();
				}
			}
		}
		
		[Column(Storage="_Line2", DbType="NVarChar(50)")]
		public string Line2
		{
			get
			{
				return this._Line2;
			}
			set
			{
				if ((this._Line2 != value))
				{
					this.OnLine2Changing(value);
					this.SendPropertyChanging();
					this._Line2 = value;
					this.SendPropertyChanged("Line2");
					this.OnLine2Changed();
				}
			}
		}
		
		[Column(Storage="_Line3", DbType="NVarChar(50)")]
		public string Line3
		{
			get
			{
				return this._Line3;
			}
			set
			{
				if ((this._Line3 != value))
				{
					this.OnLine3Changing(value);
					this.SendPropertyChanging();
					this._Line3 = value;
					this.SendPropertyChanged("Line3");
					this.OnLine3Changed();
				}
			}
		}
		
		[Column(Storage="_Line4", DbType="NVarChar(50)")]
		public string Line4
		{
			get
			{
				return this._Line4;
			}
			set
			{
				if ((this._Line4 != value))
				{
					this.OnLine4Changing(value);
					this.SendPropertyChanging();
					this._Line4 = value;
					this.SendPropertyChanged("Line4");
					this.OnLine4Changed();
				}
			}
		}
		
		[Column(Storage="_Line5", DbType="NVarChar(50)")]
		public string Line5
		{
			get
			{
				return this._Line5;
			}
			set
			{
				if ((this._Line5 != value))
				{
					this.OnLine5Changing(value);
					this.SendPropertyChanging();
					this._Line5 = value;
					this.SendPropertyChanged("Line5");
					this.OnLine5Changed();
				}
			}
		}
		
		[Column(Storage="_Line6", DbType="NVarChar(50)")]
		public string Line6
		{
			get
			{
				return this._Line6;
			}
			set
			{
				if ((this._Line6 != value))
				{
					this.OnLine6Changing(value);
					this.SendPropertyChanging();
					this._Line6 = value;
					this.SendPropertyChanged("Line6");
					this.OnLine6Changed();
				}
			}
		}
		
		[Column(Storage="_LocationDescription", DbType="NVarChar(50)")]
		public string LocationDescription
		{
			get
			{
				return this._LocationDescription;
			}
			set
			{
				if ((this._LocationDescription != value))
				{
					this.OnLocationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LocationDescription = value;
					this.SendPropertyChanged("LocationDescription");
					this.OnLocationDescriptionChanged();
				}
			}
		}
		
		[Association(Name="AddressStatus_Address", Storage="_AddressStatus", ThisKey="AddressStatusId", OtherKey="AddressStatusId", IsForeignKey=true)]
		public AddressStatus AddressStatus
		{
			get
			{
				return this._AddressStatus.Entity;
			}
			set
			{
				AddressStatus previousValue = this._AddressStatus.Entity;
				if (((previousValue != value) 
							|| (this._AddressStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressStatus.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._AddressStatus.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._AddressStatusId = value.AddressStatusId;
					}
					else
					{
						this._AddressStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("AddressStatus");
				}
			}
		}
		
		[Association(Name="Municipality_Address", Storage="_Municipality", ThisKey="MunicipalityCode", OtherKey="MunicipalityCode", IsForeignKey=true)]
		public Municipality Municipality
		{
			get
			{
				return this._Municipality.Entity;
			}
			set
			{
				Municipality previousValue = this._Municipality.Entity;
				if (((previousValue != value) 
							|| (this._Municipality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Municipality.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Municipality.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._MunicipalityCode = value.MunicipalityCode;
					}
					else
					{
						this._MunicipalityCode = default(string);
					}
					this.SendPropertyChanged("Municipality");
				}
			}
		}
		
		[Association(Name="Person_Address", Storage="_Person", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Address = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Address = this;
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="Country_Address", Storage="_Country", ThisKey="CountryAlpha2Code", OtherKey="Alpha2Code", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CountryCode = value.Alpha2Code;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OperationType")]
	public partial class OperationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OperationTypeId;
		
		private string _OperationName;
		
		private string _SourceTableName;
		
		private string _OldTableName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOperationTypeIdChanging(int value);
    partial void OnOperationTypeIdChanged();
    partial void OnOperationNameChanging(string value);
    partial void OnOperationNameChanged();
    partial void OnSourceTableNameChanging(string value);
    partial void OnSourceTableNameChanged();
    partial void OnOldTableNameChanging(string value);
    partial void OnOldTableNameChanged();
    #endregion
		
		public OperationType()
		{
			OnCreated();
		}
		
		[Column(Storage="_OperationTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OperationTypeId
		{
			get
			{
				return this._OperationTypeId;
			}
			set
			{
				if ((this._OperationTypeId != value))
				{
					this.OnOperationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeId = value;
					this.SendPropertyChanged("OperationTypeId");
					this.OnOperationTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_OperationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OperationName
		{
			get
			{
				return this._OperationName;
			}
			set
			{
				if ((this._OperationName != value))
				{
					this.OnOperationNameChanging(value);
					this.SendPropertyChanging();
					this._OperationName = value;
					this.SendPropertyChanged("OperationName");
					this.OnOperationNameChanged();
				}
			}
		}
		
		[Column(Storage="_SourceTableName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SourceTableName
		{
			get
			{
				return this._SourceTableName;
			}
			set
			{
				if ((this._SourceTableName != value))
				{
					this.OnSourceTableNameChanging(value);
					this.SendPropertyChanging();
					this._SourceTableName = value;
					this.SendPropertyChanged("SourceTableName");
					this.OnSourceTableNameChanged();
				}
			}
		}
		
		[Column(Storage="_OldTableName", DbType="VarChar(50)")]
		public string OldTableName
		{
			get
			{
				return this._OldTableName;
			}
			set
			{
				if ((this._OldTableName != value))
				{
					this.OnOldTableNameChanging(value);
					this.SendPropertyChanging();
					this._OldTableName = value;
					this.SendPropertyChanged("OldTableName");
					this.OnOldTableNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BirthdateNotification")]
	public partial class BirthdateNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NotificationId;
		
		private System.Nullable<int> _AgeYears;
		
		private int _PriorDays;
		
		private EntityRef<Notification> _Notification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIdChanging(System.Guid value);
    partial void OnNotificationIdChanged();
    partial void OnAgeYearsChanging(System.Nullable<int> value);
    partial void OnAgeYearsChanged();
    partial void OnPriorDaysChanging(int value);
    partial void OnPriorDaysChanged();
    #endregion
		
		public BirthdateNotification()
		{
			this._Notification = default(EntityRef<Notification>);
			OnCreated();
		}
		
		[Column(Storage="_NotificationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					if (this._Notification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_AgeYears", DbType="Int")]
		public System.Nullable<int> AgeYears
		{
			get
			{
				return this._AgeYears;
			}
			set
			{
				if ((this._AgeYears != value))
				{
					this.OnAgeYearsChanging(value);
					this.SendPropertyChanging();
					this._AgeYears = value;
					this.SendPropertyChanged("AgeYears");
					this.OnAgeYearsChanged();
				}
			}
		}
		
		[Column(Storage="_PriorDays", DbType="Int NOT NULL")]
		public int PriorDays
		{
			get
			{
				return this._PriorDays;
			}
			set
			{
				if ((this._PriorDays != value))
				{
					this.OnPriorDaysChanging(value);
					this.SendPropertyChanging();
					this._PriorDays = value;
					this.SendPropertyChanged("PriorDays");
					this.OnPriorDaysChanged();
				}
			}
		}
		
		[Association(Name="Notification_BirthdateNotification", Storage="_Notification", ThisKey="NotificationId", OtherKey="NotificationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Notification Notification
		{
			get
			{
				return this._Notification.Entity;
			}
			set
			{
				Notification previousValue = this._Notification.Entity;
				if (((previousValue != value) 
							|| (this._Notification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notification.Entity = null;
						previousValue.BirthdateNotification = null;
					}
					this._Notification.Entity = value;
					if ((value != null))
					{
						value.BirthdateNotification = this;
						this._NotificationId = value.NotificationId;
					}
					else
					{
						this._NotificationId = default(System.Guid);
					}
					this.SendPropertyChanged("Notification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NotificationPerson")]
	public partial class NotificationPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NotificationPersonId;
		
		private System.Guid _NotificationId;
		
		private System.Guid _PersonId;
		
		private EntityRef<BirthdateNotificationPerson> _BirthdateNotificationPerson;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Notification> _Notification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationPersonIdChanging(System.Guid value);
    partial void OnNotificationPersonIdChanged();
    partial void OnNotificationIdChanging(System.Guid value);
    partial void OnNotificationIdChanged();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    #endregion
		
		public NotificationPerson()
		{
			this._BirthdateNotificationPerson = default(EntityRef<BirthdateNotificationPerson>);
			this._Person = default(EntityRef<Person>);
			this._Notification = default(EntityRef<Notification>);
			OnCreated();
		}
		
		[Column(Storage="_NotificationPersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NotificationPersonId
		{
			get
			{
				return this._NotificationPersonId;
			}
			set
			{
				if ((this._NotificationPersonId != value))
				{
					this.OnNotificationPersonIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationPersonId = value;
					this.SendPropertyChanged("NotificationPersonId");
					this.OnNotificationPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_NotificationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					if (this._Notification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Association(Name="NotificationPerson_BirthdateNotificationPerson", Storage="_BirthdateNotificationPerson", ThisKey="NotificationPersonId", OtherKey="NotificationPersonId", IsUnique=true, IsForeignKey=false)]
		public BirthdateNotificationPerson BirthdateNotificationPerson
		{
			get
			{
				return this._BirthdateNotificationPerson.Entity;
			}
			set
			{
				BirthdateNotificationPerson previousValue = this._BirthdateNotificationPerson.Entity;
				if (((previousValue != value) 
							|| (this._BirthdateNotificationPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BirthdateNotificationPerson.Entity = null;
						previousValue.NotificationPerson = null;
					}
					this._BirthdateNotificationPerson.Entity = value;
					if ((value != null))
					{
						value.NotificationPerson = this;
					}
					this.SendPropertyChanged("BirthdateNotificationPerson");
				}
			}
		}
		
		[Association(Name="Person_NotificationPerson", Storage="_Person", ThisKey="PersonId", OtherKey="PersonId", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.NotificationPersons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.NotificationPersons.Add(this);
						this._PersonId = value.PersonId;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="Notification_NotificationPerson", Storage="_Notification", ThisKey="NotificationId", OtherKey="NotificationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Notification Notification
		{
			get
			{
				return this._Notification.Entity;
			}
			set
			{
				Notification previousValue = this._Notification.Entity;
				if (((previousValue != value) 
							|| (this._Notification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notification.Entity = null;
						previousValue.NotificationPersons.Remove(this);
					}
					this._Notification.Entity = value;
					if ((value != null))
					{
						value.NotificationPersons.Add(this);
						this._NotificationId = value.NotificationId;
					}
					else
					{
						this._NotificationId = default(System.Guid);
					}
					this.SendPropertyChanged("Notification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BirthdateNotificationPerson")]
	public partial class BirthdateNotificationPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NotificationPersonId;
		
		private int _Age;
		
		private EntityRef<NotificationPerson> _NotificationPerson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationPersonIdChanging(System.Guid value);
    partial void OnNotificationPersonIdChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    #endregion
		
		public BirthdateNotificationPerson()
		{
			this._NotificationPerson = default(EntityRef<NotificationPerson>);
			OnCreated();
		}
		
		[Column(Storage="_NotificationPersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NotificationPersonId
		{
			get
			{
				return this._NotificationPersonId;
			}
			set
			{
				if ((this._NotificationPersonId != value))
				{
					if (this._NotificationPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationPersonIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationPersonId = value;
					this.SendPropertyChanged("NotificationPersonId");
					this.OnNotificationPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[Association(Name="NotificationPerson_BirthdateNotificationPerson", Storage="_NotificationPerson", ThisKey="NotificationPersonId", OtherKey="NotificationPersonId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public NotificationPerson NotificationPerson
		{
			get
			{
				return this._NotificationPerson.Entity;
			}
			set
			{
				NotificationPerson previousValue = this._NotificationPerson.Entity;
				if (((previousValue != value) 
							|| (this._NotificationPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NotificationPerson.Entity = null;
						previousValue.BirthdateNotificationPerson = null;
					}
					this._NotificationPerson.Entity = value;
					if ((value != null))
					{
						value.BirthdateNotificationPerson = this;
						this._NotificationPersonId = value.NotificationPersonId;
					}
					else
					{
						this._NotificationPersonId = default(System.Guid);
					}
					this.SendPropertyChanged("NotificationPerson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Notification")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NotificationId;
		
		private System.Guid _SubscriptionId;
		
		private System.DateTime _NotificationDate;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<BirthdateNotification> _BirthdateNotification;
		
		private EntitySet<NotificationPerson> _NotificationPersons;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIdChanging(System.Guid value);
    partial void OnNotificationIdChanged();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnNotificationDateChanging(System.DateTime value);
    partial void OnNotificationDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public Notification()
		{
			this._BirthdateNotification = default(EntityRef<BirthdateNotification>);
			this._NotificationPersons = new EntitySet<NotificationPerson>(new Action<NotificationPerson>(this.attach_NotificationPersons), new Action<NotificationPerson>(this.detach_NotificationPersons));
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[Column(Storage="_NotificationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_NotificationDate", DbType="DateTime NOT NULL")]
		public System.DateTime NotificationDate
		{
			get
			{
				return this._NotificationDate;
			}
			set
			{
				if ((this._NotificationDate != value))
				{
					this.OnNotificationDateChanging(value);
					this.SendPropertyChanging();
					this._NotificationDate = value;
					this.SendPropertyChanged("NotificationDate");
					this.OnNotificationDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Association(Name="Notification_BirthdateNotification", Storage="_BirthdateNotification", ThisKey="NotificationId", OtherKey="NotificationId", IsUnique=true, IsForeignKey=false)]
		public BirthdateNotification BirthdateNotification
		{
			get
			{
				return this._BirthdateNotification.Entity;
			}
			set
			{
				BirthdateNotification previousValue = this._BirthdateNotification.Entity;
				if (((previousValue != value) 
							|| (this._BirthdateNotification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BirthdateNotification.Entity = null;
						previousValue.Notification = null;
					}
					this._BirthdateNotification.Entity = value;
					if ((value != null))
					{
						value.Notification = this;
					}
					this.SendPropertyChanged("BirthdateNotification");
				}
			}
		}
		
		[Association(Name="Notification_NotificationPerson", Storage="_NotificationPersons", ThisKey="NotificationId", OtherKey="NotificationId")]
		public EntitySet<NotificationPerson> NotificationPersons
		{
			get
			{
				return this._NotificationPersons;
			}
			set
			{
				this._NotificationPersons.Assign(value);
			}
		}
		
		[Association(Name="Subscription_Notification", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NotificationPersons(NotificationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Notification = this;
		}
		
		private void detach_NotificationPersons(NotificationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Notification = null;
		}
	}
	
	[Table(Name="dbo.ChannelType")]
	public partial class ChannelType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChannelTypeId;
		
		private string _Name;
		
		private EntitySet<Channel> _Channels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelTypeIdChanging(int value);
    partial void OnChannelTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ChannelType()
		{
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			OnCreated();
		}
		
		[Column(Storage="_ChannelTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChannelTypeId
		{
			get
			{
				return this._ChannelTypeId;
			}
			set
			{
				if ((this._ChannelTypeId != value))
				{
					this.OnChannelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelTypeId = value;
					this.SendPropertyChanged("ChannelTypeId");
					this.OnChannelTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ChannelType_Channel", Storage="_Channels", ThisKey="ChannelTypeId", OtherKey="ChannelTypeId")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.ChannelType = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.ChannelType = null;
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Alpha2Code;
		
		private string _Alpha3Code;
		
		private int _NumericCode;
		
		private string _CountryName;
		
		private string _Description;
		
		private string _DanishCountryName;
		
		private string _DanishCountryName2;
		
		private System.Nullable<int> _KmdCode;
		
		private System.Nullable<int> _KmdCode2;
		
		private System.Nullable<int> _KmdCode3;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlpha2CodeChanging(string value);
    partial void OnAlpha2CodeChanged();
    partial void OnAlpha3CodeChanging(string value);
    partial void OnAlpha3CodeChanged();
    partial void OnNumericCodeChanging(int value);
    partial void OnNumericCodeChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDanishCountryNameChanging(string value);
    partial void OnDanishCountryNameChanged();
    partial void OnDanishCountryName2Changing(string value);
    partial void OnDanishCountryName2Changed();
    partial void OnKmdCodeChanging(System.Nullable<int> value);
    partial void OnKmdCodeChanged();
    partial void OnKmdCode2Changing(System.Nullable<int> value);
    partial void OnKmdCode2Changed();
    partial void OnKmdCode3Changing(System.Nullable<int> value);
    partial void OnKmdCode3Changed();
    #endregion
		
		public Country()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_Alpha2Code", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Alpha2Code
		{
			get
			{
				return this._Alpha2Code;
			}
			set
			{
				if ((this._Alpha2Code != value))
				{
					this.OnAlpha2CodeChanging(value);
					this.SendPropertyChanging();
					this._Alpha2Code = value;
					this.SendPropertyChanged("Alpha2Code");
					this.OnAlpha2CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Alpha3Code", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string Alpha3Code
		{
			get
			{
				return this._Alpha3Code;
			}
			set
			{
				if ((this._Alpha3Code != value))
				{
					this.OnAlpha3CodeChanging(value);
					this.SendPropertyChanging();
					this._Alpha3Code = value;
					this.SendPropertyChanged("Alpha3Code");
					this.OnAlpha3CodeChanged();
				}
			}
		}
		
		[Column(Storage="_NumericCode", DbType="Int NOT NULL")]
		public int NumericCode
		{
			get
			{
				return this._NumericCode;
			}
			set
			{
				if ((this._NumericCode != value))
				{
					this.OnNumericCodeChanging(value);
					this.SendPropertyChanging();
					this._NumericCode = value;
					this.SendPropertyChanged("NumericCode");
					this.OnNumericCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DanishCountryName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string DanishCountryName
		{
			get
			{
				return this._DanishCountryName;
			}
			set
			{
				if ((this._DanishCountryName != value))
				{
					this.OnDanishCountryNameChanging(value);
					this.SendPropertyChanging();
					this._DanishCountryName = value;
					this.SendPropertyChanged("DanishCountryName");
					this.OnDanishCountryNameChanged();
				}
			}
		}
		
		[Column(Storage="_DanishCountryName2", DbType="NVarChar(50)")]
		public string DanishCountryName2
		{
			get
			{
				return this._DanishCountryName2;
			}
			set
			{
				if ((this._DanishCountryName2 != value))
				{
					this.OnDanishCountryName2Changing(value);
					this.SendPropertyChanging();
					this._DanishCountryName2 = value;
					this.SendPropertyChanged("DanishCountryName2");
					this.OnDanishCountryName2Changed();
				}
			}
		}
		
		[Column(Storage="_KmdCode", DbType="Int")]
		public System.Nullable<int> KmdCode
		{
			get
			{
				return this._KmdCode;
			}
			set
			{
				if ((this._KmdCode != value))
				{
					this.OnKmdCodeChanging(value);
					this.SendPropertyChanging();
					this._KmdCode = value;
					this.SendPropertyChanged("KmdCode");
					this.OnKmdCodeChanged();
				}
			}
		}
		
		[Column(Storage="_KmdCode2", DbType="Int")]
		public System.Nullable<int> KmdCode2
		{
			get
			{
				return this._KmdCode2;
			}
			set
			{
				if ((this._KmdCode2 != value))
				{
					this.OnKmdCode2Changing(value);
					this.SendPropertyChanging();
					this._KmdCode2 = value;
					this.SendPropertyChanged("KmdCode2");
					this.OnKmdCode2Changed();
				}
			}
		}
		
		[Column(Storage="_KmdCode3", DbType="Int")]
		public System.Nullable<int> KmdCode3
		{
			get
			{
				return this._KmdCode3;
			}
			set
			{
				if ((this._KmdCode3 != value))
				{
					this.OnKmdCode3Changing(value);
					this.SendPropertyChanging();
					this._KmdCode3 = value;
					this.SendPropertyChanged("KmdCode3");
					this.OnKmdCode3Changed();
				}
			}
		}
		
		[Association(Name="Country_Person", Storage="_Persons", ThisKey="Alpha2Code", OtherKey="NationalityCountryAlpha2Code")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[Association(Name="Country_Address", Storage="_Addresses", ThisKey="Alpha2Code", OtherKey="CountryAlpha2Code")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
}
#pragma warning restore 1591
