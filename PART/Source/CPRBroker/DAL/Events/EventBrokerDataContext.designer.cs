#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CPRBroker.DAL.Events
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PartEventBroker")]
	public partial class EventBrokerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertSubscriptionType(SubscriptionType instance);
    partial void UpdateSubscriptionType(SubscriptionType instance);
    partial void DeleteSubscriptionType(SubscriptionType instance);
    partial void InsertBirthdateNotification(BirthdateNotification instance);
    partial void UpdateBirthdateNotification(BirthdateNotification instance);
    partial void DeleteBirthdateNotification(BirthdateNotification instance);
    partial void InsertBirthdateNotificationPerson(BirthdateNotificationPerson instance);
    partial void UpdateBirthdateNotificationPerson(BirthdateNotificationPerson instance);
    partial void DeleteBirthdateNotificationPerson(BirthdateNotificationPerson instance);
    partial void InsertBirthdateSubscription(BirthdateSubscription instance);
    partial void UpdateBirthdateSubscription(BirthdateSubscription instance);
    partial void DeleteBirthdateSubscription(BirthdateSubscription instance);
    partial void InsertChannel(Channel instance);
    partial void UpdateChannel(Channel instance);
    partial void DeleteChannel(Channel instance);
    partial void InsertChannelType(ChannelType instance);
    partial void UpdateChannelType(ChannelType instance);
    partial void DeleteChannelType(ChannelType instance);
    partial void InsertDataChangeEvent(DataChangeEvent instance);
    partial void UpdateDataChangeEvent(DataChangeEvent instance);
    partial void DeleteDataChangeEvent(DataChangeEvent instance);
    partial void InsertDataSubscription(DataSubscription instance);
    partial void UpdateDataSubscription(DataSubscription instance);
    partial void DeleteDataSubscription(DataSubscription instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertNotificationPerson(NotificationPerson instance);
    partial void UpdateNotificationPerson(NotificationPerson instance);
    partial void DeleteNotificationPerson(NotificationPerson instance);
    partial void InsertSubscription(Subscription instance);
    partial void UpdateSubscription(Subscription instance);
    partial void DeleteSubscription(Subscription instance);
    partial void InsertSubscriptionPerson(SubscriptionPerson instance);
    partial void UpdateSubscriptionPerson(SubscriptionPerson instance);
    partial void DeleteSubscriptionPerson(SubscriptionPerson instance);
    #endregion
		
		public EventBrokerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventBrokerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventBrokerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventBrokerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<SubscriptionType> SubscriptionTypes
		{
			get
			{
				return this.GetTable<SubscriptionType>();
			}
		}
		
		public System.Data.Linq.Table<BirthdateNotification> BirthdateNotifications
		{
			get
			{
				return this.GetTable<BirthdateNotification>();
			}
		}
		
		public System.Data.Linq.Table<BirthdateNotificationPerson> BirthdateNotificationPersons
		{
			get
			{
				return this.GetTable<BirthdateNotificationPerson>();
			}
		}
		
		public System.Data.Linq.Table<BirthdateSubscription> BirthdateSubscriptions
		{
			get
			{
				return this.GetTable<BirthdateSubscription>();
			}
		}
		
		public System.Data.Linq.Table<Channel> Channels
		{
			get
			{
				return this.GetTable<Channel>();
			}
		}
		
		public System.Data.Linq.Table<ChannelType> ChannelTypes
		{
			get
			{
				return this.GetTable<ChannelType>();
			}
		}
		
		public System.Data.Linq.Table<DataChangeEvent> DataChangeEvents
		{
			get
			{
				return this.GetTable<DataChangeEvent>();
			}
		}
		
		public System.Data.Linq.Table<DataSubscription> DataSubscriptions
		{
			get
			{
				return this.GetTable<DataSubscription>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<NotificationPerson> NotificationPersons
		{
			get
			{
				return this.GetTable<NotificationPerson>();
			}
		}
		
		public System.Data.Linq.Table<Subscription> Subscriptions
		{
			get
			{
				return this.GetTable<Subscription>();
			}
		}
		
		public System.Data.Linq.Table<SubscriptionPerson> SubscriptionPersons
		{
			get
			{
				return this.GetTable<SubscriptionPerson>();
			}
		}
		
		[Function(Name="dbo.GetDueNotifications")]
		public int GetDueNotifications([Parameter(Name="Now", DbType="DateTime")] System.Nullable<System.DateTime> now, [Parameter(Name="LastTime", DbType="DateTime")] System.Nullable<System.DateTime> lastTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), now, lastTime);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.InsertChangeNotificationData")]
		public int InsertChangeNotificationData([Parameter(Name="SubscriptionId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> subscriptionId, [Parameter(Name="Today", DbType="DateTime")] System.Nullable<System.DateTime> today, [Parameter(Name="LastTime", DbType="DateTime")] System.Nullable<System.DateTime> lastTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), subscriptionId, today, lastTime);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.InsertBirthdateNotificationData")]
		public int InsertBirthdateNotificationData([Parameter(Name="SubscriptionId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> subscriptionId, [Parameter(Name="Today", DbType="DateTime")] System.Nullable<System.DateTime> today)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), subscriptionId, today);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private string _Name;
		
		private string _Token;
		
		private System.DateTime _RegistrationDate;
		
		private bool _IsApproved;
		
		private System.Nullable<System.DateTime> _ApprovedDate;
		
		private EntitySet<Subscription> _Subscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTokenChanging(string value);
    partial void OnTokenChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnApprovedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedDateChanged();
    #endregion
		
		public Application()
		{
			this._Subscriptions = new EntitySet<Subscription>(new Action<Subscription>(this.attach_Subscriptions), new Action<Subscription>(this.detach_Subscriptions));
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Token", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Token
		{
			get
			{
				return this._Token;
			}
			set
			{
				if ((this._Token != value))
				{
					this.OnTokenChanging(value);
					this.SendPropertyChanging();
					this._Token = value;
					this.SendPropertyChanged("Token");
					this.OnTokenChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_ApprovedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApprovedDate
		{
			get
			{
				return this._ApprovedDate;
			}
			set
			{
				if ((this._ApprovedDate != value))
				{
					this.OnApprovedDateChanging(value);
					this.SendPropertyChanging();
					this._ApprovedDate = value;
					this.SendPropertyChanged("ApprovedDate");
					this.OnApprovedDateChanged();
				}
			}
		}
		
		[Association(Name="Application_Subscription", Storage="_Subscriptions", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<Subscription> Subscriptions
		{
			get
			{
				return this._Subscriptions;
			}
			set
			{
				this._Subscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Application = this;
		}
		
		private void detach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.Application = null;
		}
	}
	
	[Table(Name="dbo.SubscriptionType")]
	public partial class SubscriptionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubscriptionTypeId;
		
		private string _TypeName;
		
		private EntitySet<Subscription> _Subscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionTypeIdChanging(int value);
    partial void OnSubscriptionTypeIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public SubscriptionType()
		{
			this._Subscriptions = new EntitySet<Subscription>(new Action<Subscription>(this.attach_Subscriptions), new Action<Subscription>(this.detach_Subscriptions));
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubscriptionTypeId
		{
			get
			{
				return this._SubscriptionTypeId;
			}
			set
			{
				if ((this._SubscriptionTypeId != value))
				{
					this.OnSubscriptionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionTypeId = value;
					this.SendPropertyChanged("SubscriptionTypeId");
					this.OnSubscriptionTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Association(Name="SubscriptionType_Subscription", Storage="_Subscriptions", ThisKey="SubscriptionTypeId", OtherKey="SubscriptionTypeId")]
		public EntitySet<Subscription> Subscriptions
		{
			get
			{
				return this._Subscriptions;
			}
			set
			{
				this._Subscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.SubscriptionType = this;
		}
		
		private void detach_Subscriptions(Subscription entity)
		{
			this.SendPropertyChanging();
			entity.SubscriptionType = null;
		}
	}
	
	[Table(Name="dbo.BirthdateNotification")]
	public partial class BirthdateNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NotificationId;
		
		private System.Nullable<int> _AgeYears;
		
		private int _PriorDays;
		
		private EntityRef<Notification> _Notification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIdChanging(System.Guid value);
    partial void OnNotificationIdChanged();
    partial void OnAgeYearsChanging(System.Nullable<int> value);
    partial void OnAgeYearsChanged();
    partial void OnPriorDaysChanging(int value);
    partial void OnPriorDaysChanged();
    #endregion
		
		public BirthdateNotification()
		{
			this._Notification = default(EntityRef<Notification>);
			OnCreated();
		}
		
		[Column(Storage="_NotificationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					if (this._Notification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_AgeYears", DbType="Int")]
		public System.Nullable<int> AgeYears
		{
			get
			{
				return this._AgeYears;
			}
			set
			{
				if ((this._AgeYears != value))
				{
					this.OnAgeYearsChanging(value);
					this.SendPropertyChanging();
					this._AgeYears = value;
					this.SendPropertyChanged("AgeYears");
					this.OnAgeYearsChanged();
				}
			}
		}
		
		[Column(Storage="_PriorDays", DbType="Int NOT NULL")]
		public int PriorDays
		{
			get
			{
				return this._PriorDays;
			}
			set
			{
				if ((this._PriorDays != value))
				{
					this.OnPriorDaysChanging(value);
					this.SendPropertyChanging();
					this._PriorDays = value;
					this.SendPropertyChanged("PriorDays");
					this.OnPriorDaysChanged();
				}
			}
		}
		
		[Association(Name="Notification_BirthdateNotification", Storage="_Notification", ThisKey="NotificationId", OtherKey="NotificationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Notification Notification
		{
			get
			{
				return this._Notification.Entity;
			}
			set
			{
				Notification previousValue = this._Notification.Entity;
				if (((previousValue != value) 
							|| (this._Notification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notification.Entity = null;
						previousValue.BirthdateNotification = null;
					}
					this._Notification.Entity = value;
					if ((value != null))
					{
						value.BirthdateNotification = this;
						this._NotificationId = value.NotificationId;
					}
					else
					{
						this._NotificationId = default(System.Guid);
					}
					this.SendPropertyChanged("Notification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BirthdateNotificationPerson")]
	public partial class BirthdateNotificationPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NotificationPersonId;
		
		private int _Age;
		
		private EntityRef<NotificationPerson> _NotificationPerson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationPersonIdChanging(System.Guid value);
    partial void OnNotificationPersonIdChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    #endregion
		
		public BirthdateNotificationPerson()
		{
			this._NotificationPerson = default(EntityRef<NotificationPerson>);
			OnCreated();
		}
		
		[Column(Storage="_NotificationPersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NotificationPersonId
		{
			get
			{
				return this._NotificationPersonId;
			}
			set
			{
				if ((this._NotificationPersonId != value))
				{
					if (this._NotificationPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationPersonIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationPersonId = value;
					this.SendPropertyChanged("NotificationPersonId");
					this.OnNotificationPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[Association(Name="NotificationPerson_BirthdateNotificationPerson", Storage="_NotificationPerson", ThisKey="NotificationPersonId", OtherKey="NotificationPersonId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public NotificationPerson NotificationPerson
		{
			get
			{
				return this._NotificationPerson.Entity;
			}
			set
			{
				NotificationPerson previousValue = this._NotificationPerson.Entity;
				if (((previousValue != value) 
							|| (this._NotificationPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NotificationPerson.Entity = null;
						previousValue.BirthdateNotificationPerson = null;
					}
					this._NotificationPerson.Entity = value;
					if ((value != null))
					{
						value.BirthdateNotificationPerson = this;
						this._NotificationPersonId = value.NotificationPersonId;
					}
					else
					{
						this._NotificationPersonId = default(System.Guid);
					}
					this.SendPropertyChanged("NotificationPerson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BirthdateSubscription")]
	public partial class BirthdateSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionId;
		
		private System.Nullable<int> _AgeYears;
		
		private int _PriorDays;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnAgeYearsChanging(System.Nullable<int> value);
    partial void OnAgeYearsChanged();
    partial void OnPriorDaysChanging(int value);
    partial void OnPriorDaysChanged();
    #endregion
		
		public BirthdateSubscription()
		{
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_AgeYears", DbType="Int")]
		public System.Nullable<int> AgeYears
		{
			get
			{
				return this._AgeYears;
			}
			set
			{
				if ((this._AgeYears != value))
				{
					this.OnAgeYearsChanging(value);
					this.SendPropertyChanging();
					this._AgeYears = value;
					this.SendPropertyChanged("AgeYears");
					this.OnAgeYearsChanged();
				}
			}
		}
		
		[Column(Storage="_PriorDays", DbType="Int NOT NULL")]
		public int PriorDays
		{
			get
			{
				return this._PriorDays;
			}
			set
			{
				if ((this._PriorDays != value))
				{
					this.OnPriorDaysChanging(value);
					this.SendPropertyChanging();
					this._PriorDays = value;
					this.SendPropertyChanged("PriorDays");
					this.OnPriorDaysChanged();
				}
			}
		}
		
		[Association(Name="Subscription_BirthdateSubscription", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.BirthdateSubscription = null;
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.BirthdateSubscription = this;
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Channel")]
	public partial class Channel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ChannelId;
		
		private int _ChannelTypeId;
		
		private System.Guid _SubscriptionId;
		
		private string _Url;
		
		private EntityRef<ChannelType> _ChannelType;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelIdChanging(System.Guid value);
    partial void OnChannelIdChanged();
    partial void OnChannelTypeIdChanging(int value);
    partial void OnChannelTypeIdChanged();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Channel()
		{
			this._ChannelType = default(EntityRef<ChannelType>);
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[Column(Storage="_ChannelId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ChannelId
		{
			get
			{
				return this._ChannelId;
			}
			set
			{
				if ((this._ChannelId != value))
				{
					this.OnChannelIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelId = value;
					this.SendPropertyChanged("ChannelId");
					this.OnChannelIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChannelTypeId", DbType="Int NOT NULL")]
		public int ChannelTypeId
		{
			get
			{
				return this._ChannelTypeId;
			}
			set
			{
				if ((this._ChannelTypeId != value))
				{
					if (this._ChannelType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChannelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelTypeId = value;
					this.SendPropertyChanged("ChannelTypeId");
					this.OnChannelTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Association(Name="ChannelType_Channel", Storage="_ChannelType", ThisKey="ChannelTypeId", OtherKey="ChannelTypeId", IsForeignKey=true)]
		public ChannelType ChannelType
		{
			get
			{
				return this._ChannelType.Entity;
			}
			set
			{
				ChannelType previousValue = this._ChannelType.Entity;
				if (((previousValue != value) 
							|| (this._ChannelType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChannelType.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._ChannelType.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._ChannelTypeId = value.ChannelTypeId;
					}
					else
					{
						this._ChannelTypeId = default(int);
					}
					this.SendPropertyChanged("ChannelType");
				}
			}
		}
		
		[Association(Name="Subscription_Channel", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ChannelType")]
	public partial class ChannelType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChannelTypeId;
		
		private string _Name;
		
		private EntitySet<Channel> _Channels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelTypeIdChanging(int value);
    partial void OnChannelTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ChannelType()
		{
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			OnCreated();
		}
		
		[Column(Storage="_ChannelTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChannelTypeId
		{
			get
			{
				return this._ChannelTypeId;
			}
			set
			{
				if ((this._ChannelTypeId != value))
				{
					this.OnChannelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ChannelTypeId = value;
					this.SendPropertyChanged("ChannelTypeId");
					this.OnChannelTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ChannelType_Channel", Storage="_Channels", ThisKey="ChannelTypeId", OtherKey="ChannelTypeId")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.ChannelType = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.ChannelType = null;
		}
	}
	
	[Table(Name="dbo.DataChangeEvent")]
	public partial class DataChangeEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DataChangeEventId;
		
		private System.Guid _UUID;
		
		private System.DateTime _ReceivedData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataChangeEventIdChanging(System.Guid value);
    partial void OnDataChangeEventIdChanged();
    partial void OnUUIDChanging(System.Guid value);
    partial void OnUUIDChanged();
    partial void OnReceivedDataChanging(System.DateTime value);
    partial void OnReceivedDataChanged();
    #endregion
		
		public DataChangeEvent()
		{
			OnCreated();
		}
		
		[Column(Storage="_DataChangeEventId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DataChangeEventId
		{
			get
			{
				return this._DataChangeEventId;
			}
			set
			{
				if ((this._DataChangeEventId != value))
				{
					this.OnDataChangeEventIdChanging(value);
					this.SendPropertyChanging();
					this._DataChangeEventId = value;
					this.SendPropertyChanged("DataChangeEventId");
					this.OnDataChangeEventIdChanged();
				}
			}
		}
		
		[Column(Storage="_UUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UUID
		{
			get
			{
				return this._UUID;
			}
			set
			{
				if ((this._UUID != value))
				{
					this.OnUUIDChanging(value);
					this.SendPropertyChanging();
					this._UUID = value;
					this.SendPropertyChanged("UUID");
					this.OnUUIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedData", DbType="DateTime NOT NULL")]
		public System.DateTime ReceivedData
		{
			get
			{
				return this._ReceivedData;
			}
			set
			{
				if ((this._ReceivedData != value))
				{
					this.OnReceivedDataChanging(value);
					this.SendPropertyChanging();
					this._ReceivedData = value;
					this.SendPropertyChanged("ReceivedData");
					this.OnReceivedDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DataSubscription")]
	public partial class DataSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionId;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    #endregion
		
		public DataSubscription()
		{
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Association(Name="Subscription_DataSubscription", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.DataSubscription = null;
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.DataSubscription = this;
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Notification")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NotificationId;
		
		private System.Guid _SubscriptionId;
		
		private System.DateTime _NotificationDate;
		
		private System.DateTime _CreatedDate;
		
		private EntityRef<BirthdateNotification> _BirthdateNotification;
		
		private EntitySet<NotificationPerson> _NotificationPersons;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIdChanging(System.Guid value);
    partial void OnNotificationIdChanged();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnNotificationDateChanging(System.DateTime value);
    partial void OnNotificationDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public Notification()
		{
			this._BirthdateNotification = default(EntityRef<BirthdateNotification>);
			this._NotificationPersons = new EntitySet<NotificationPerson>(new Action<NotificationPerson>(this.attach_NotificationPersons), new Action<NotificationPerson>(this.detach_NotificationPersons));
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[Column(Storage="_NotificationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_NotificationDate", DbType="DateTime NOT NULL")]
		public System.DateTime NotificationDate
		{
			get
			{
				return this._NotificationDate;
			}
			set
			{
				if ((this._NotificationDate != value))
				{
					this.OnNotificationDateChanging(value);
					this.SendPropertyChanging();
					this._NotificationDate = value;
					this.SendPropertyChanged("NotificationDate");
					this.OnNotificationDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Association(Name="Notification_BirthdateNotification", Storage="_BirthdateNotification", ThisKey="NotificationId", OtherKey="NotificationId", IsUnique=true, IsForeignKey=false)]
		public BirthdateNotification BirthdateNotification
		{
			get
			{
				return this._BirthdateNotification.Entity;
			}
			set
			{
				BirthdateNotification previousValue = this._BirthdateNotification.Entity;
				if (((previousValue != value) 
							|| (this._BirthdateNotification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BirthdateNotification.Entity = null;
						previousValue.Notification = null;
					}
					this._BirthdateNotification.Entity = value;
					if ((value != null))
					{
						value.Notification = this;
					}
					this.SendPropertyChanged("BirthdateNotification");
				}
			}
		}
		
		[Association(Name="Notification_NotificationPerson", Storage="_NotificationPersons", ThisKey="NotificationId", OtherKey="NotificationId")]
		public EntitySet<NotificationPerson> NotificationPersons
		{
			get
			{
				return this._NotificationPersons;
			}
			set
			{
				this._NotificationPersons.Assign(value);
			}
		}
		
		[Association(Name="Subscription_Notification", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(System.Guid);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NotificationPersons(NotificationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Notification = this;
		}
		
		private void detach_NotificationPersons(NotificationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Notification = null;
		}
	}
	
	[Table(Name="dbo.NotificationPerson")]
	public partial class NotificationPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NotificationPersonId;
		
		private System.Guid _NotificationId;
		
		private System.Guid _PersonId;
		
		private EntityRef<BirthdateNotificationPerson> _BirthdateNotificationPerson;
		
		private EntityRef<Notification> _Notification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationPersonIdChanging(System.Guid value);
    partial void OnNotificationPersonIdChanged();
    partial void OnNotificationIdChanging(System.Guid value);
    partial void OnNotificationIdChanged();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    #endregion
		
		public NotificationPerson()
		{
			this._BirthdateNotificationPerson = default(EntityRef<BirthdateNotificationPerson>);
			this._Notification = default(EntityRef<Notification>);
			OnCreated();
		}
		
		[Column(Storage="_NotificationPersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NotificationPersonId
		{
			get
			{
				return this._NotificationPersonId;
			}
			set
			{
				if ((this._NotificationPersonId != value))
				{
					this.OnNotificationPersonIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationPersonId = value;
					this.SendPropertyChanged("NotificationPersonId");
					this.OnNotificationPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_NotificationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					if (this._Notification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Association(Name="NotificationPerson_BirthdateNotificationPerson", Storage="_BirthdateNotificationPerson", ThisKey="NotificationPersonId", OtherKey="NotificationPersonId", IsUnique=true, IsForeignKey=false)]
		public BirthdateNotificationPerson BirthdateNotificationPerson
		{
			get
			{
				return this._BirthdateNotificationPerson.Entity;
			}
			set
			{
				BirthdateNotificationPerson previousValue = this._BirthdateNotificationPerson.Entity;
				if (((previousValue != value) 
							|| (this._BirthdateNotificationPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BirthdateNotificationPerson.Entity = null;
						previousValue.NotificationPerson = null;
					}
					this._BirthdateNotificationPerson.Entity = value;
					if ((value != null))
					{
						value.NotificationPerson = this;
					}
					this.SendPropertyChanged("BirthdateNotificationPerson");
				}
			}
		}
		
		[Association(Name="Notification_NotificationPerson", Storage="_Notification", ThisKey="NotificationId", OtherKey="NotificationId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Notification Notification
		{
			get
			{
				return this._Notification.Entity;
			}
			set
			{
				Notification previousValue = this._Notification.Entity;
				if (((previousValue != value) 
							|| (this._Notification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notification.Entity = null;
						previousValue.NotificationPersons.Remove(this);
					}
					this._Notification.Entity = value;
					if ((value != null))
					{
						value.NotificationPersons.Add(this);
						this._NotificationId = value.NotificationId;
					}
					else
					{
						this._NotificationId = default(System.Guid);
					}
					this.SendPropertyChanged("Notification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Subscription")]
	public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionId;
		
		private int _SubscriptionTypeId;
		
		private System.Guid _ApplicationId;
		
		private bool _IsForAllPersons;
		
		private EntityRef<BirthdateSubscription> _BirthdateSubscription;
		
		private EntitySet<Channel> _Channels;
		
		private EntityRef<DataSubscription> _DataSubscription;
		
		private EntitySet<Notification> _Notifications;
		
		private EntitySet<SubscriptionPerson> _SubscriptionPersons;
		
		private EntityRef<Application> _Application;
		
		private EntityRef<SubscriptionType> _SubscriptionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIdChanging(System.Guid value);
    partial void OnSubscriptionIdChanged();
    partial void OnSubscriptionTypeIdChanging(int value);
    partial void OnSubscriptionTypeIdChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnIsForAllPersonsChanging(bool value);
    partial void OnIsForAllPersonsChanged();
    #endregion
		
		public Subscription()
		{
			this._BirthdateSubscription = default(EntityRef<BirthdateSubscription>);
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			this._DataSubscription = default(EntityRef<DataSubscription>);
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._SubscriptionPersons = new EntitySet<SubscriptionPerson>(new Action<SubscriptionPerson>(this.attach_SubscriptionPersons), new Action<SubscriptionPerson>(this.detach_SubscriptionPersons));
			this._Application = default(EntityRef<Application>);
			this._SubscriptionType = default(EntityRef<SubscriptionType>);
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionTypeId", DbType="Int NOT NULL")]
		public int SubscriptionTypeId
		{
			get
			{
				return this._SubscriptionTypeId;
			}
			set
			{
				if ((this._SubscriptionTypeId != value))
				{
					if (this._SubscriptionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionTypeId = value;
					this.SendPropertyChanged("SubscriptionTypeId");
					this.OnSubscriptionTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsForAllPersons", DbType="Bit NOT NULL")]
		public bool IsForAllPersons
		{
			get
			{
				return this._IsForAllPersons;
			}
			set
			{
				if ((this._IsForAllPersons != value))
				{
					this.OnIsForAllPersonsChanging(value);
					this.SendPropertyChanging();
					this._IsForAllPersons = value;
					this.SendPropertyChanged("IsForAllPersons");
					this.OnIsForAllPersonsChanged();
				}
			}
		}
		
		[Association(Name="Subscription_BirthdateSubscription", Storage="_BirthdateSubscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsUnique=true, IsForeignKey=false)]
		public BirthdateSubscription BirthdateSubscription
		{
			get
			{
				return this._BirthdateSubscription.Entity;
			}
			set
			{
				BirthdateSubscription previousValue = this._BirthdateSubscription.Entity;
				if (((previousValue != value) 
							|| (this._BirthdateSubscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BirthdateSubscription.Entity = null;
						previousValue.Subscription = null;
					}
					this._BirthdateSubscription.Entity = value;
					if ((value != null))
					{
						value.Subscription = this;
					}
					this.SendPropertyChanged("BirthdateSubscription");
				}
			}
		}
		
		[Association(Name="Subscription_Channel", Storage="_Channels", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		[Association(Name="Subscription_DataSubscription", Storage="_DataSubscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsUnique=true, IsForeignKey=false)]
		public DataSubscription DataSubscription
		{
			get
			{
				return this._DataSubscription.Entity;
			}
			set
			{
				DataSubscription previousValue = this._DataSubscription.Entity;
				if (((previousValue != value) 
							|| (this._DataSubscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataSubscription.Entity = null;
						previousValue.Subscription = null;
					}
					this._DataSubscription.Entity = value;
					if ((value != null))
					{
						value.Subscription = this;
					}
					this.SendPropertyChanged("DataSubscription");
				}
			}
		}
		
		[Association(Name="Subscription_Notification", Storage="_Notifications", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[Association(Name="Subscription_SubscriptionPerson", Storage="_SubscriptionPersons", ThisKey="SubscriptionId", OtherKey="SubscriptionId")]
		public EntitySet<SubscriptionPerson> SubscriptionPersons
		{
			get
			{
				return this._SubscriptionPersons;
			}
			set
			{
				this._SubscriptionPersons.Assign(value);
			}
		}
		
		[Association(Name="Application_Subscription", Storage="_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public Application Application
		{
			get
			{
				return this._Application.Entity;
			}
			set
			{
				Application previousValue = this._Application.Entity;
				if (((previousValue != value) 
							|| (this._Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application.Entity = null;
						previousValue.Subscriptions.Remove(this);
					}
					this._Application.Entity = value;
					if ((value != null))
					{
						value.Subscriptions.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("Application");
				}
			}
		}
		
		[Association(Name="SubscriptionType_Subscription", Storage="_SubscriptionType", ThisKey="SubscriptionTypeId", OtherKey="SubscriptionTypeId", IsForeignKey=true)]
		public SubscriptionType SubscriptionType
		{
			get
			{
				return this._SubscriptionType.Entity;
			}
			set
			{
				SubscriptionType previousValue = this._SubscriptionType.Entity;
				if (((previousValue != value) 
							|| (this._SubscriptionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubscriptionType.Entity = null;
						previousValue.Subscriptions.Remove(this);
					}
					this._SubscriptionType.Entity = value;
					if ((value != null))
					{
						value.Subscriptions.Add(this);
						this._SubscriptionTypeId = value.SubscriptionTypeId;
					}
					else
					{
						this._SubscriptionTypeId = default(int);
					}
					this.SendPropertyChanged("SubscriptionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
		
		private void attach_SubscriptionPersons(SubscriptionPerson entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = this;
		}
		
		private void detach_SubscriptionPersons(SubscriptionPerson entity)
		{
			this.SendPropertyChanging();
			entity.Subscription = null;
		}
	}
	
	[Table(Name="dbo.SubscriptionPerson")]
	public partial class SubscriptionPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SubscriptionPersonId;
		
		private System.Nullable<System.Guid> _SubscriptionId;
		
		private System.Nullable<System.Guid> _PersonId;
		
		private EntityRef<Subscription> _Subscription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionPersonIdChanging(System.Guid value);
    partial void OnSubscriptionPersonIdChanged();
    partial void OnSubscriptionIdChanging(System.Nullable<System.Guid> value);
    partial void OnSubscriptionIdChanged();
    partial void OnPersonIdChanging(System.Nullable<System.Guid> value);
    partial void OnPersonIdChanged();
    #endregion
		
		public SubscriptionPerson()
		{
			this._Subscription = default(EntityRef<Subscription>);
			OnCreated();
		}
		
		[Column(Storage="_SubscriptionPersonId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SubscriptionPersonId
		{
			get
			{
				return this._SubscriptionPersonId;
			}
			set
			{
				if ((this._SubscriptionPersonId != value))
				{
					this.OnSubscriptionPersonIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionPersonId = value;
					this.SendPropertyChanged("SubscriptionPersonId");
					this.OnSubscriptionPersonIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SubscriptionId
		{
			get
			{
				return this._SubscriptionId;
			}
			set
			{
				if ((this._SubscriptionId != value))
				{
					if (this._Subscription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriptionIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionId = value;
					this.SendPropertyChanged("SubscriptionId");
					this.OnSubscriptionIdChanged();
				}
			}
		}
		
		[Column(Storage="_PersonId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[Association(Name="Subscription_SubscriptionPerson", Storage="_Subscription", ThisKey="SubscriptionId", OtherKey="SubscriptionId", IsForeignKey=true, DeleteRule="CASCADE")]
		public Subscription Subscription
		{
			get
			{
				return this._Subscription.Entity;
			}
			set
			{
				Subscription previousValue = this._Subscription.Entity;
				if (((previousValue != value) 
							|| (this._Subscription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscription.Entity = null;
						previousValue.SubscriptionPersons.Remove(this);
					}
					this._Subscription.Entity = value;
					if ((value != null))
					{
						value.SubscriptionPersons.Add(this);
						this._SubscriptionId = value.SubscriptionId;
					}
					else
					{
						this._SubscriptionId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Subscription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
