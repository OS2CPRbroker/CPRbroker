#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CprBroker.DAL.DataProviders
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PART")]
	public partial class DataProvidersDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDataProviderType(DataProviderType instance);
    partial void UpdateDataProviderType(DataProviderType instance);
    partial void DeleteDataProviderType(DataProviderType instance);
    partial void InsertDataProvider(DataProvider instance);
    partial void UpdateDataProvider(DataProvider instance);
    partial void DeleteDataProvider(DataProvider instance);
    partial void InsertDataProviderProperty(DataProviderProperty instance);
    partial void UpdateDataProviderProperty(DataProviderProperty instance);
    partial void DeleteDataProviderProperty(DataProviderProperty instance);
    #endregion
		
		public DataProvidersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataProvidersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataProvidersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataProvidersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DataProviderType> DataProviderTypes
		{
			get
			{
				return this.GetTable<DataProviderType>();
			}
		}
		
		public System.Data.Linq.Table<DataProvider> DataProviders
		{
			get
			{
				return this.GetTable<DataProvider>();
			}
		}
		
		public System.Data.Linq.Table<DataProviderProperty> DataProviderProperties
		{
			get
			{
				return this.GetTable<DataProviderProperty>();
			}
		}
	}
	
	[Table(Name="dbo.DataProviderType")]
	public partial class DataProviderType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataProviderTypeId;
		
		private string _Name;
		
		private bool _Enabled;
		
		private string _TypeName;
		
		private bool _IsExternal;
		
		private EntitySet<DataProvider> _DataProviders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataProviderTypeIdChanging(int value);
    partial void OnDataProviderTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnIsExternalChanging(bool value);
    partial void OnIsExternalChanged();
    #endregion
		
		public DataProviderType()
		{
			this._DataProviders = new EntitySet<DataProvider>(new Action<DataProvider>(this.attach_DataProviders), new Action<DataProvider>(this.detach_DataProviders));
			OnCreated();
		}
		
		[Column(Storage="_DataProviderTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataProviderTypeId
		{
			get
			{
				return this._DataProviderTypeId;
			}
			set
			{
				if ((this._DataProviderTypeId != value))
				{
					this.OnDataProviderTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DataProviderTypeId = value;
					this.SendPropertyChanged("DataProviderTypeId");
					this.OnDataProviderTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsExternal", DbType="Bit NOT NULL")]
		public bool IsExternal
		{
			get
			{
				return this._IsExternal;
			}
			set
			{
				if ((this._IsExternal != value))
				{
					this.OnIsExternalChanging(value);
					this.SendPropertyChanging();
					this._IsExternal = value;
					this.SendPropertyChanged("IsExternal");
					this.OnIsExternalChanged();
				}
			}
		}
		
		[Association(Name="DataProviderType_DataProvider", Storage="_DataProviders", ThisKey="DataProviderTypeId", OtherKey="DataProviderTypeId")]
		public EntitySet<DataProvider> DataProviders
		{
			get
			{
				return this._DataProviders;
			}
			set
			{
				this._DataProviders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataProviders(DataProvider entity)
		{
			this.SendPropertyChanging();
			entity.DataProviderType = this;
		}
		
		private void detach_DataProviders(DataProvider entity)
		{
			this.SendPropertyChanging();
			entity.DataProviderType = null;
		}
	}
	
	[Table(Name="dbo.DataProvider")]
	public partial class DataProvider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataProviderId;
		
		private int _DataProviderTypeId;
		
		private string _Address;
		
		private System.Nullable<int> _Port;
		
		private string _ConnectionString;
		
		private string _UserName;
		
		private string _Password;
		
		private EntitySet<DataProviderProperty> _DataProviderProperties;
		
		private EntityRef<DataProviderType> _DataProviderType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataProviderIdChanging(int value);
    partial void OnDataProviderIdChanged();
    partial void OnDataProviderTypeIdChanging(int value);
    partial void OnDataProviderTypeIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPortChanging(System.Nullable<int> value);
    partial void OnPortChanged();
    partial void OnConnectionStringChanging(string value);
    partial void OnConnectionStringChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public DataProvider()
		{
			this._DataProviderProperties = new EntitySet<DataProviderProperty>(new Action<DataProviderProperty>(this.attach_DataProviderProperties), new Action<DataProviderProperty>(this.detach_DataProviderProperties));
			this._DataProviderType = default(EntityRef<DataProviderType>);
			OnCreated();
		}
		
		[Column(Storage="_DataProviderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataProviderId
		{
			get
			{
				return this._DataProviderId;
			}
			set
			{
				if ((this._DataProviderId != value))
				{
					this.OnDataProviderIdChanging(value);
					this.SendPropertyChanging();
					this._DataProviderId = value;
					this.SendPropertyChanged("DataProviderId");
					this.OnDataProviderIdChanged();
				}
			}
		}
		
		[Column(Storage="_DataProviderTypeId", DbType="Int NOT NULL")]
		public int DataProviderTypeId
		{
			get
			{
				return this._DataProviderTypeId;
			}
			set
			{
				if ((this._DataProviderTypeId != value))
				{
					if (this._DataProviderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataProviderTypeIdChanging(value);
					this.SendPropertyChanging();
					this._DataProviderTypeId = value;
					this.SendPropertyChanged("DataProviderTypeId");
					this.OnDataProviderTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Port", DbType="Int")]
		public System.Nullable<int> Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[Column(Storage="_ConnectionString", DbType="VarChar(250)")]
		public string ConnectionString
		{
			get
			{
				return this._ConnectionString;
			}
			set
			{
				if ((this._ConnectionString != value))
				{
					this.OnConnectionStringChanging(value);
					this.SendPropertyChanging();
					this._ConnectionString = value;
					this.SendPropertyChanged("ConnectionString");
					this.OnConnectionStringChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Association(Name="DataProvider_DataProviderProperty", Storage="_DataProviderProperties", ThisKey="DataProviderId", OtherKey="DataProviderId")]
		public EntitySet<DataProviderProperty> DataProviderProperties
		{
			get
			{
				return this._DataProviderProperties;
			}
			set
			{
				this._DataProviderProperties.Assign(value);
			}
		}
		
		[Association(Name="DataProviderType_DataProvider", Storage="_DataProviderType", ThisKey="DataProviderTypeId", OtherKey="DataProviderTypeId", IsForeignKey=true)]
		public DataProviderType DataProviderType
		{
			get
			{
				return this._DataProviderType.Entity;
			}
			set
			{
				DataProviderType previousValue = this._DataProviderType.Entity;
				if (((previousValue != value) 
							|| (this._DataProviderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataProviderType.Entity = null;
						previousValue.DataProviders.Remove(this);
					}
					this._DataProviderType.Entity = value;
					if ((value != null))
					{
						value.DataProviders.Add(this);
						this._DataProviderTypeId = value.DataProviderTypeId;
					}
					else
					{
						this._DataProviderTypeId = default(int);
					}
					this.SendPropertyChanged("DataProviderType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataProviderProperties(DataProviderProperty entity)
		{
			this.SendPropertyChanging();
			entity.DataProvider = this;
		}
		
		private void detach_DataProviderProperties(DataProviderProperty entity)
		{
			this.SendPropertyChanging();
			entity.DataProvider = null;
		}
	}
	
	[Table(Name="dbo.DataProviderProperty")]
	public partial class DataProviderProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DataProviderPropertyId;
		
		private System.Nullable<int> _DataProviderId;
		
		private string _Name;
		
		private string _Value;
		
		private EntityRef<DataProvider> _DataProvider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataProviderPropertyIdChanging(System.Guid value);
    partial void OnDataProviderPropertyIdChanged();
    partial void OnDataProviderIdChanging(System.Nullable<int> value);
    partial void OnDataProviderIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public DataProviderProperty()
		{
			this._DataProvider = default(EntityRef<DataProvider>);
			OnCreated();
		}
		
		[Column(Storage="_DataProviderPropertyId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DataProviderPropertyId
		{
			get
			{
				return this._DataProviderPropertyId;
			}
			set
			{
				if ((this._DataProviderPropertyId != value))
				{
					this.OnDataProviderPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._DataProviderPropertyId = value;
					this.SendPropertyChanged("DataProviderPropertyId");
					this.OnDataProviderPropertyIdChanged();
				}
			}
		}
		
		[Column(Storage="_DataProviderId", DbType="Int")]
		public System.Nullable<int> DataProviderId
		{
			get
			{
				return this._DataProviderId;
			}
			set
			{
				if ((this._DataProviderId != value))
				{
					if (this._DataProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataProviderIdChanging(value);
					this.SendPropertyChanging();
					this._DataProviderId = value;
					this.SendPropertyChanged("DataProviderId");
					this.OnDataProviderIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(250)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="DataProvider_DataProviderProperty", Storage="_DataProvider", ThisKey="DataProviderId", OtherKey="DataProviderId", IsForeignKey=true)]
		public DataProvider DataProvider
		{
			get
			{
				return this._DataProvider.Entity;
			}
			set
			{
				DataProvider previousValue = this._DataProvider.Entity;
				if (((previousValue != value) 
							|| (this._DataProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataProvider.Entity = null;
						previousValue.DataProviderProperties.Remove(this);
					}
					this._DataProvider.Entity = value;
					if ((value != null))
					{
						value.DataProviderProperties.Add(this);
						this._DataProviderId = value.DataProviderId;
					}
					else
					{
						this._DataProviderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataProvider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
