//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
// 
#pragma warning disable 1591

namespace CprBroker.DataProviders.PersonMaster.PersonMasterService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'EndpointReference' from namespace 'http://www.w3.org/2005/08/addressing' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsBasicHttp", Namespace="http://tempuri.org/")]
    public partial class BasicOp : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateObjectOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetObjectOwnerIDFromNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetObjectIDFromCprOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetObjectIDFromCprWithOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCprFromObjectIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback MapCpr2LoginnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameLoginnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLoginnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginnameExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPreferredLoginnameFromCprOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPreferredLoginnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLoginnamesFromCprOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCprFromLoginnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProbeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDBRuntimeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterNonAdminUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnRegisterNonAdminUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRegisteredNonAdminUserOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BasicOp() {
            this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
            this.Url = global::CprBroker.DataProviders.PersonMaster.Properties.Settings.Default.CprBroker_DataProviders_PersonMaster_PersonMasterService_BasicOp;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateObjectOwnerCompletedEventHandler CreateObjectOwnerCompleted;
        
        /// <remarks/>
        public event GetObjectOwnerIDFromNamespaceCompletedEventHandler GetObjectOwnerIDFromNamespaceCompleted;
        
        /// <remarks/>
        public event GetObjectIDFromCprCompletedEventHandler GetObjectIDFromCprCompleted;
        
        /// <remarks/>
        public event GetObjectIDFromCprWithOwnerCompletedEventHandler GetObjectIDFromCprWithOwnerCompleted;
        
        /// <remarks/>
        public event GetCprFromObjectIDCompletedEventHandler GetCprFromObjectIDCompleted;
        
        /// <remarks/>
        public event MapCpr2LoginnameCompletedEventHandler MapCpr2LoginnameCompleted;
        
        /// <remarks/>
        public event RenameLoginnameCompletedEventHandler RenameLoginnameCompleted;
        
        /// <remarks/>
        public event DeleteLoginnameCompletedEventHandler DeleteLoginnameCompleted;
        
        /// <remarks/>
        public event LoginnameExistCompletedEventHandler LoginnameExistCompleted;
        
        /// <remarks/>
        public event GetPreferredLoginnameFromCprCompletedEventHandler GetPreferredLoginnameFromCprCompleted;
        
        /// <remarks/>
        public event SetPreferredLoginnameCompletedEventHandler SetPreferredLoginnameCompleted;
        
        /// <remarks/>
        public event GetAllLoginnamesFromCprCompletedEventHandler GetAllLoginnamesFromCprCompleted;
        
        /// <remarks/>
        public event GetCprFromLoginnameCompletedEventHandler GetCprFromLoginnameCompleted;
        
        /// <remarks/>
        public event ProbeCompletedEventHandler ProbeCompleted;
        
        /// <remarks/>
        public event GetDBRuntimeInfoCompletedEventHandler GetDBRuntimeInfoCompleted;
        
        /// <remarks/>
        public event RegisterNonAdminUserCompletedEventHandler RegisterNonAdminUserCompleted;
        
        /// <remarks/>
        public event UnRegisterNonAdminUserCompletedEventHandler UnRegisterNonAdminUserCompleted;
        
        /// <remarks/>
        public event IsRegisteredNonAdminUserCompletedEventHandler IsRegisteredNonAdminUserCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/CreateObjectOwner", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateObjectOwner([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string nameSpace, string objectOwnerID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("CreateObjectOwner", new object[] {
                        context,
                        nameSpace,
                        objectOwnerID,
                        aux});
            aux = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateObjectOwnerAsync(string context, string nameSpace, string objectOwnerID, string aux) {
            this.CreateObjectOwnerAsync(context, nameSpace, objectOwnerID, aux, null);
        }
        
        /// <remarks/>
        public void CreateObjectOwnerAsync(string context, string nameSpace, string objectOwnerID, string aux, object userState) {
            if ((this.CreateObjectOwnerOperationCompleted == null)) {
                this.CreateObjectOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateObjectOwnerOperationCompleted);
            }
            this.InvokeAsync("CreateObjectOwner", new object[] {
                        context,
                        nameSpace,
                        objectOwnerID,
                        aux}, this.CreateObjectOwnerOperationCompleted, userState);
        }
        
        private void OnCreateObjectOwnerOperationCompleted(object arg) {
            if ((this.CreateObjectOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateObjectOwnerCompleted(this, new CreateObjectOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/GetObjectOwnerIDFromNamespace" +
            "", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetObjectOwnerIDFromNamespace([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string nameSpace, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("GetObjectOwnerIDFromNamespace", new object[] {
                        context,
                        nameSpace,
                        aux});
            aux = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetObjectOwnerIDFromNamespaceAsync(string context, string nameSpace, string aux) {
            this.GetObjectOwnerIDFromNamespaceAsync(context, nameSpace, aux, null);
        }
        
        /// <remarks/>
        public void GetObjectOwnerIDFromNamespaceAsync(string context, string nameSpace, string aux, object userState) {
            if ((this.GetObjectOwnerIDFromNamespaceOperationCompleted == null)) {
                this.GetObjectOwnerIDFromNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetObjectOwnerIDFromNamespaceOperationCompleted);
            }
            this.InvokeAsync("GetObjectOwnerIDFromNamespace", new object[] {
                        context,
                        nameSpace,
                        aux}, this.GetObjectOwnerIDFromNamespaceOperationCompleted, userState);
        }
        
        private void OnGetObjectOwnerIDFromNamespaceOperationCompleted(object arg) {
            if ((this.GetObjectOwnerIDFromNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetObjectOwnerIDFromNamespaceCompleted(this, new GetObjectOwnerIDFromNamespaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/GetObjectIDFromCpr", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetObjectIDFromCpr([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cprNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("GetObjectIDFromCpr", new object[] {
                        context,
                        cprNo,
                        aux});
            aux = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetObjectIDFromCprAsync(string context, string cprNo, string aux) {
            this.GetObjectIDFromCprAsync(context, cprNo, aux, null);
        }
        
        /// <remarks/>
        public void GetObjectIDFromCprAsync(string context, string cprNo, string aux, object userState) {
            if ((this.GetObjectIDFromCprOperationCompleted == null)) {
                this.GetObjectIDFromCprOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetObjectIDFromCprOperationCompleted);
            }
            this.InvokeAsync("GetObjectIDFromCpr", new object[] {
                        context,
                        cprNo,
                        aux}, this.GetObjectIDFromCprOperationCompleted, userState);
        }
        
        private void OnGetObjectIDFromCprOperationCompleted(object arg) {
            if ((this.GetObjectIDFromCprCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetObjectIDFromCprCompleted(this, new GetObjectIDFromCprCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/GetObjectIDFromCprWithOwner", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetObjectIDFromCprWithOwner([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cprNo, string objectOwnerID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("GetObjectIDFromCprWithOwner", new object[] {
                        context,
                        cprNo,
                        objectOwnerID,
                        aux});
            aux = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetObjectIDFromCprWithOwnerAsync(string context, string cprNo, string objectOwnerID, string aux) {
            this.GetObjectIDFromCprWithOwnerAsync(context, cprNo, objectOwnerID, aux, null);
        }
        
        /// <remarks/>
        public void GetObjectIDFromCprWithOwnerAsync(string context, string cprNo, string objectOwnerID, string aux, object userState) {
            if ((this.GetObjectIDFromCprWithOwnerOperationCompleted == null)) {
                this.GetObjectIDFromCprWithOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetObjectIDFromCprWithOwnerOperationCompleted);
            }
            this.InvokeAsync("GetObjectIDFromCprWithOwner", new object[] {
                        context,
                        cprNo,
                        objectOwnerID,
                        aux}, this.GetObjectIDFromCprWithOwnerOperationCompleted, userState);
        }
        
        private void OnGetObjectIDFromCprWithOwnerOperationCompleted(object arg) {
            if ((this.GetObjectIDFromCprWithOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetObjectIDFromCprWithOwnerCompleted(this, new GetObjectIDFromCprWithOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/GetCprFromObjectID", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetCprFromObjectID([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, string objectID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("GetCprFromObjectID", new object[] {
                        context,
                        objectID,
                        aux});
            aux = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCprFromObjectIDAsync(string context, string objectID, string aux) {
            this.GetCprFromObjectIDAsync(context, objectID, aux, null);
        }
        
        /// <remarks/>
        public void GetCprFromObjectIDAsync(string context, string objectID, string aux, object userState) {
            if ((this.GetCprFromObjectIDOperationCompleted == null)) {
                this.GetCprFromObjectIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCprFromObjectIDOperationCompleted);
            }
            this.InvokeAsync("GetCprFromObjectID", new object[] {
                        context,
                        objectID,
                        aux}, this.GetCprFromObjectIDOperationCompleted, userState);
        }
        
        private void OnGetCprFromObjectIDOperationCompleted(object arg) {
            if ((this.GetCprFromObjectIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCprFromObjectIDCompleted(this, new GetCprFromObjectIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/MapCpr2Loginname", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MapCpr2Loginname([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cprNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("MapCpr2Loginname", new object[] {
                        context,
                        cprNo,
                        loginName,
                        aux});
            aux = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MapCpr2LoginnameAsync(string context, string cprNo, string loginName, string aux) {
            this.MapCpr2LoginnameAsync(context, cprNo, loginName, aux, null);
        }
        
        /// <remarks/>
        public void MapCpr2LoginnameAsync(string context, string cprNo, string loginName, string aux, object userState) {
            if ((this.MapCpr2LoginnameOperationCompleted == null)) {
                this.MapCpr2LoginnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMapCpr2LoginnameOperationCompleted);
            }
            this.InvokeAsync("MapCpr2Loginname", new object[] {
                        context,
                        cprNo,
                        loginName,
                        aux}, this.MapCpr2LoginnameOperationCompleted, userState);
        }
        
        private void OnMapCpr2LoginnameOperationCompleted(object arg) {
            if ((this.MapCpr2LoginnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MapCpr2LoginnameCompleted(this, new MapCpr2LoginnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/RenameLoginname", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RenameLoginname([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string oldLoginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string newLoginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("RenameLoginname", new object[] {
                        context,
                        oldLoginName,
                        newLoginName,
                        aux});
            aux = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RenameLoginnameAsync(string context, string oldLoginName, string newLoginName, string aux) {
            this.RenameLoginnameAsync(context, oldLoginName, newLoginName, aux, null);
        }
        
        /// <remarks/>
        public void RenameLoginnameAsync(string context, string oldLoginName, string newLoginName, string aux, object userState) {
            if ((this.RenameLoginnameOperationCompleted == null)) {
                this.RenameLoginnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameLoginnameOperationCompleted);
            }
            this.InvokeAsync("RenameLoginname", new object[] {
                        context,
                        oldLoginName,
                        newLoginName,
                        aux}, this.RenameLoginnameOperationCompleted, userState);
        }
        
        private void OnRenameLoginnameOperationCompleted(object arg) {
            if ((this.RenameLoginnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameLoginnameCompleted(this, new RenameLoginnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/DeleteLoginname", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteLoginname([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("DeleteLoginname", new object[] {
                        context,
                        loginName,
                        aux});
            aux = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteLoginnameAsync(string context, string loginName, string aux) {
            this.DeleteLoginnameAsync(context, loginName, aux, null);
        }
        
        /// <remarks/>
        public void DeleteLoginnameAsync(string context, string loginName, string aux, object userState) {
            if ((this.DeleteLoginnameOperationCompleted == null)) {
                this.DeleteLoginnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLoginnameOperationCompleted);
            }
            this.InvokeAsync("DeleteLoginname", new object[] {
                        context,
                        loginName,
                        aux}, this.DeleteLoginnameOperationCompleted, userState);
        }
        
        private void OnDeleteLoginnameOperationCompleted(object arg) {
            if ((this.DeleteLoginnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLoginnameCompleted(this, new DeleteLoginnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/LoginnameExist", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LoginnameExist([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux, out bool LoginnameExistResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool LoginnameExistResultSpecified) {
            object[] results = this.Invoke("LoginnameExist", new object[] {
                        context,
                        loginName,
                        aux});
            aux = ((string)(results[0]));
            LoginnameExistResult = ((bool)(results[1]));
            LoginnameExistResultSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void LoginnameExistAsync(string context, string loginName, string aux) {
            this.LoginnameExistAsync(context, loginName, aux, null);
        }
        
        /// <remarks/>
        public void LoginnameExistAsync(string context, string loginName, string aux, object userState) {
            if ((this.LoginnameExistOperationCompleted == null)) {
                this.LoginnameExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginnameExistOperationCompleted);
            }
            this.InvokeAsync("LoginnameExist", new object[] {
                        context,
                        loginName,
                        aux}, this.LoginnameExistOperationCompleted, userState);
        }
        
        private void OnLoginnameExistOperationCompleted(object arg) {
            if ((this.LoginnameExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginnameExistCompleted(this, new LoginnameExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/GetPreferredLoginnameFromCpr", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetPreferredLoginnameFromCpr([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cprNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("GetPreferredLoginnameFromCpr", new object[] {
                        context,
                        cprNo,
                        aux});
            aux = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPreferredLoginnameFromCprAsync(string context, string cprNo, string aux) {
            this.GetPreferredLoginnameFromCprAsync(context, cprNo, aux, null);
        }
        
        /// <remarks/>
        public void GetPreferredLoginnameFromCprAsync(string context, string cprNo, string aux, object userState) {
            if ((this.GetPreferredLoginnameFromCprOperationCompleted == null)) {
                this.GetPreferredLoginnameFromCprOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPreferredLoginnameFromCprOperationCompleted);
            }
            this.InvokeAsync("GetPreferredLoginnameFromCpr", new object[] {
                        context,
                        cprNo,
                        aux}, this.GetPreferredLoginnameFromCprOperationCompleted, userState);
        }
        
        private void OnGetPreferredLoginnameFromCprOperationCompleted(object arg) {
            if ((this.GetPreferredLoginnameFromCprCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPreferredLoginnameFromCprCompleted(this, new GetPreferredLoginnameFromCprCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/SetPreferredLoginname", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPreferredLoginname([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cprNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("SetPreferredLoginname", new object[] {
                        context,
                        cprNo,
                        loginName,
                        aux});
            aux = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetPreferredLoginnameAsync(string context, string cprNo, string loginName, string aux) {
            this.SetPreferredLoginnameAsync(context, cprNo, loginName, aux, null);
        }
        
        /// <remarks/>
        public void SetPreferredLoginnameAsync(string context, string cprNo, string loginName, string aux, object userState) {
            if ((this.SetPreferredLoginnameOperationCompleted == null)) {
                this.SetPreferredLoginnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPreferredLoginnameOperationCompleted);
            }
            this.InvokeAsync("SetPreferredLoginname", new object[] {
                        context,
                        cprNo,
                        loginName,
                        aux}, this.SetPreferredLoginnameOperationCompleted, userState);
        }
        
        private void OnSetPreferredLoginnameOperationCompleted(object arg) {
            if ((this.SetPreferredLoginnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPreferredLoginnameCompleted(this, new SetPreferredLoginnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/GetAllLoginnamesFromCpr", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] GetAllLoginnamesFromCpr([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cprNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("GetAllLoginnamesFromCpr", new object[] {
                        context,
                        cprNo,
                        aux});
            aux = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLoginnamesFromCprAsync(string context, string cprNo, string aux) {
            this.GetAllLoginnamesFromCprAsync(context, cprNo, aux, null);
        }
        
        /// <remarks/>
        public void GetAllLoginnamesFromCprAsync(string context, string cprNo, string aux, object userState) {
            if ((this.GetAllLoginnamesFromCprOperationCompleted == null)) {
                this.GetAllLoginnamesFromCprOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLoginnamesFromCprOperationCompleted);
            }
            this.InvokeAsync("GetAllLoginnamesFromCpr", new object[] {
                        context,
                        cprNo,
                        aux}, this.GetAllLoginnamesFromCprOperationCompleted, userState);
        }
        
        private void OnGetAllLoginnamesFromCprOperationCompleted(object arg) {
            if ((this.GetAllLoginnamesFromCprCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLoginnamesFromCprCompleted(this, new GetAllLoginnamesFromCprCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/GetCprFromLoginname", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetCprFromLoginname([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("GetCprFromLoginname", new object[] {
                        context,
                        loginName,
                        aux});
            aux = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCprFromLoginnameAsync(string context, string loginName, string aux) {
            this.GetCprFromLoginnameAsync(context, loginName, aux, null);
        }
        
        /// <remarks/>
        public void GetCprFromLoginnameAsync(string context, string loginName, string aux, object userState) {
            if ((this.GetCprFromLoginnameOperationCompleted == null)) {
                this.GetCprFromLoginnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCprFromLoginnameOperationCompleted);
            }
            this.InvokeAsync("GetCprFromLoginname", new object[] {
                        context,
                        loginName,
                        aux}, this.GetCprFromLoginnameOperationCompleted, userState);
        }
        
        private void OnGetCprFromLoginnameOperationCompleted(object arg) {
            if ((this.GetCprFromLoginnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCprFromLoginnameCompleted(this, new GetCprFromLoginnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/Probe", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Probe([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("Probe", new object[] {
                        context,
                        aux});
            aux = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProbeAsync(string context, string aux) {
            this.ProbeAsync(context, aux, null);
        }
        
        /// <remarks/>
        public void ProbeAsync(string context, string aux, object userState) {
            if ((this.ProbeOperationCompleted == null)) {
                this.ProbeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProbeOperationCompleted);
            }
            this.InvokeAsync("Probe", new object[] {
                        context,
                        aux}, this.ProbeOperationCompleted, userState);
        }
        
        private void OnProbeOperationCompleted(object arg) {
            if ((this.ProbeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProbeCompleted(this, new ProbeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/GetDBRuntimeInfo", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDBRuntimeInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("GetDBRuntimeInfo", new object[] {
                        context,
                        aux});
            aux = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDBRuntimeInfoAsync(string context, string aux) {
            this.GetDBRuntimeInfoAsync(context, aux, null);
        }
        
        /// <remarks/>
        public void GetDBRuntimeInfoAsync(string context, string aux, object userState) {
            if ((this.GetDBRuntimeInfoOperationCompleted == null)) {
                this.GetDBRuntimeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBRuntimeInfoOperationCompleted);
            }
            this.InvokeAsync("GetDBRuntimeInfo", new object[] {
                        context,
                        aux}, this.GetDBRuntimeInfoOperationCompleted, userState);
        }
        
        private void OnGetDBRuntimeInfoOperationCompleted(object arg) {
            if ((this.GetDBRuntimeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBRuntimeInfoCompleted(this, new GetDBRuntimeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/RegisterNonAdminUser", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RegisterNonAdminUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cprNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("RegisterNonAdminUser", new object[] {
                        context,
                        cprNo,
                        aux});
            aux = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterNonAdminUserAsync(string context, string cprNo, string aux) {
            this.RegisterNonAdminUserAsync(context, cprNo, aux, null);
        }
        
        /// <remarks/>
        public void RegisterNonAdminUserAsync(string context, string cprNo, string aux, object userState) {
            if ((this.RegisterNonAdminUserOperationCompleted == null)) {
                this.RegisterNonAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterNonAdminUserOperationCompleted);
            }
            this.InvokeAsync("RegisterNonAdminUser", new object[] {
                        context,
                        cprNo,
                        aux}, this.RegisterNonAdminUserOperationCompleted, userState);
        }
        
        private void OnRegisterNonAdminUserOperationCompleted(object arg) {
            if ((this.RegisterNonAdminUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterNonAdminUserCompleted(this, new RegisterNonAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/UnRegisterNonAdminUser", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnRegisterNonAdminUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cprNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux) {
            object[] results = this.Invoke("UnRegisterNonAdminUser", new object[] {
                        context,
                        cprNo,
                        aux});
            aux = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnRegisterNonAdminUserAsync(string context, string cprNo, string aux) {
            this.UnRegisterNonAdminUserAsync(context, cprNo, aux, null);
        }
        
        /// <remarks/>
        public void UnRegisterNonAdminUserAsync(string context, string cprNo, string aux, object userState) {
            if ((this.UnRegisterNonAdminUserOperationCompleted == null)) {
                this.UnRegisterNonAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnRegisterNonAdminUserOperationCompleted);
            }
            this.InvokeAsync("UnRegisterNonAdminUser", new object[] {
                        context,
                        cprNo,
                        aux}, this.UnRegisterNonAdminUserOperationCompleted, userState);
        }
        
        private void OnUnRegisterNonAdminUserOperationCompleted(object arg) {
            if ((this.UnRegisterNonAdminUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnRegisterNonAdminUserCompleted(this, new UnRegisterNonAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://personmaster.gentofte.dk/BasicOp/01/IBasicOp/IsRegisteredNonAdminUser", RequestNamespace="http://personmaster.gentofte.dk/BasicOp/01", ResponseNamespace="http://personmaster.gentofte.dk/BasicOp/01", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IsRegisteredNonAdminUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string context, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string cprNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ref string aux, out bool IsRegisteredNonAdminUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool IsRegisteredNonAdminUserResultSpecified) {
            object[] results = this.Invoke("IsRegisteredNonAdminUser", new object[] {
                        context,
                        cprNo,
                        aux});
            aux = ((string)(results[0]));
            IsRegisteredNonAdminUserResult = ((bool)(results[1]));
            IsRegisteredNonAdminUserResultSpecified = ((bool)(results[2]));
        }
        
        /// <remarks/>
        public void IsRegisteredNonAdminUserAsync(string context, string cprNo, string aux) {
            this.IsRegisteredNonAdminUserAsync(context, cprNo, aux, null);
        }
        
        /// <remarks/>
        public void IsRegisteredNonAdminUserAsync(string context, string cprNo, string aux, object userState) {
            if ((this.IsRegisteredNonAdminUserOperationCompleted == null)) {
                this.IsRegisteredNonAdminUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRegisteredNonAdminUserOperationCompleted);
            }
            this.InvokeAsync("IsRegisteredNonAdminUser", new object[] {
                        context,
                        cprNo,
                        aux}, this.IsRegisteredNonAdminUserOperationCompleted, userState);
        }
        
        private void OnIsRegisteredNonAdminUserOperationCompleted(object arg) {
            if ((this.IsRegisteredNonAdminUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRegisteredNonAdminUserCompleted(this, new IsRegisteredNonAdminUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateObjectOwnerCompletedEventHandler(object sender, CreateObjectOwnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateObjectOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateObjectOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetObjectOwnerIDFromNamespaceCompletedEventHandler(object sender, GetObjectOwnerIDFromNamespaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetObjectOwnerIDFromNamespaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetObjectOwnerIDFromNamespaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetObjectIDFromCprCompletedEventHandler(object sender, GetObjectIDFromCprCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetObjectIDFromCprCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetObjectIDFromCprCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetObjectIDFromCprWithOwnerCompletedEventHandler(object sender, GetObjectIDFromCprWithOwnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetObjectIDFromCprWithOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetObjectIDFromCprWithOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCprFromObjectIDCompletedEventHandler(object sender, GetCprFromObjectIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCprFromObjectIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCprFromObjectIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void MapCpr2LoginnameCompletedEventHandler(object sender, MapCpr2LoginnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MapCpr2LoginnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MapCpr2LoginnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RenameLoginnameCompletedEventHandler(object sender, RenameLoginnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameLoginnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameLoginnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteLoginnameCompletedEventHandler(object sender, DeleteLoginnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteLoginnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteLoginnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void LoginnameExistCompletedEventHandler(object sender, LoginnameExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginnameExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginnameExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool LoginnameExistResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool LoginnameExistResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetPreferredLoginnameFromCprCompletedEventHandler(object sender, GetPreferredLoginnameFromCprCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPreferredLoginnameFromCprCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPreferredLoginnameFromCprCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SetPreferredLoginnameCompletedEventHandler(object sender, SetPreferredLoginnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPreferredLoginnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPreferredLoginnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAllLoginnamesFromCprCompletedEventHandler(object sender, GetAllLoginnamesFromCprCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLoginnamesFromCprCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLoginnamesFromCprCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCprFromLoginnameCompletedEventHandler(object sender, GetCprFromLoginnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCprFromLoginnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCprFromLoginnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ProbeCompletedEventHandler(object sender, ProbeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProbeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProbeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDBRuntimeInfoCompletedEventHandler(object sender, GetDBRuntimeInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBRuntimeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDBRuntimeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RegisterNonAdminUserCompletedEventHandler(object sender, RegisterNonAdminUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterNonAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterNonAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UnRegisterNonAdminUserCompletedEventHandler(object sender, UnRegisterNonAdminUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnRegisterNonAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnRegisterNonAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void IsRegisteredNonAdminUserCompletedEventHandler(object sender, IsRegisteredNonAdminUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRegisteredNonAdminUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRegisteredNonAdminUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string aux {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsRegisteredNonAdminUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool IsRegisteredNonAdminUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591